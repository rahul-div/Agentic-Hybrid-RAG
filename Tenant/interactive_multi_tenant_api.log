2025-09-11 16:14:54,898 - __main__ - INFO - Starting Interactive Multi-Tenant RAG API on 127.0.0.1:8000
2025-09-11 16:14:54,943 - interactive_multi_tenant_api - INFO - Starting Multi-Tenant RAG API...
2025-09-11 16:14:54,943 - tenant_manager - WARNING - Neo4j credentials not provided - Graphiti integration disabled
2025-09-11 16:14:54,943 - tenant_manager - WARNING - Neo4j credentials not provided - Graphiti integration disabled
2025-09-11 16:14:54,944 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-11 16:14:54,944 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-11 16:14:54,944 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-09-11 16:14:54,944 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-09-11 16:14:54,944 - multi_tenant_ingestion - INFO - Multi-tenant ingestion pipeline initialized
2025-09-11 16:14:54,944 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-09-11 16:14:54,944 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-09-11 16:14:54,944 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-09-11 16:14:54,944 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-09-11 16:14:54,944 - interactive_multi_tenant_api - INFO - Tenant manager initialized
2025-09-11 16:14:54,947 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-11 16:14:54,947 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-11 16:14:54,947 - interactive_multi_tenant_api - INFO - Tenant ingestion service initialized
2025-09-11 16:14:54,947 - auth_middleware - INFO - JWT Authenticator initialized
2025-09-11 16:14:54,947 - auth_middleware - INFO - JWT Authenticator initialized
2025-09-11 16:14:54,947 - interactive_multi_tenant_api - INFO - JWT authenticator initialized
2025-09-11 16:14:54,947 - interactive_multi_tenant_api - INFO - 🎯 Multi-Tenant RAG API ready - all backend logs will appear in this terminal
2025-09-11 16:14:54,947 - interactive_multi_tenant_api - INFO - 📊 Backend activity from CLI and API operations will be shown below:
2025-09-11 16:15:22,353 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-09-11 16:15:22,353 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-09-11 16:15:22,835 - catalog_database - INFO - Catalog database connection test successful
2025-09-11 16:15:22,835 - catalog_database - INFO - Catalog database connection test successful
2025-09-11 16:15:24,619 - tenant_manager - INFO - TenantManager initialized with Graphiti client
2025-09-11 16:15:24,619 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-11 16:15:24,619 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-09-11 16:15:24,619 - multi_tenant_ingestion - INFO - Multi-tenant ingestion pipeline initialized
2025-09-11 16:15:24,619 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-09-11 16:15:24,619 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-09-11 16:15:24,622 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-11 16:15:24,622 - auth_middleware - INFO - JWT Authenticator initialized
2025-09-11 16:15:28,899 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-09-11 16:15:29,103 - catalog_database - INFO - Catalog database connection test successful
2025-09-11 16:15:29,103 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-11 16:15:29,181 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-11 16:15:29,229 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-11 16:15:29,565 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)` has no effect.} {description: `RANGE INDEX name_edge_index FOR ()-[e:RELATES_TO]-() ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)'
2025-09-11 16:15:29,566 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX relation_group_id FOR ()-[e:RELATES_TO]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)'
2025-09-11 16:15:29,567 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_group_id IF NOT EXISTS FOR (e:Episodic) ON (e.group_id)` has no effect.} {description: `RANGE INDEX episode_group_id FOR (e:Episodic) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX episode_group_id IF NOT EXISTS FOR (n:Episodic) ON (n.group_id)'
2025-09-11 16:15:29,567 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_uuid IF NOT EXISTS FOR (e:Entity) ON (e.uuid)` has no effect.} {description: `RANGE INDEX entity_uuid FOR (e:Entity) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX entity_uuid IF NOT EXISTS FOR (n:Entity) ON (n.uuid)'
2025-09-11 16:15:29,567 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_episodic_index FOR (e:Episodic) ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.valid_at)'
2025-09-11 16:15:29,568 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` has no effect.} {description: `RANGE INDEX expired_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` already exists.} {position: None} for query: 'CREATE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)'
2025-09-11 16:15:29,568 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_entity_index FOR (e:Entity) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.created_at)'
2025-09-11 16:15:29,569 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)'
2025-09-11 16:15:29,569 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_episodic_index FOR (e:Episodic) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.created_at)'
2025-09-11 16:15:29,569 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX mention_group_id FOR ()-[e:MENTIONS]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)'
2025-09-11 16:15:29,570 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_uuid IF NOT EXISTS FOR (e:Episodic) ON (e.uuid)` has no effect.} {description: `RANGE INDEX episode_uuid FOR (e:Episodic) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX episode_uuid IF NOT EXISTS FOR (n:Episodic) ON (n.uuid)'
2025-09-11 16:15:29,570 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.name)` has no effect.} {description: `RANGE INDEX name_entity_index FOR (e:Entity) ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.name)'
2025-09-11 16:15:29,570 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` has no effect.} {description: `RANGE INDEX invalid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` already exists.} {position: None} for query: 'CREATE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)'
2025-09-11 16:15:29,571 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX relation_uuid FOR ()-[e:RELATES_TO]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)'
2025-09-11 16:15:29,571 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX has_member_uuid FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)'
2025-09-11 16:15:29,571 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX community_uuid IF NOT EXISTS FOR (e:Community) ON (e.uuid)` has no effect.} {description: `RANGE INDEX community_uuid FOR (e:Community) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX community_uuid IF NOT EXISTS FOR (n:Community) ON (n.uuid)'
2025-09-11 16:15:29,571 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)'
2025-09-11 16:15:29,572 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX mention_uuid FOR ()-[e:MENTIONS]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)'
2025-09-11 16:15:29,572 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_group_id IF NOT EXISTS FOR (e:Entity) ON (e.group_id)` has no effect.} {description: `RANGE INDEX entity_group_id FOR (e:Entity) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX entity_group_id IF NOT EXISTS FOR (n:Entity) ON (n.group_id)'
2025-09-11 16:15:29,572 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX episode_content IF NOT EXISTS FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` has no effect.} {description: `FULLTEXT INDEX episode_content FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX episode_content IF NOT EXISTS \n            FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]'
2025-09-11 16:15:29,584 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX community_name IF NOT EXISTS FOR (e:Community) ON EACH [e.name, e.group_id]` has no effect.} {description: `FULLTEXT INDEX community_name FOR (e:Community) ON EACH [e.name, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX community_name IF NOT EXISTS \n            FOR (n:Community) ON EACH [n.name, n.group_id]'
2025-09-11 16:15:29,587 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` has no effect.} {description: `FULLTEXT INDEX node_name_and_summary FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS \n            FOR (n:Entity) ON EACH [n.name, n.summary, n.group_id]'
2025-09-11 16:15:29,588 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` has no effect.} {description: `FULLTEXT INDEX edge_name_and_fact FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS \n            FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]'
2025-09-11 16:15:29,589 - tenant_graphiti_client - INFO - TenantGraphitiClient initialized successfully with LLM: gemini-2.0-flash-thinking-exp-1219
2025-09-11 16:16:44,720 - multi_tenant_agent - INFO - Using comprehensive system prompt for intelligent tool routing
2025-09-11 16:16:44,772 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-11 16:16:44,814 - multi_tenant_agent - INFO - Created multi-tenant agent with model: gemini-2.0-flash-thinking-exp-1219
2025-09-11 16:16:44,819 - multi_tenant_agent - INFO - Successfully registered tenant-aware tools
2025-09-11 16:18:00,172 - multi_tenant_agent - INFO - 🧠 Starting chat processing for tenant 575fd5b5-6df0-4cf4-9a0b-20c16480e859
2025-09-11 16:18:00,172 - multi_tenant_agent - INFO - 📝 User query: Hi! Tell me about how aanya sharma coffee shop preferences canged over time?
2025-09-11 16:18:00,172 - multi_tenant_agent - INFO - 🤖 Running agent with model gemini-2.0-flash-thinking-exp-1219
2025-09-11 16:18:00,177 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-11 16:18:02,003 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-11 16:18:02,008 - multi_tenant_agent - INFO - 🔍 Local dual search for tenant 575fd5b5-6df0-4cf4-9a0b-20c16480e859: aanya sharma coffee shop preferences changed over time
2025-09-11 16:18:02,008 - multi_tenant_agent - INFO - 🔍 Vector search for tenant 575fd5b5-6df0-4cf4-9a0b-20c16480e859: aanya sharma coffee shop preferences changed over time
2025-09-11 16:18:09,564 - multi_tenant_agent - INFO - ✅ Vector search returned 4 results for tenant 575fd5b5-6df0-4cf4-9a0b-20c16480e859
2025-09-11 16:18:09,565 - multi_tenant_agent - INFO - 🔍 Graph search for tenant 575fd5b5-6df0-4cf4-9a0b-20c16480e859: aanya sharma coffee shop preferences changed over time
2025-09-11 16:18:10,641 - tenant_graphiti_client - INFO - Graph search for tenant 575fd5b5-6df0-4cf4-9a0b-20c16480e859 (namespace: tenant_575fd5b5-6df0-4cf4-9a0b-20c16480e859) returned 10 results
2025-09-11 16:18:10,641 - multi_tenant_agent - INFO - ✅ Graph search returned 10 results for tenant 575fd5b5-6df0-4cf4-9a0b-20c16480e859
2025-09-11 16:18:10,642 - multi_tenant_agent - INFO - ✅ Local dual search returned 9 combined results
2025-09-11 16:18:10,642 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-11 16:18:12,944 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-11 16:18:12,948 - multi_tenant_agent - INFO - ✅ Agent completed processing for tenant 575fd5b5-6df0-4cf4-9a0b-20c16480e859
2025-09-11 16:18:12,949 - multi_tenant_agent - INFO - 📊 Extracted 0 tools and 0 sources
2025-09-11 16:32:16,007 - interactive_multi_tenant_api - INFO - Shutting down Multi-Tenant RAG API...
2025-09-12 11:03:38,623 - __main__ - INFO - Starting Interactive Multi-Tenant RAG API on 127.0.0.1:8000
2025-09-12 11:03:38,646 - interactive_multi_tenant_api - INFO - Starting Multi-Tenant RAG API...
2025-09-12 11:03:38,646 - tenant_manager - WARNING - Neo4j credentials not provided - Graphiti integration disabled
2025-09-12 11:03:38,646 - tenant_manager - WARNING - Neo4j credentials not provided - Graphiti integration disabled
2025-09-12 11:03:38,646 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 11:03:38,646 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 11:03:38,646 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-09-12 11:03:38,646 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-09-12 11:03:38,646 - multi_tenant_ingestion - INFO - Multi-tenant ingestion pipeline initialized
2025-09-12 11:03:38,646 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-09-12 11:03:38,646 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-09-12 11:03:38,646 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-09-12 11:03:38,646 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-09-12 11:03:38,646 - interactive_multi_tenant_api - INFO - Tenant manager initialized
2025-09-12 11:03:38,650 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 11:03:38,650 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 11:03:38,650 - interactive_multi_tenant_api - INFO - Tenant ingestion service initialized
2025-09-12 11:03:38,650 - auth_middleware - INFO - JWT Authenticator initialized
2025-09-12 11:03:38,650 - auth_middleware - INFO - JWT Authenticator initialized
2025-09-12 11:03:38,650 - interactive_multi_tenant_api - INFO - JWT authenticator initialized
2025-09-12 11:03:38,650 - interactive_multi_tenant_api - INFO - 🎯 Multi-Tenant RAG API ready - all backend logs will appear in this terminal
2025-09-12 11:03:38,650 - interactive_multi_tenant_api - INFO - 📊 Backend activity from CLI and API operations will be shown below:
2025-09-12 11:04:01,957 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-09-12 11:04:01,957 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-09-12 11:04:02,195 - catalog_database - INFO - Catalog database connection test successful
2025-09-12 11:04:02,195 - catalog_database - INFO - Catalog database connection test successful
2025-09-12 11:04:03,943 - tenant_manager - INFO - TenantManager initialized with Graphiti client
2025-09-12 11:04:03,943 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 11:04:03,943 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-09-12 11:04:03,943 - multi_tenant_ingestion - INFO - Multi-tenant ingestion pipeline initialized
2025-09-12 11:04:03,943 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-09-12 11:04:03,943 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-09-12 11:04:03,945 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 11:04:03,946 - auth_middleware - INFO - JWT Authenticator initialized
2025-09-12 11:04:11,874 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-09-12 11:04:12,027 - catalog_database - INFO - Catalog database connection test successful
2025-09-12 11:04:12,027 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 11:04:12,116 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 11:04:12,167 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 11:04:12,266 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_uuid IF NOT EXISTS FOR (e:Episodic) ON (e.uuid)` has no effect.} {description: `RANGE INDEX episode_uuid FOR (e:Episodic) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX episode_uuid IF NOT EXISTS FOR (n:Episodic) ON (n.uuid)'
2025-09-12 11:04:12,266 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX community_uuid IF NOT EXISTS FOR (e:Community) ON (e.uuid)` has no effect.} {description: `RANGE INDEX community_uuid FOR (e:Community) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX community_uuid IF NOT EXISTS FOR (n:Community) ON (n.uuid)'
2025-09-12 11:04:12,267 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX relation_uuid FOR ()-[e:RELATES_TO]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)'
2025-09-12 11:04:12,267 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX has_member_uuid FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)'
2025-09-12 11:04:12,268 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX mention_uuid FOR ()-[e:MENTIONS]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)'
2025-09-12 11:04:12,268 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_uuid IF NOT EXISTS FOR (e:Entity) ON (e.uuid)` has no effect.} {description: `RANGE INDEX entity_uuid FOR (e:Entity) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX entity_uuid IF NOT EXISTS FOR (n:Entity) ON (n.uuid)'
2025-09-12 11:04:12,269 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_group_id IF NOT EXISTS FOR (e:Episodic) ON (e.group_id)` has no effect.} {description: `RANGE INDEX episode_group_id FOR (e:Episodic) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX episode_group_id IF NOT EXISTS FOR (n:Episodic) ON (n.group_id)'
2025-09-12 11:04:12,269 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_group_id IF NOT EXISTS FOR (e:Entity) ON (e.group_id)` has no effect.} {description: `RANGE INDEX entity_group_id FOR (e:Entity) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX entity_group_id IF NOT EXISTS FOR (n:Entity) ON (n.group_id)'
2025-09-12 11:04:12,272 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX relation_group_id FOR ()-[e:RELATES_TO]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)'
2025-09-12 11:04:12,272 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX mention_group_id FOR ()-[e:MENTIONS]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)'
2025-09-12 11:04:12,272 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.name)` has no effect.} {description: `RANGE INDEX name_entity_index FOR (e:Entity) ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.name)'
2025-09-12 11:04:12,273 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` has no effect.} {description: `FULLTEXT INDEX node_name_and_summary FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS \n            FOR (n:Entity) ON EACH [n.name, n.summary, n.group_id]'
2025-09-12 11:04:12,273 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX community_name IF NOT EXISTS FOR (e:Community) ON EACH [e.name, e.group_id]` has no effect.} {description: `FULLTEXT INDEX community_name FOR (e:Community) ON EACH [e.name, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX community_name IF NOT EXISTS \n            FOR (n:Community) ON EACH [n.name, n.group_id]'
2025-09-12 11:04:12,273 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_entity_index FOR (e:Entity) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.created_at)'
2025-09-12 11:04:12,274 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` has no effect.} {description: `FULLTEXT INDEX edge_name_and_fact FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS \n            FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]'
2025-09-12 11:04:12,274 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_episodic_index FOR (e:Episodic) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.created_at)'
2025-09-12 11:04:12,275 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_episodic_index FOR (e:Episodic) ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.valid_at)'
2025-09-12 11:04:12,276 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)` has no effect.} {description: `RANGE INDEX name_edge_index FOR ()-[e:RELATES_TO]-() ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)'
2025-09-12 11:04:12,277 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)'
2025-09-12 11:04:12,277 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` has no effect.} {description: `RANGE INDEX expired_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` already exists.} {position: None} for query: 'CREATE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)'
2025-09-12 11:04:12,277 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)'
2025-09-12 11:04:12,278 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` has no effect.} {description: `RANGE INDEX invalid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` already exists.} {position: None} for query: 'CREATE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)'
2025-09-12 11:04:12,278 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX episode_content IF NOT EXISTS FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` has no effect.} {description: `FULLTEXT INDEX episode_content FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX episode_content IF NOT EXISTS \n            FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]'
2025-09-12 11:04:12,278 - tenant_graphiti_client - INFO - TenantGraphitiClient initialized successfully with LLM: gemini-2.0-flash-thinking-exp-1219
2025-09-12 15:09:13,534 - tenant_manager - ERROR - Failed to list tenants: connection was closed in the middle of operation
2025-09-12 15:09:55,079 - interactive_multi_tenant_api - INFO - Shutting down Multi-Tenant RAG API...
2025-09-12 15:09:59,671 - __main__ - INFO - Starting Interactive Multi-Tenant RAG API on 127.0.0.1:8000
2025-09-12 15:09:59,690 - interactive_multi_tenant_api - INFO - Starting Multi-Tenant RAG API...
2025-09-12 15:09:59,691 - tenant_manager - WARNING - Neo4j credentials not provided - Graphiti integration disabled
2025-09-12 15:09:59,691 - tenant_manager - WARNING - Neo4j credentials not provided - Graphiti integration disabled
2025-09-12 15:09:59,691 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 15:09:59,691 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 15:09:59,691 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-09-12 15:09:59,691 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-09-12 15:09:59,691 - multi_tenant_ingestion - INFO - Multi-tenant ingestion pipeline initialized
2025-09-12 15:09:59,691 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-09-12 15:09:59,691 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-09-12 15:09:59,691 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-09-12 15:09:59,691 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-09-12 15:09:59,691 - interactive_multi_tenant_api - INFO - Tenant manager initialized
2025-09-12 15:09:59,694 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 15:09:59,694 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 15:09:59,694 - interactive_multi_tenant_api - INFO - Tenant ingestion service initialized
2025-09-12 15:09:59,694 - auth_middleware - INFO - JWT Authenticator initialized
2025-09-12 15:09:59,694 - auth_middleware - INFO - JWT Authenticator initialized
2025-09-12 15:09:59,694 - interactive_multi_tenant_api - INFO - JWT authenticator initialized
2025-09-12 15:09:59,694 - interactive_multi_tenant_api - INFO - 🎯 Multi-Tenant RAG API ready - all backend logs will appear in this terminal
2025-09-12 15:09:59,694 - interactive_multi_tenant_api - INFO - 📊 Backend activity from CLI and API operations will be shown below:
2025-09-12 15:10:09,330 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-09-12 15:10:09,330 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-09-12 15:10:09,552 - catalog_database - INFO - Catalog database connection test successful
2025-09-12 15:10:09,552 - catalog_database - INFO - Catalog database connection test successful
2025-09-12 15:10:11,302 - tenant_manager - INFO - TenantManager initialized with Graphiti client
2025-09-12 15:10:11,302 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 15:10:11,302 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-09-12 15:10:11,302 - multi_tenant_ingestion - INFO - Multi-tenant ingestion pipeline initialized
2025-09-12 15:10:11,302 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-09-12 15:10:11,302 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-09-12 15:10:11,305 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 15:10:11,305 - auth_middleware - INFO - JWT Authenticator initialized
2025-09-12 15:10:19,099 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-09-12 15:10:19,304 - catalog_database - INFO - Catalog database connection test successful
2025-09-12 15:10:19,304 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 15:10:19,391 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 15:10:19,441 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 15:10:19,548 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_uuid IF NOT EXISTS FOR (e:Entity) ON (e.uuid)` has no effect.} {description: `RANGE INDEX entity_uuid FOR (e:Entity) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX entity_uuid IF NOT EXISTS FOR (n:Entity) ON (n.uuid)'
2025-09-12 15:10:19,552 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_uuid IF NOT EXISTS FOR (e:Episodic) ON (e.uuid)` has no effect.} {description: `RANGE INDEX episode_uuid FOR (e:Episodic) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX episode_uuid IF NOT EXISTS FOR (n:Episodic) ON (n.uuid)'
2025-09-12 15:10:19,553 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX relation_uuid FOR ()-[e:RELATES_TO]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)'
2025-09-12 15:10:19,554 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX community_uuid IF NOT EXISTS FOR (e:Community) ON (e.uuid)` has no effect.} {description: `RANGE INDEX community_uuid FOR (e:Community) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX community_uuid IF NOT EXISTS FOR (n:Community) ON (n.uuid)'
2025-09-12 15:10:19,554 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` has no effect.} {description: `RANGE INDEX expired_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` already exists.} {position: None} for query: 'CREATE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)'
2025-09-12 15:10:19,554 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX mention_uuid FOR ()-[e:MENTIONS]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)'
2025-09-12 15:10:19,558 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX has_member_uuid FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)'
2025-09-12 15:10:19,559 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX relation_group_id FOR ()-[e:RELATES_TO]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)'
2025-09-12 15:10:19,559 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX mention_group_id FOR ()-[e:MENTIONS]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)'
2025-09-12 15:10:19,560 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` has no effect.} {description: `FULLTEXT INDEX node_name_and_summary FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS \n            FOR (n:Entity) ON EACH [n.name, n.summary, n.group_id]'
2025-09-12 15:10:19,560 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_group_id IF NOT EXISTS FOR (e:Entity) ON (e.group_id)` has no effect.} {description: `RANGE INDEX entity_group_id FOR (e:Entity) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX entity_group_id IF NOT EXISTS FOR (n:Entity) ON (n.group_id)'
2025-09-12 15:10:19,560 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_group_id IF NOT EXISTS FOR (e:Episodic) ON (e.group_id)` has no effect.} {description: `RANGE INDEX episode_group_id FOR (e:Episodic) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX episode_group_id IF NOT EXISTS FOR (n:Episodic) ON (n.group_id)'
2025-09-12 15:10:19,560 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX community_name IF NOT EXISTS FOR (e:Community) ON EACH [e.name, e.group_id]` has no effect.} {description: `FULLTEXT INDEX community_name FOR (e:Community) ON EACH [e.name, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX community_name IF NOT EXISTS \n            FOR (n:Community) ON EACH [n.name, n.group_id]'
2025-09-12 15:10:19,561 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.name)` has no effect.} {description: `RANGE INDEX name_entity_index FOR (e:Entity) ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.name)'
2025-09-12 15:10:19,561 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_entity_index FOR (e:Entity) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.created_at)'
2025-09-12 15:10:19,563 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_episodic_index FOR (e:Episodic) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.created_at)'
2025-09-12 15:10:19,563 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_episodic_index FOR (e:Episodic) ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.valid_at)'
2025-09-12 15:10:19,564 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)` has no effect.} {description: `RANGE INDEX name_edge_index FOR ()-[e:RELATES_TO]-() ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)'
2025-09-12 15:10:19,564 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)'
2025-09-12 15:10:19,566 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)'
2025-09-12 15:10:19,567 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` has no effect.} {description: `RANGE INDEX invalid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` already exists.} {position: None} for query: 'CREATE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)'
2025-09-12 15:10:19,567 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX episode_content IF NOT EXISTS FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` has no effect.} {description: `FULLTEXT INDEX episode_content FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX episode_content IF NOT EXISTS \n            FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]'
2025-09-12 15:10:19,567 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` has no effect.} {description: `FULLTEXT INDEX edge_name_and_fact FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS \n            FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]'
2025-09-12 15:10:19,568 - tenant_graphiti_client - INFO - TenantGraphitiClient initialized successfully with LLM: gemini-2.0-flash-thinking-exp-1219
2025-09-12 15:24:32,088 - tenant_manager - ERROR - Failed to get tenant 6bb54757-ab2b-4009-9f91-f51dc0109e5b: connection was closed in the middle of operation
2025-09-12 15:26:43,959 - multi_tenant_agent - INFO - Using comprehensive system prompt for intelligent tool routing
2025-09-12 15:26:44,012 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 15:26:44,054 - multi_tenant_agent - INFO - Created multi-tenant agent with model: gemini-2.0-flash-thinking-exp-1219
2025-09-12 15:26:44,061 - multi_tenant_agent - INFO - Successfully registered tenant-aware tools
2025-09-12 15:27:14,182 - multi_tenant_agent - INFO - 🧠 Starting chat processing for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 15:27:14,182 - multi_tenant_agent - INFO - 📝 User query: Hi! tell me about neon multi tenancy
2025-09-12 15:27:14,182 - multi_tenant_agent - INFO - 🤖 Running agent with model gemini-2.0-flash-thinking-exp-1219
2025-09-12 15:27:14,187 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 15:27:16,982 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 15:27:16,990 - multi_tenant_agent - INFO - 🔍 Local dual search for tenant 5a115121-e3a2-439c-bc70-960c033581d2: neon multi tenancy
2025-09-12 15:27:16,990 - multi_tenant_agent - INFO - 🔍 Vector search for tenant 5a115121-e3a2-439c-bc70-960c033581d2: neon multi tenancy
2025-09-12 15:27:24,414 - multi_tenant_agent - INFO - ✅ Vector search returned 10 results for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 15:27:24,415 - multi_tenant_agent - INFO - 🔍 Graph search for tenant 5a115121-e3a2-439c-bc70-960c033581d2: neon multi tenancy
2025-09-12 15:27:25,040 - tenant_graphiti_client - INFO - Graph search for tenant 5a115121-e3a2-439c-bc70-960c033581d2 (namespace: tenant_5a115121-e3a2-439c-bc70-960c033581d2) returned 10 results
2025-09-12 15:27:25,040 - multi_tenant_agent - INFO - ✅ Graph search returned 10 results for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 15:27:25,040 - multi_tenant_agent - INFO - ✅ Local dual search returned 15 combined results
2025-09-12 15:27:25,041 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 15:27:29,229 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 15:27:29,231 - multi_tenant_agent - INFO - ✅ Agent completed processing for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 15:27:29,231 - multi_tenant_agent - INFO - 📊 Extracted 0 tools and 0 sources
2025-09-12 15:47:17,495 - interactive_multi_tenant_api - INFO - Shutting down Multi-Tenant RAG API...
2025-09-12 15:51:02,800 - __main__ - INFO - Starting Interactive Multi-Tenant RAG API on 127.0.0.1:8000
2025-09-12 15:51:02,825 - interactive_multi_tenant_api - INFO - Starting Multi-Tenant RAG API...
2025-09-12 15:51:02,825 - tenant_manager - WARNING - Neo4j credentials not provided - Graphiti integration disabled
2025-09-12 15:51:02,825 - tenant_manager - WARNING - Neo4j credentials not provided - Graphiti integration disabled
2025-09-12 15:51:02,826 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 15:51:02,826 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 15:51:02,826 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-09-12 15:51:02,826 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-09-12 15:51:02,826 - multi_tenant_ingestion - INFO - Multi-tenant ingestion pipeline initialized
2025-09-12 15:51:02,826 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-09-12 15:51:02,826 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-09-12 15:51:02,826 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-09-12 15:51:02,826 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-09-12 15:51:02,826 - interactive_multi_tenant_api - INFO - Tenant manager initialized
2025-09-12 15:51:02,829 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 15:51:02,829 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 15:51:02,829 - interactive_multi_tenant_api - INFO - Tenant ingestion service initialized
2025-09-12 15:51:02,829 - auth_middleware - INFO - JWT Authenticator initialized
2025-09-12 15:51:02,829 - auth_middleware - INFO - JWT Authenticator initialized
2025-09-12 15:51:02,829 - interactive_multi_tenant_api - INFO - JWT authenticator initialized
2025-09-12 15:51:02,829 - interactive_multi_tenant_api - INFO - 🎯 Multi-Tenant RAG API ready - all backend logs will appear in this terminal
2025-09-12 15:51:02,829 - interactive_multi_tenant_api - INFO - 📊 Backend activity from CLI and API operations will be shown below:
2025-09-12 15:51:44,874 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-09-12 15:51:44,874 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-09-12 15:51:45,117 - catalog_database - INFO - Catalog database connection test successful
2025-09-12 15:51:45,117 - catalog_database - INFO - Catalog database connection test successful
2025-09-12 15:55:04,466 - interactive_multi_tenant_api - ERROR - Login error: 'TenantManager' object has no attribute 'tenant_exists'
2025-09-12 16:01:48,175 - interactive_multi_tenant_api - INFO - Shutting down Multi-Tenant RAG API...
2025-09-12 16:02:00,141 - __main__ - INFO - Starting Interactive Multi-Tenant RAG API on 127.0.0.1:8000
2025-09-12 16:02:00,163 - interactive_multi_tenant_api - INFO - Starting Multi-Tenant RAG API...
2025-09-12 16:02:00,163 - tenant_manager - WARNING - Neo4j credentials not provided - Graphiti integration disabled
2025-09-12 16:02:00,163 - tenant_manager - WARNING - Neo4j credentials not provided - Graphiti integration disabled
2025-09-12 16:02:00,163 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 16:02:00,163 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 16:02:00,163 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-09-12 16:02:00,163 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-09-12 16:02:00,163 - multi_tenant_ingestion - INFO - Multi-tenant ingestion pipeline initialized
2025-09-12 16:02:00,163 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-09-12 16:02:00,163 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-09-12 16:02:00,163 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-09-12 16:02:00,163 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-09-12 16:02:00,163 - interactive_multi_tenant_api - INFO - Tenant manager initialized
2025-09-12 16:02:00,167 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 16:02:00,167 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 16:02:00,167 - interactive_multi_tenant_api - INFO - Tenant ingestion service initialized
2025-09-12 16:02:00,167 - auth_middleware - INFO - JWT Authenticator initialized
2025-09-12 16:02:00,167 - auth_middleware - INFO - JWT Authenticator initialized
2025-09-12 16:02:00,167 - interactive_multi_tenant_api - INFO - JWT authenticator initialized
2025-09-12 16:02:00,167 - interactive_multi_tenant_api - INFO - 🎯 Multi-Tenant RAG API ready - all backend logs will appear in this terminal
2025-09-12 16:02:00,167 - interactive_multi_tenant_api - INFO - 📊 Backend activity from CLI and API operations will be shown below:
2025-09-12 16:04:17,328 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-09-12 16:04:17,328 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-09-12 16:04:17,557 - catalog_database - INFO - Catalog database connection test successful
2025-09-12 16:04:17,557 - catalog_database - INFO - Catalog database connection test successful
2025-09-12 16:06:06,830 - auth_middleware - INFO - Created access token for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 16:06:06,830 - auth_middleware - INFO - Created access token for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 16:06:11,914 - interactive_multi_tenant_api - ERROR - Error getting tenant info: 'TenantInfo' object is not subscriptable
2025-09-12 16:06:21,098 - interactive_multi_tenant_api - ERROR - Error getting tenant info: 'TenantInfo' object is not subscriptable
2025-09-12 16:07:02,552 - multi_tenant_agent - INFO - Using comprehensive system prompt for intelligent tool routing
2025-09-12 16:07:02,552 - multi_tenant_agent - INFO - Using comprehensive system prompt for intelligent tool routing
2025-09-12 16:07:02,600 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 16:07:02,600 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 16:07:02,643 - multi_tenant_agent - INFO - Created multi-tenant agent with model: gemini-2.0-flash-thinking-exp-1219
2025-09-12 16:07:02,643 - multi_tenant_agent - INFO - Created multi-tenant agent with model: gemini-2.0-flash-thinking-exp-1219
2025-09-12 16:07:02,649 - multi_tenant_agent - INFO - Successfully registered tenant-aware tools
2025-09-12 16:07:02,649 - multi_tenant_agent - INFO - Successfully registered tenant-aware tools
2025-09-12 16:07:02,649 - multi_tenant_agent - INFO - 🧠 Starting chat processing for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 16:07:02,649 - multi_tenant_agent - INFO - 🧠 Starting chat processing for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 16:07:02,649 - multi_tenant_agent - INFO - 📝 User query: Hi! Tell me about neon multi tenancy?
2025-09-12 16:07:02,649 - multi_tenant_agent - INFO - 📝 User query: Hi! Tell me about neon multi tenancy?
2025-09-12 16:07:02,649 - multi_tenant_agent - INFO - 🤖 Running agent with model gemini-2.0-flash-thinking-exp-1219
2025-09-12 16:07:02,649 - multi_tenant_agent - INFO - 🤖 Running agent with model gemini-2.0-flash-thinking-exp-1219
2025-09-12 16:07:02,651 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 16:07:02,651 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 16:07:04,208 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 16:07:04,208 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 16:07:04,215 - multi_tenant_agent - INFO - 🔍 Local dual search for tenant 5a115121-e3a2-439c-bc70-960c033581d2: neon multi tenancy
2025-09-12 16:07:04,215 - multi_tenant_agent - INFO - 🔍 Local dual search for tenant 5a115121-e3a2-439c-bc70-960c033581d2: neon multi tenancy
2025-09-12 16:07:04,215 - multi_tenant_agent - INFO - 🔍 Vector search for tenant 5a115121-e3a2-439c-bc70-960c033581d2: neon multi tenancy
2025-09-12 16:07:04,215 - multi_tenant_agent - INFO - 🔍 Vector search for tenant 5a115121-e3a2-439c-bc70-960c033581d2: neon multi tenancy
2025-09-12 16:07:04,216 - multi_tenant_agent - ERROR - Vector search failed for tenant 5a115121-e3a2-439c-bc70-960c033581d2: 'str' object has no attribute 'get_tenant_database_url'
2025-09-12 16:07:04,216 - multi_tenant_agent - ERROR - Vector search failed for tenant 5a115121-e3a2-439c-bc70-960c033581d2: 'str' object has no attribute 'get_tenant_database_url'
2025-09-12 16:07:04,216 - multi_tenant_agent - INFO - 🔍 Graph search for tenant 5a115121-e3a2-439c-bc70-960c033581d2: neon multi tenancy
2025-09-12 16:07:04,216 - multi_tenant_agent - INFO - 🔍 Graph search for tenant 5a115121-e3a2-439c-bc70-960c033581d2: neon multi tenancy
2025-09-12 16:07:04,216 - multi_tenant_agent - ERROR - Graph search failed for tenant 5a115121-e3a2-439c-bc70-960c033581d2: 'str' object has no attribute 'graphiti_client'
2025-09-12 16:07:04,216 - multi_tenant_agent - ERROR - Graph search failed for tenant 5a115121-e3a2-439c-bc70-960c033581d2: 'str' object has no attribute 'graphiti_client'
2025-09-12 16:07:04,216 - multi_tenant_agent - INFO - ✅ Local dual search returned 0 combined results
2025-09-12 16:07:04,216 - multi_tenant_agent - INFO - ✅ Local dual search returned 0 combined results
2025-09-12 16:07:04,217 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 16:07:04,217 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 16:07:05,537 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 16:07:05,537 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 16:07:05,542 - multi_tenant_agent - INFO - ✅ Agent completed processing for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 16:07:05,542 - multi_tenant_agent - INFO - ✅ Agent completed processing for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 16:07:05,542 - multi_tenant_agent - INFO - 📊 Extracted 0 tools and 0 sources
2025-09-12 16:07:05,542 - multi_tenant_agent - INFO - 📊 Extracted 0 tools and 0 sources
2025-09-12 16:15:57,847 - interactive_multi_tenant_api - INFO - Shutting down Multi-Tenant RAG API...
2025-09-12 16:16:04,315 - __main__ - INFO - Starting Interactive Multi-Tenant RAG API on 127.0.0.1:8000
2025-09-12 16:16:04,337 - interactive_multi_tenant_api - INFO - Starting Multi-Tenant RAG API...
2025-09-12 16:16:04,338 - tenant_manager - WARNING - Neo4j credentials not provided - Graphiti integration disabled
2025-09-12 16:16:04,338 - tenant_manager - WARNING - Neo4j credentials not provided - Graphiti integration disabled
2025-09-12 16:16:04,338 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 16:16:04,338 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 16:16:04,338 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-09-12 16:16:04,338 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-09-12 16:16:04,338 - multi_tenant_ingestion - INFO - Multi-tenant ingestion pipeline initialized
2025-09-12 16:16:04,338 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-09-12 16:16:04,338 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-09-12 16:16:04,338 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-09-12 16:16:04,338 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-09-12 16:16:04,338 - interactive_multi_tenant_api - INFO - Tenant manager initialized
2025-09-12 16:16:04,341 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 16:16:04,341 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 16:16:04,341 - interactive_multi_tenant_api - INFO - Tenant ingestion service initialized
2025-09-12 16:16:04,341 - auth_middleware - INFO - JWT Authenticator initialized
2025-09-12 16:16:04,341 - auth_middleware - INFO - JWT Authenticator initialized
2025-09-12 16:16:04,341 - interactive_multi_tenant_api - INFO - JWT authenticator initialized
2025-09-12 16:16:04,341 - interactive_multi_tenant_api - INFO - 🎯 Multi-Tenant RAG API ready - all backend logs will appear in this terminal
2025-09-12 16:16:04,341 - interactive_multi_tenant_api - INFO - 📊 Backend activity from CLI and API operations will be shown below:
2025-09-12 16:16:14,832 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-09-12 16:16:14,832 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-09-12 16:16:15,074 - catalog_database - INFO - Catalog database connection test successful
2025-09-12 16:16:15,074 - catalog_database - INFO - Catalog database connection test successful
2025-09-12 16:17:03,969 - auth_middleware - INFO - Created access token for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 16:17:03,969 - auth_middleware - INFO - Created access token for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 16:17:18,428 - multi_tenant_agent - INFO - Using comprehensive system prompt for intelligent tool routing
2025-09-12 16:17:18,428 - multi_tenant_agent - INFO - Using comprehensive system prompt for intelligent tool routing
2025-09-12 16:17:18,474 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 16:17:18,474 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 16:17:18,516 - multi_tenant_agent - INFO - Created multi-tenant agent with model: gemini-2.0-flash-thinking-exp-1219
2025-09-12 16:17:18,516 - multi_tenant_agent - INFO - Created multi-tenant agent with model: gemini-2.0-flash-thinking-exp-1219
2025-09-12 16:17:18,522 - multi_tenant_agent - INFO - Successfully registered tenant-aware tools
2025-09-12 16:17:18,522 - multi_tenant_agent - INFO - Successfully registered tenant-aware tools
2025-09-12 16:17:18,522 - multi_tenant_agent - INFO - 🧠 Starting chat processing for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 16:17:18,522 - multi_tenant_agent - INFO - 🧠 Starting chat processing for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 16:17:18,522 - multi_tenant_agent - INFO - 📝 User query: Hi! Tell me about neon multi tenancy?
2025-09-12 16:17:18,522 - multi_tenant_agent - INFO - 📝 User query: Hi! Tell me about neon multi tenancy?
2025-09-12 16:17:18,522 - multi_tenant_agent - INFO - 🤖 Running agent with model gemini-2.0-flash-thinking-exp-1219
2025-09-12 16:17:18,522 - multi_tenant_agent - INFO - 🤖 Running agent with model gemini-2.0-flash-thinking-exp-1219
2025-09-12 16:17:18,524 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 16:17:18,524 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 16:17:21,039 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 16:17:21,039 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 16:17:21,046 - multi_tenant_agent - INFO - 🔍 Local dual search for tenant 5a115121-e3a2-439c-bc70-960c033581d2: neon multi tenancy
2025-09-12 16:17:21,046 - multi_tenant_agent - INFO - 🔍 Local dual search for tenant 5a115121-e3a2-439c-bc70-960c033581d2: neon multi tenancy
2025-09-12 16:17:21,046 - multi_tenant_agent - INFO - 🔍 Vector search for tenant 5a115121-e3a2-439c-bc70-960c033581d2: neon multi tenancy
2025-09-12 16:17:21,046 - multi_tenant_agent - INFO - 🔍 Vector search for tenant 5a115121-e3a2-439c-bc70-960c033581d2: neon multi tenancy
2025-09-12 16:17:27,619 - multi_tenant_agent - INFO - ✅ Vector search returned 10 results for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 16:17:27,619 - multi_tenant_agent - INFO - ✅ Vector search returned 10 results for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 16:17:27,620 - multi_tenant_agent - INFO - 🔍 Graph search for tenant 5a115121-e3a2-439c-bc70-960c033581d2: neon multi tenancy
2025-09-12 16:17:27,620 - multi_tenant_agent - INFO - 🔍 Graph search for tenant 5a115121-e3a2-439c-bc70-960c033581d2: neon multi tenancy
2025-09-12 16:17:27,620 - multi_tenant_agent - WARNING - No Graphiti client available for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 16:17:27,620 - multi_tenant_agent - WARNING - No Graphiti client available for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 16:17:27,621 - multi_tenant_agent - INFO - ✅ Local dual search returned 10 combined results
2025-09-12 16:17:27,621 - multi_tenant_agent - INFO - ✅ Local dual search returned 10 combined results
2025-09-12 16:17:27,624 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 16:17:27,624 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 16:17:30,570 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 16:17:30,570 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 16:17:30,573 - multi_tenant_agent - INFO - ✅ Agent completed processing for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 16:17:30,573 - multi_tenant_agent - INFO - ✅ Agent completed processing for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 16:17:30,573 - multi_tenant_agent - INFO - 📊 Extracted 0 tools and 0 sources
2025-09-12 16:17:30,573 - multi_tenant_agent - INFO - 📊 Extracted 0 tools and 0 sources
2025-09-12 16:19:14,176 - multi_tenant_agent - INFO - Using comprehensive system prompt for intelligent tool routing
2025-09-12 16:19:14,176 - multi_tenant_agent - INFO - Using comprehensive system prompt for intelligent tool routing
2025-09-12 16:19:14,211 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 16:19:14,211 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 16:19:14,247 - multi_tenant_agent - INFO - Created multi-tenant agent with model: gemini-2.0-flash-thinking-exp-1219
2025-09-12 16:19:14,247 - multi_tenant_agent - INFO - Created multi-tenant agent with model: gemini-2.0-flash-thinking-exp-1219
2025-09-12 16:19:14,262 - multi_tenant_agent - INFO - Successfully registered tenant-aware tools
2025-09-12 16:19:14,262 - multi_tenant_agent - INFO - Successfully registered tenant-aware tools
2025-09-12 16:19:14,262 - multi_tenant_agent - INFO - 🧠 Starting chat processing for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 16:19:14,262 - multi_tenant_agent - INFO - 🧠 Starting chat processing for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 16:19:14,262 - multi_tenant_agent - INFO - 📝 User query: Hi! Tell me about neon multi tenancy?
2025-09-12 16:19:14,262 - multi_tenant_agent - INFO - 📝 User query: Hi! Tell me about neon multi tenancy?
2025-09-12 16:19:14,262 - multi_tenant_agent - INFO - 🤖 Running agent with model gemini-2.0-flash-thinking-exp-1219
2025-09-12 16:19:14,262 - multi_tenant_agent - INFO - 🤖 Running agent with model gemini-2.0-flash-thinking-exp-1219
2025-09-12 16:19:14,267 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 16:19:14,267 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 16:19:15,782 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 16:19:15,782 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 16:19:15,791 - multi_tenant_agent - INFO - 🔍 Local dual search for tenant 5a115121-e3a2-439c-bc70-960c033581d2: neon multi tenancy
2025-09-12 16:19:15,791 - multi_tenant_agent - INFO - 🔍 Local dual search for tenant 5a115121-e3a2-439c-bc70-960c033581d2: neon multi tenancy
2025-09-12 16:19:15,791 - multi_tenant_agent - INFO - 🔍 Vector search for tenant 5a115121-e3a2-439c-bc70-960c033581d2: neon multi tenancy
2025-09-12 16:19:15,791 - multi_tenant_agent - INFO - 🔍 Vector search for tenant 5a115121-e3a2-439c-bc70-960c033581d2: neon multi tenancy
2025-09-12 16:19:22,601 - multi_tenant_agent - INFO - ✅ Vector search returned 10 results for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 16:19:22,601 - multi_tenant_agent - INFO - ✅ Vector search returned 10 results for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 16:19:22,603 - multi_tenant_agent - INFO - 🔍 Graph search for tenant 5a115121-e3a2-439c-bc70-960c033581d2: neon multi tenancy
2025-09-12 16:19:22,603 - multi_tenant_agent - INFO - 🔍 Graph search for tenant 5a115121-e3a2-439c-bc70-960c033581d2: neon multi tenancy
2025-09-12 16:19:22,603 - multi_tenant_agent - WARNING - No Graphiti client available for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 16:19:22,603 - multi_tenant_agent - WARNING - No Graphiti client available for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 16:19:22,603 - multi_tenant_agent - INFO - ✅ Local dual search returned 10 combined results
2025-09-12 16:19:22,603 - multi_tenant_agent - INFO - ✅ Local dual search returned 10 combined results
2025-09-12 16:19:22,606 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 16:19:22,606 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 16:19:25,689 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 16:19:25,689 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 16:19:25,694 - multi_tenant_agent - INFO - ✅ Agent completed processing for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 16:19:25,694 - multi_tenant_agent - INFO - ✅ Agent completed processing for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 16:19:25,694 - multi_tenant_agent - INFO - 📊 Extracted 0 tools and 0 sources
2025-09-12 16:19:25,694 - multi_tenant_agent - INFO - 📊 Extracted 0 tools and 0 sources
2025-09-12 16:26:30,637 - interactive_multi_tenant_api - INFO - Shutting down Multi-Tenant RAG API...
2025-09-12 16:26:49,345 - __main__ - INFO - Starting Interactive Multi-Tenant RAG API on 127.0.0.1:8000
2025-09-12 16:26:49,371 - interactive_multi_tenant_api - INFO - Starting Multi-Tenant RAG API...
2025-09-12 16:26:49,371 - interactive_multi_tenant_api - INFO - Neo4j URI: neo4j://127.0.0.1:7687
2025-09-12 16:26:49,371 - interactive_multi_tenant_api - INFO - Neo4j User: None
2025-09-12 16:26:49,371 - interactive_multi_tenant_api - INFO - Neo4j Password: ***
2025-09-12 16:26:49,371 - tenant_manager - WARNING - Neo4j credentials not provided - Graphiti integration disabled
2025-09-12 16:26:49,371 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 16:26:49,371 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-09-12 16:26:49,371 - multi_tenant_ingestion - INFO - Multi-tenant ingestion pipeline initialized
2025-09-12 16:26:49,371 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-09-12 16:26:49,371 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-09-12 16:26:49,372 - interactive_multi_tenant_api - INFO - Tenant manager initialized
2025-09-12 16:26:49,374 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 16:26:49,374 - interactive_multi_tenant_api - INFO - Tenant ingestion service initialized
2025-09-12 16:26:49,374 - auth_middleware - INFO - JWT Authenticator initialized
2025-09-12 16:26:49,374 - interactive_multi_tenant_api - INFO - JWT authenticator initialized
2025-09-12 16:26:49,374 - interactive_multi_tenant_api - INFO - 🎯 Multi-Tenant RAG API ready - all backend logs will appear in this terminal
2025-09-12 16:26:49,374 - interactive_multi_tenant_api - INFO - 📊 Backend activity from CLI and API operations will be shown below:
2025-09-12 16:26:57,308 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-09-12 16:26:57,508 - catalog_database - INFO - Catalog database connection test successful
2025-09-12 16:29:51,234 - auth_middleware - INFO - Created access token for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 16:30:20,830 - multi_tenant_agent - INFO - Using comprehensive system prompt for intelligent tool routing
2025-09-12 16:30:20,877 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 16:30:20,920 - multi_tenant_agent - INFO - Created multi-tenant agent with model: gemini-2.0-flash-thinking-exp-1219
2025-09-12 16:30:20,926 - multi_tenant_agent - INFO - Successfully registered tenant-aware tools
2025-09-12 16:30:20,926 - multi_tenant_agent - INFO - 🧠 Starting chat processing for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 16:30:20,926 - multi_tenant_agent - INFO - 📝 User query: Hi! Tell me about neon multi tenancy?
2025-09-12 16:30:20,926 - multi_tenant_agent - INFO - 🤖 Running agent with model gemini-2.0-flash-thinking-exp-1219
2025-09-12 16:30:20,927 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 16:30:22,647 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 16:30:22,654 - multi_tenant_agent - INFO - 🔍 Local dual search for tenant 5a115121-e3a2-439c-bc70-960c033581d2: neon multi tenancy
2025-09-12 16:30:22,654 - multi_tenant_agent - INFO - 🔍 Vector search for tenant 5a115121-e3a2-439c-bc70-960c033581d2: neon multi tenancy
2025-09-12 16:30:32,215 - multi_tenant_agent - INFO - ✅ Vector search returned 10 results for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 16:30:32,215 - multi_tenant_agent - INFO - 🔍 Graph search for tenant 5a115121-e3a2-439c-bc70-960c033581d2: neon multi tenancy
2025-09-12 16:30:32,216 - multi_tenant_agent - WARNING - No Graphiti client available for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 16:30:32,216 - multi_tenant_agent - INFO - ✅ Local dual search returned 10 combined results
2025-09-12 16:30:32,219 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 16:30:35,186 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 16:30:35,190 - multi_tenant_agent - INFO - ✅ Agent completed processing for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 16:30:35,191 - multi_tenant_agent - INFO - 📊 Extracted 0 tools and 0 sources
2025-09-12 16:34:58,725 - interactive_multi_tenant_api - INFO - Shutting down Multi-Tenant RAG API...
2025-09-12 16:37:43,567 - __main__ - INFO - Starting Interactive Multi-Tenant RAG API on 127.0.0.1:8000
2025-09-12 16:37:43,600 - interactive_multi_tenant_api - INFO - Starting Multi-Tenant RAG API...
2025-09-12 16:37:43,600 - interactive_multi_tenant_api - INFO - Neo4j URI: neo4j://127.0.0.1:7687
2025-09-12 16:37:43,600 - interactive_multi_tenant_api - INFO - Neo4j User: neo4j
2025-09-12 16:37:43,600 - interactive_multi_tenant_api - INFO - Neo4j Password: None
2025-09-12 16:37:43,600 - interactive_multi_tenant_api - WARNING - ⚠️  Neo4j password not found! Set NEO4J_PASSWORD environment variable for graph search.
2025-09-12 16:37:43,600 - interactive_multi_tenant_api - WARNING -    Example: export NEO4J_PASSWORD=your_neo4j_password
2025-09-12 16:37:43,600 - tenant_manager - WARNING - Neo4j credentials not provided - Graphiti integration disabled
2025-09-12 16:37:43,600 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 16:37:43,600 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-09-12 16:37:43,600 - multi_tenant_ingestion - INFO - Multi-tenant ingestion pipeline initialized
2025-09-12 16:37:43,600 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-09-12 16:37:43,600 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-09-12 16:37:43,600 - interactive_multi_tenant_api - INFO - Tenant manager initialized
2025-09-12 16:37:43,604 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 16:37:43,604 - interactive_multi_tenant_api - INFO - Tenant ingestion service initialized
2025-09-12 16:37:43,604 - auth_middleware - INFO - JWT Authenticator initialized
2025-09-12 16:37:43,604 - interactive_multi_tenant_api - INFO - JWT authenticator initialized
2025-09-12 16:37:43,604 - interactive_multi_tenant_api - INFO - 🎯 Multi-Tenant RAG API ready - all backend logs will appear in this terminal
2025-09-12 16:37:43,604 - interactive_multi_tenant_api - INFO - 📊 Backend activity from CLI and API operations will be shown below:
2025-09-12 16:41:45,337 - interactive_multi_tenant_api - INFO - Shutting down Multi-Tenant RAG API...
2025-09-12 16:41:49,452 - __main__ - INFO - Starting Interactive Multi-Tenant RAG API on 127.0.0.1:8000
2025-09-12 16:41:49,478 - interactive_multi_tenant_api - INFO - Starting Multi-Tenant RAG API...
2025-09-12 16:41:49,478 - interactive_multi_tenant_api - INFO - Neo4j URI: neo4j://127.0.0.1:7687
2025-09-12 16:41:49,478 - interactive_multi_tenant_api - INFO - Neo4j User: neo4j
2025-09-12 16:41:49,478 - interactive_multi_tenant_api - INFO - Neo4j Password: ***
2025-09-12 16:41:49,478 - tenant_manager - INFO - TenantManager initialized with Graphiti client
2025-09-12 16:41:49,478 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 16:41:49,478 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-09-12 16:41:49,478 - multi_tenant_ingestion - INFO - Multi-tenant ingestion pipeline initialized
2025-09-12 16:41:49,478 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-09-12 16:41:49,478 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-09-12 16:41:49,478 - interactive_multi_tenant_api - INFO - Tenant manager initialized
2025-09-12 16:41:49,481 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 16:41:49,481 - interactive_multi_tenant_api - INFO - Tenant ingestion service initialized
2025-09-12 16:41:49,481 - auth_middleware - INFO - JWT Authenticator initialized
2025-09-12 16:41:49,481 - interactive_multi_tenant_api - INFO - JWT authenticator initialized
2025-09-12 16:41:49,481 - interactive_multi_tenant_api - INFO - 🎯 Multi-Tenant RAG API ready - all backend logs will appear in this terminal
2025-09-12 16:41:49,481 - interactive_multi_tenant_api - INFO - 📊 Backend activity from CLI and API operations will be shown below:
2025-09-12 16:43:16,868 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-09-12 16:43:17,060 - catalog_database - INFO - Catalog database connection test successful
2025-09-12 16:43:17,061 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 16:43:17,146 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 16:43:17,195 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 16:43:17,291 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_uuid IF NOT EXISTS FOR (e:Entity) ON (e.uuid)` has no effect.} {description: `RANGE INDEX entity_uuid FOR (e:Entity) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX entity_uuid IF NOT EXISTS FOR (n:Entity) ON (n.uuid)'
2025-09-12 16:43:17,293 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX has_member_uuid FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)'
2025-09-12 16:43:17,293 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX relation_uuid FOR ()-[e:RELATES_TO]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)'
2025-09-12 16:43:17,294 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX mention_uuid FOR ()-[e:MENTIONS]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)'
2025-09-12 16:43:17,294 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX community_uuid IF NOT EXISTS FOR (e:Community) ON (e.uuid)` has no effect.} {description: `RANGE INDEX community_uuid FOR (e:Community) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX community_uuid IF NOT EXISTS FOR (n:Community) ON (n.uuid)'
2025-09-12 16:43:17,295 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_uuid IF NOT EXISTS FOR (e:Episodic) ON (e.uuid)` has no effect.} {description: `RANGE INDEX episode_uuid FOR (e:Episodic) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX episode_uuid IF NOT EXISTS FOR (n:Episodic) ON (n.uuid)'
2025-09-12 16:43:17,295 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_group_id IF NOT EXISTS FOR (e:Entity) ON (e.group_id)` has no effect.} {description: `RANGE INDEX entity_group_id FOR (e:Entity) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX entity_group_id IF NOT EXISTS FOR (n:Entity) ON (n.group_id)'
2025-09-12 16:43:17,296 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX relation_group_id FOR ()-[e:RELATES_TO]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)'
2025-09-12 16:43:17,296 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_group_id IF NOT EXISTS FOR (e:Episodic) ON (e.group_id)` has no effect.} {description: `RANGE INDEX episode_group_id FOR (e:Episodic) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX episode_group_id IF NOT EXISTS FOR (n:Episodic) ON (n.group_id)'
2025-09-12 16:43:17,298 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX mention_group_id FOR ()-[e:MENTIONS]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)'
2025-09-12 16:43:17,298 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.name)` has no effect.} {description: `RANGE INDEX name_entity_index FOR (e:Entity) ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.name)'
2025-09-12 16:43:17,299 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX episode_content IF NOT EXISTS FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` has no effect.} {description: `FULLTEXT INDEX episode_content FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX episode_content IF NOT EXISTS \n            FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]'
2025-09-12 16:43:17,299 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_entity_index FOR (e:Entity) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.created_at)'
2025-09-12 16:43:17,300 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` has no effect.} {description: `FULLTEXT INDEX edge_name_and_fact FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS \n            FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]'
2025-09-12 16:43:17,300 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX community_name IF NOT EXISTS FOR (e:Community) ON EACH [e.name, e.group_id]` has no effect.} {description: `FULLTEXT INDEX community_name FOR (e:Community) ON EACH [e.name, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX community_name IF NOT EXISTS \n            FOR (n:Community) ON EACH [n.name, n.group_id]'
2025-09-12 16:43:17,303 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_episodic_index FOR (e:Episodic) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.created_at)'
2025-09-12 16:43:17,303 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` has no effect.} {description: `RANGE INDEX expired_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` already exists.} {position: None} for query: 'CREATE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)'
2025-09-12 16:43:17,304 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)'
2025-09-12 16:43:17,304 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_episodic_index FOR (e:Episodic) ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.valid_at)'
2025-09-12 16:43:17,304 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)` has no effect.} {description: `RANGE INDEX name_edge_index FOR ()-[e:RELATES_TO]-() ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)'
2025-09-12 16:43:17,305 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)'
2025-09-12 16:43:17,305 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` has no effect.} {description: `RANGE INDEX invalid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` already exists.} {position: None} for query: 'CREATE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)'
2025-09-12 16:43:17,306 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` has no effect.} {description: `FULLTEXT INDEX node_name_and_summary FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS \n            FOR (n:Entity) ON EACH [n.name, n.summary, n.group_id]'
2025-09-12 16:43:17,306 - tenant_graphiti_client - INFO - TenantGraphitiClient initialized successfully with LLM: gemini-2.0-flash-thinking-exp-1219
2025-09-12 16:43:17,563 - multi_tenant_agent - INFO - Using comprehensive system prompt for intelligent tool routing
2025-09-12 16:43:17,608 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 16:43:17,651 - multi_tenant_agent - INFO - Created multi-tenant agent with model: gemini-2.0-flash-thinking-exp-1219
2025-09-12 16:43:17,656 - multi_tenant_agent - INFO - Successfully registered tenant-aware tools
2025-09-12 16:43:17,656 - multi_tenant_agent - INFO - 🧠 Starting chat processing for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 16:43:17,656 - multi_tenant_agent - INFO - 📝 User query: Hi! Tell me about neon multi tenancy?
2025-09-12 16:43:17,656 - multi_tenant_agent - INFO - 🤖 Running agent with model gemini-2.0-flash-thinking-exp-1219
2025-09-12 16:43:17,657 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 16:43:19,032 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 16:43:19,040 - multi_tenant_agent - INFO - 🔍 Local dual search for tenant 5a115121-e3a2-439c-bc70-960c033581d2: neon multi tenancy
2025-09-12 16:43:19,040 - multi_tenant_agent - INFO - 🔍 Vector search for tenant 5a115121-e3a2-439c-bc70-960c033581d2: neon multi tenancy
2025-09-12 16:43:26,265 - multi_tenant_agent - INFO - ✅ Vector search returned 10 results for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 16:43:26,265 - multi_tenant_agent - INFO - 🔍 Graph search for tenant 5a115121-e3a2-439c-bc70-960c033581d2: neon multi tenancy
2025-09-12 16:43:26,866 - tenant_graphiti_client - INFO - Graph search for tenant 5a115121-e3a2-439c-bc70-960c033581d2 (namespace: tenant_5a115121-e3a2-439c-bc70-960c033581d2) returned 10 results
2025-09-12 16:43:26,866 - multi_tenant_agent - INFO - ✅ Graph search returned 10 results for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 16:43:26,866 - multi_tenant_agent - INFO - ✅ Local dual search returned 15 combined results
2025-09-12 16:43:26,867 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 16:43:32,270 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 16:43:32,275 - multi_tenant_agent - INFO - ✅ Agent completed processing for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 16:43:32,276 - multi_tenant_agent - INFO - 📊 Extracted 0 tools and 0 sources
2025-09-12 17:23:32,403 - interactive_multi_tenant_api - INFO - Shutting down Multi-Tenant RAG API...
2025-09-12 17:23:36,961 - __main__ - INFO - Starting Interactive Multi-Tenant RAG API on 127.0.0.1:8000
2025-09-12 17:23:36,988 - interactive_multi_tenant_api - INFO - Starting Multi-Tenant RAG API...
2025-09-12 17:23:36,988 - interactive_multi_tenant_api - INFO - Neo4j URI: neo4j://127.0.0.1:7687
2025-09-12 17:23:36,988 - interactive_multi_tenant_api - INFO - Neo4j User: neo4j
2025-09-12 17:23:36,988 - interactive_multi_tenant_api - INFO - Neo4j Password: ***
2025-09-12 17:23:36,988 - tenant_manager - INFO - TenantManager initialized with Graphiti client
2025-09-12 17:23:36,988 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 17:23:36,988 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-09-12 17:23:36,988 - multi_tenant_ingestion - INFO - Multi-tenant ingestion pipeline initialized
2025-09-12 17:23:36,988 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-09-12 17:23:36,988 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-09-12 17:23:36,988 - interactive_multi_tenant_api - INFO - Tenant manager initialized
2025-09-12 17:23:36,992 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 17:23:36,992 - interactive_multi_tenant_api - INFO - Tenant ingestion service initialized
2025-09-12 17:23:36,992 - auth_middleware - INFO - JWT Authenticator initialized
2025-09-12 17:23:36,992 - interactive_multi_tenant_api - INFO - JWT authenticator initialized
2025-09-12 17:23:36,992 - interactive_multi_tenant_api - INFO - 🎯 Multi-Tenant RAG API ready - all backend logs will appear in this terminal
2025-09-12 17:23:36,992 - interactive_multi_tenant_api - INFO - 📊 Backend activity from CLI and API operations will be shown below:
2025-09-12 17:23:50,613 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-09-12 17:23:50,778 - catalog_database - INFO - Catalog database connection test successful
2025-09-12 17:23:50,779 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 17:23:50,868 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 17:23:50,916 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 17:23:51,002 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_uuid IF NOT EXISTS FOR (e:Episodic) ON (e.uuid)` has no effect.} {description: `RANGE INDEX episode_uuid FOR (e:Episodic) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX episode_uuid IF NOT EXISTS FOR (n:Episodic) ON (n.uuid)'
2025-09-12 17:23:51,002 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX community_uuid IF NOT EXISTS FOR (e:Community) ON (e.uuid)` has no effect.} {description: `RANGE INDEX community_uuid FOR (e:Community) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX community_uuid IF NOT EXISTS FOR (n:Community) ON (n.uuid)'
2025-09-12 17:23:51,002 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_uuid IF NOT EXISTS FOR (e:Entity) ON (e.uuid)` has no effect.} {description: `RANGE INDEX entity_uuid FOR (e:Entity) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX entity_uuid IF NOT EXISTS FOR (n:Entity) ON (n.uuid)'
2025-09-12 17:23:51,003 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX relation_uuid FOR ()-[e:RELATES_TO]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)'
2025-09-12 17:23:51,003 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX mention_uuid FOR ()-[e:MENTIONS]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)'
2025-09-12 17:23:51,004 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX has_member_uuid FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)'
2025-09-12 17:23:51,006 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_group_id IF NOT EXISTS FOR (e:Episodic) ON (e.group_id)` has no effect.} {description: `RANGE INDEX episode_group_id FOR (e:Episodic) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX episode_group_id IF NOT EXISTS FOR (n:Episodic) ON (n.group_id)'
2025-09-12 17:23:51,007 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_group_id IF NOT EXISTS FOR (e:Entity) ON (e.group_id)` has no effect.} {description: `RANGE INDEX entity_group_id FOR (e:Entity) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX entity_group_id IF NOT EXISTS FOR (n:Entity) ON (n.group_id)'
2025-09-12 17:23:51,007 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX mention_group_id FOR ()-[e:MENTIONS]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)'
2025-09-12 17:23:51,008 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_episodic_index FOR (e:Episodic) ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.valid_at)'
2025-09-12 17:23:51,009 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.name)` has no effect.} {description: `RANGE INDEX name_entity_index FOR (e:Entity) ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.name)'
2025-09-12 17:23:51,009 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_entity_index FOR (e:Entity) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.created_at)'
2025-09-12 17:23:51,009 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_episodic_index FOR (e:Episodic) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.created_at)'
2025-09-12 17:23:51,010 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX relation_group_id FOR ()-[e:RELATES_TO]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)'
2025-09-12 17:23:51,010 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` has no effect.} {description: `FULLTEXT INDEX node_name_and_summary FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS \n            FOR (n:Entity) ON EACH [n.name, n.summary, n.group_id]'
2025-09-12 17:23:51,010 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX community_name IF NOT EXISTS FOR (e:Community) ON EACH [e.name, e.group_id]` has no effect.} {description: `FULLTEXT INDEX community_name FOR (e:Community) ON EACH [e.name, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX community_name IF NOT EXISTS \n            FOR (n:Community) ON EACH [n.name, n.group_id]'
2025-09-12 17:23:51,010 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` has no effect.} {description: `FULLTEXT INDEX edge_name_and_fact FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS \n            FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]'
2025-09-12 17:23:51,014 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` has no effect.} {description: `RANGE INDEX expired_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` already exists.} {position: None} for query: 'CREATE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)'
2025-09-12 17:23:51,014 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX episode_content IF NOT EXISTS FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` has no effect.} {description: `FULLTEXT INDEX episode_content FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX episode_content IF NOT EXISTS \n            FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]'
2025-09-12 17:23:51,014 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)'
2025-09-12 17:23:51,014 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)` has no effect.} {description: `RANGE INDEX name_edge_index FOR ()-[e:RELATES_TO]-() ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)'
2025-09-12 17:23:51,014 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` has no effect.} {description: `RANGE INDEX invalid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` already exists.} {position: None} for query: 'CREATE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)'
2025-09-12 17:23:51,015 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)'
2025-09-12 17:23:51,015 - tenant_graphiti_client - INFO - TenantGraphitiClient initialized successfully with LLM: gemini-2.0-flash-thinking-exp-1219
2025-09-12 17:25:36,033 - auth_middleware - INFO - Created access token for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-12 17:26:56,428 - interactive_multi_tenant_api - ERROR - Document upload failed: TenantDataIngestionService.ingest_document_for_tenant() got an unexpected keyword argument 'tenant_database_url'
2025-09-12 17:35:41,641 - tenant_manager - INFO - Starting tenant creation for: demo-new (demo-new@gmail.com)
2025-09-12 17:35:41,643 - tenant_manager - INFO - Creating Neon project for tenant: 0088b06b-d137-46c8-9e76-ef598afcd463
2025-09-12 17:35:41,643 - neon_project_manager - INFO - Creating Neon project for tenant: demo-new -> tenant-demo-new
2025-09-12 17:35:41,643 - neon_project_manager - INFO - Using confirmed organization ID: org-divine-leaf-04179575
2025-09-12 17:35:42,477 - httpx - INFO - HTTP Request: POST https://console.neon.tech/api/v2/projects "HTTP/1.1 201 Created"
2025-09-12 17:35:42,483 - neon_project_manager - INFO - Getting connection details for project bold-darkness-55231907...
2025-09-12 17:35:44,885 - httpx - INFO - HTTP Request: GET https://console.neon.tech/api/v2/projects/bold-darkness-55231907/branches "HTTP/1.1 200 OK"
2025-09-12 17:35:45,308 - httpx - INFO - HTTP Request: GET https://console.neon.tech/api/v2/projects/bold-darkness-55231907/connection_uri?branch_id=br-aged-sun-ad701j74&role_name=neondb_owner&database_name=neondb "HTTP/1.1 200 OK"
2025-09-12 17:35:45,309 - neon_project_manager - INFO - Successfully created Neon project: bold-darkness-55231907 for tenant: demo-new
2025-09-12 17:35:45,309 - tenant_manager - INFO - Initializing database schema for tenant: 0088b06b-d137-46c8-9e76-ef598afcd463
2025-09-12 17:35:45,309 - tenant_schema_initializer - INFO - Initializing tenant database schema
2025-09-12 17:35:50,679 - tenant_schema_initializer - INFO - Successfully initialized tenant database schema
2025-09-12 17:35:50,995 - tenant_manager - INFO - Storing tenant mapping in catalog for: 0088b06b-d137-46c8-9e76-ef598afcd463
2025-09-12 17:35:52,410 - catalog_database - INFO - Created tenant project mapping: 496970e9-d66c-402c-8628-bfb2ce86f235 -> bold-darkness-55231907
2025-09-12 17:35:52,522 - tenant_manager - INFO - Initializing Graphiti namespace for tenant: 0088b06b-d137-46c8-9e76-ef598afcd463
2025-09-12 17:35:52,522 - tenant_manager - INFO - Initializing Graphiti namespace for tenant: 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 17:35:52,638 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:35:56,115 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:35:57,830 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:36:01,317 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:36:01,321 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:36:05,281 - graphiti_core.graphiti - INFO - Completed add_episode in 12758.03804397583 ms
2025-09-12 17:36:05,281 - tenant_graphiti_client - INFO - ✅ Added episode 'Tenant Initialization' for tenant 496970e9-d66c-402c-8628-bfb2ce86f235 (namespace: tenant_496970e9-d66c-402c-8628-bfb2ce86f235)
2025-09-12 17:36:05,281 - tenant_manager - INFO - Successfully initialized Graphiti namespace for tenant: 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 17:36:05,281 - tenant_manager - INFO - Successfully created tenant: 496970e9-d66c-402c-8628-bfb2ce86f235 with Neon project: bold-darkness-55231907
2025-09-12 17:41:05,641 - interactive_multi_tenant_api - INFO - Shutting down Multi-Tenant RAG API...
2025-09-12 17:41:11,540 - __main__ - INFO - Starting Interactive Multi-Tenant RAG API on 127.0.0.1:8000
2025-09-12 17:41:11,568 - interactive_multi_tenant_api - INFO - Starting Multi-Tenant RAG API...
2025-09-12 17:41:11,568 - interactive_multi_tenant_api - INFO - Neo4j URI: neo4j://127.0.0.1:7687
2025-09-12 17:41:11,568 - interactive_multi_tenant_api - INFO - Neo4j User: neo4j
2025-09-12 17:41:11,568 - interactive_multi_tenant_api - INFO - Neo4j Password: ***
2025-09-12 17:41:11,568 - tenant_manager - INFO - TenantManager initialized with Graphiti client
2025-09-12 17:41:11,568 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 17:41:11,568 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-09-12 17:41:11,568 - multi_tenant_ingestion - INFO - Multi-tenant ingestion pipeline initialized
2025-09-12 17:41:11,568 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-09-12 17:41:11,568 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-09-12 17:41:11,568 - interactive_multi_tenant_api - INFO - Tenant manager initialized
2025-09-12 17:41:11,571 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 17:41:11,571 - interactive_multi_tenant_api - INFO - Tenant ingestion service initialized
2025-09-12 17:41:11,571 - auth_middleware - INFO - JWT Authenticator initialized
2025-09-12 17:41:11,571 - interactive_multi_tenant_api - INFO - JWT authenticator initialized
2025-09-12 17:41:11,571 - interactive_multi_tenant_api - INFO - 🎯 Multi-Tenant RAG API ready - all backend logs will appear in this terminal
2025-09-12 17:41:11,572 - interactive_multi_tenant_api - INFO - 📊 Backend activity from CLI and API operations will be shown below:
2025-09-12 17:41:34,481 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-09-12 17:41:34,650 - catalog_database - INFO - Catalog database connection test successful
2025-09-12 17:41:34,651 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 17:41:34,740 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 17:41:34,789 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 17:41:34,881 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_uuid IF NOT EXISTS FOR (e:Entity) ON (e.uuid)` has no effect.} {description: `RANGE INDEX entity_uuid FOR (e:Entity) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX entity_uuid IF NOT EXISTS FOR (n:Entity) ON (n.uuid)'
2025-09-12 17:41:34,883 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX relation_uuid FOR ()-[e:RELATES_TO]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)'
2025-09-12 17:41:34,884 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_uuid IF NOT EXISTS FOR (e:Episodic) ON (e.uuid)` has no effect.} {description: `RANGE INDEX episode_uuid FOR (e:Episodic) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX episode_uuid IF NOT EXISTS FOR (n:Episodic) ON (n.uuid)'
2025-09-12 17:41:34,885 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX community_uuid IF NOT EXISTS FOR (e:Community) ON (e.uuid)` has no effect.} {description: `RANGE INDEX community_uuid FOR (e:Community) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX community_uuid IF NOT EXISTS FOR (n:Community) ON (n.uuid)'
2025-09-12 17:41:34,885 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX has_member_uuid FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)'
2025-09-12 17:41:34,886 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX mention_uuid FOR ()-[e:MENTIONS]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)'
2025-09-12 17:41:34,888 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX relation_group_id FOR ()-[e:RELATES_TO]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)'
2025-09-12 17:41:34,888 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_group_id IF NOT EXISTS FOR (e:Episodic) ON (e.group_id)` has no effect.} {description: `RANGE INDEX episode_group_id FOR (e:Episodic) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX episode_group_id IF NOT EXISTS FOR (n:Episodic) ON (n.group_id)'
2025-09-12 17:41:34,888 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_group_id IF NOT EXISTS FOR (e:Entity) ON (e.group_id)` has no effect.} {description: `RANGE INDEX entity_group_id FOR (e:Entity) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX entity_group_id IF NOT EXISTS FOR (n:Entity) ON (n.group_id)'
2025-09-12 17:41:34,890 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.name)` has no effect.} {description: `RANGE INDEX name_entity_index FOR (e:Entity) ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.name)'
2025-09-12 17:41:34,890 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX mention_group_id FOR ()-[e:MENTIONS]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)'
2025-09-12 17:41:34,891 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_entity_index FOR (e:Entity) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.created_at)'
2025-09-12 17:41:34,891 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX episode_content IF NOT EXISTS FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` has no effect.} {description: `FULLTEXT INDEX episode_content FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX episode_content IF NOT EXISTS \n            FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]'
2025-09-12 17:41:34,892 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` has no effect.} {description: `FULLTEXT INDEX edge_name_and_fact FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS \n            FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]'
2025-09-12 17:41:34,892 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX community_name IF NOT EXISTS FOR (e:Community) ON EACH [e.name, e.group_id]` has no effect.} {description: `FULLTEXT INDEX community_name FOR (e:Community) ON EACH [e.name, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX community_name IF NOT EXISTS \n            FOR (n:Community) ON EACH [n.name, n.group_id]'
2025-09-12 17:41:34,893 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)` has no effect.} {description: `RANGE INDEX name_edge_index FOR ()-[e:RELATES_TO]-() ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)'
2025-09-12 17:41:34,894 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_episodic_index FOR (e:Episodic) ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.valid_at)'
2025-09-12 17:41:34,894 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_episodic_index FOR (e:Episodic) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.created_at)'
2025-09-12 17:41:34,895 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` has no effect.} {description: `RANGE INDEX expired_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` already exists.} {position: None} for query: 'CREATE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)'
2025-09-12 17:41:34,896 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)'
2025-09-12 17:41:34,896 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)'
2025-09-12 17:41:34,896 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` has no effect.} {description: `RANGE INDEX invalid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` already exists.} {position: None} for query: 'CREATE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)'
2025-09-12 17:41:34,896 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` has no effect.} {description: `FULLTEXT INDEX node_name_and_summary FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS \n            FOR (n:Entity) ON EACH [n.name, n.summary, n.group_id]'
2025-09-12 17:41:34,897 - tenant_graphiti_client - INFO - TenantGraphitiClient initialized successfully with LLM: gemini-2.0-flash-thinking-exp-1219
2025-09-12 17:42:28,686 - auth_middleware - INFO - Created access token for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 17:43:16,702 - tenant_data_ingestion_service - INFO - Starting document ingestion for tenant 496970e9-d66c-402c-8628-bfb2ce86f235: temporal_rag_test_story.md
2025-09-12 17:43:20,251 - tenant_data_ingestion_service - INFO - Creating chunks for document: temporal_rag_test_story.md
2025-09-12 17:43:20,252 - tenant_data_ingestion_service - INFO - Generating embeddings for 4 chunks
2025-09-12 17:43:20,252 - ingestion.embedder - INFO - Generating embeddings for 4 chunks
2025-09-12 17:43:22,202 - ingestion.embedder - INFO - Processed batch 1/1
2025-09-12 17:43:22,202 - ingestion.embedder - INFO - Generated embeddings for 4 chunks (model: embedding-001, dimensions: 768)
2025-09-12 17:43:28,372 - tenant_data_ingestion_service - INFO - Adding 4 chunks to tenant 496970e9-d66c-402c-8628-bfb2ce86f235 graph namespace: tenant_496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 17:43:28,402 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:43:32,241 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:43:33,997 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:43:52,186 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:43:52,187 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:43:52,188 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:43:52,190 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:43:52,191 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:43:52,193 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:43:52,194 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:43:52,196 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:43:52,197 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:43:52,198 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:43:52,200 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:43:52,201 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:43:55,174 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-09-12 17:43:55,174 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_call": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Tenant 496970e9-d66c-402c-8628-bfb2ce86f235 initialized with dedicated namespace\"\n]\n        \"Document: temporal_rag_test_story.md\\n\\nContent:\\n# \\ud83d\\udcda Temporal Knowledge Story for RAG Testing\\n\\n\\n\\n## \\ud83e\\udde0 Story: The Life and Choices of Aanya Sharma (2023\\u20132025)\\n\\n\\n\\n### \\ud83d\\udcc5 December 2023\\n\\n\\n- Aanya Sharma is a product manager at **Zyphos Tech**, living in **Bangalore**.\\n\\n\\n- \\n\\nShe prefers **Android phones**. Her favorite phone is the **OnePlus 11R**.\\n\\n\\n- \\n\\nShe is using **Notion** as her preferred note-taking app.\\n\\n\\n- \\n\\nShe uses **Slack** for team collaboration.\\n\\n\\n- \\n\\nHer favorite coffee shop is **Third Wave Coffee, Indiranagar**.\\n\\n\\n\\n### \\ud83d\\udcc5 February 2024\\n\\n\\n- Aanya moves to **Hyderabad** for a project.\\n\\n\\n- \\n\\nShe discovers and starts preferring **Samsung Galaxy Z Fold 5** over OnePlus.\\n\\n\\n- \\n\\nShe starts using **Obsidian** instead of Notion due to better knowledge graphing.\\n\\n\\n- \\n\\nHer favorite caf\\u00e9 becomes **Roastery Coffee House** in Hyderabad.\\n\\n\\n-\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'OnePlus 11R', 'summary': '', 'entity_types': ['Entity'], 'attributes': {}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{
  "summary": "The OnePlus 11R is a phone that Aanya Sharma, a product manager at Zyphos Tech, initially preferred in December 2023. She was living in Bangalore at the time and used Android phones. By February 2024, she had moved to Hyderabad and started preferring the Samsung Galaxy Z Fold 5 over the OnePlus 11R."
}
```

2025-09-12 17:43:55,174 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-09-12 17:43:55,174 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-09-12 17:43:55,174 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:43:57,387 - graphiti_core.graphiti - INFO - Completed add_episode in 29014.28985595703 ms
2025-09-12 17:43:57,387 - tenant_graphiti_client - INFO - ✅ Added episode 'tenant_496970e9-d66c-402c-8628-bfb2ce86f235_dc909740-dffa-4b77-b3e3-59655b8d503f_chunk_0_1757679208' for tenant 496970e9-d66c-402c-8628-bfb2ce86f235 (namespace: tenant_496970e9-d66c-402c-8628-bfb2ce86f235)
2025-09-12 17:43:57,591 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:44:01,187 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:44:02,995 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:44:52,817 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:44:52,820 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:44:52,823 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:44:52,825 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:44:52,827 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:44:52,829 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:44:52,831 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:44:52,833 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:44:52,835 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:44:52,836 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:44:52,838 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:44:52,840 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:44:52,842 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:44:52,843 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:44:54,045 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:44:54,046 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:44:54,047 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:44:54,048 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:44:54,049 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:44:54,051 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:44:54,053 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:44:54,054 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:44:54,055 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:44:54,056 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:44:54,057 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:44:54,059 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-09-12 17:44:54,060 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_call": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Tenant 496970e9-d66c-402c-8628-bfb2ce86f235 initialized with dedicated namespace\",\n  \"Document: temporal_rag_test_story.md\\n\\nContent:\\n# \\ud83d\\udcda Temporal Knowledge Story for RAG Testing\\n\\n\\n\\n## \\ud83e\\udde0 Story: The Life and Choices of Aanya Sharma (2023\\u20132025)\\n\\n\\n\\n### \\ud83d\\udcc5 December 2023\\n\\n\\n- Aanya Sharma is a product manager at **Zyphos Tech**, living in **Bangalore**.\\n\\n\\n- \\n\\nShe prefers **Android phones**. Her favorite phone is the **OnePlus 11R**.\\n\\n\\n- \\n\\nShe is using **Notion** as her preferred note-taking app.\\n\\n\\n- \\n\\nShe uses **Slack** for team collaboration.\\n\\n\\n- \\n\\nHer favorite coffee shop is **Third Wave Coffee, Indiranagar**.\\n\\n\\n\\n### \\ud83d\\udcc5 February 2024\\n\\n\\n- Aanya moves to **Hyderabad** for a project.\\n\\n\\n- \\n\\nShe discovers and starts preferring **Samsung Galaxy Z Fold 5** over OnePlus.\\n\\n\\n- \\n\\nShe starts using **Obsidian** instead of Notion due to better knowledge graphing.\\n\\n\\n- \\n\\nHer favorite caf\\u00e9 becomes **Roastery Coffee House** in Hyderabad.\\n\\n\\n-\"\n]\n        \"Document: temporal_rag_test_story.md\\n\\nContent:\\nSlack is replaced by **Microsoft Teams** in her organization.\\n\\n\\n\\n### \\ud83d\\udcc5 June 2024\\n\\n\\n- Aanya buys an **iPhone 15 Pro Max** after being influenced by her designer friends.\\n\\n\\n- \\n\\nShe now prefers **Apple devices**.\\n\\n\\n- \\n\\nShe starts using **Apple Notes**.\\n\\n\\n- \\n\\nShe still uses Microsoft Teams.\\n\\n\\n- \\n\\nHer favorite coffee shop is now **Starbucks, Banjara Hills**.\\n\\n\\n\\n### \\ud83d\\udcc5 September 2024\\n\\n\\n- Aanya is promoted to **Director of Product**.\\n\\n\\n- \\n\\nShe starts managing two teams:\\n  - **Product Team A**: Working on internal tools.\\n  - **Product Team B**: Working on mobile consumer app.\\n\\n\\n- \\n\\nProduct Team A uses **Jira**, while Team B uses **Linear**.\\n\\n\\n- \\n\\nShe uses **Miro** heavily for brainstorming and workshops.\\n\\n\\n- \\n\\nShe starts splitting her time between **Hyderabad** and **Mumbai**.\\n\\n\\n-\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'Starbucks, Banjara Hills', 'summary': '', 'entity_types': ['Entity'], 'attributes': {}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{
  "summary": "Starbucks, Banjara Hills is a coffee shop located in Hyderabad. It became Aanya Sharma's favorite coffee shop in September 2024."
}
```

2025-09-12 17:44:54,060 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-09-12 17:44:54,060 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-09-12 17:44:54,060 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:44:54,747 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-09-12 17:44:54,748 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_call": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Tenant 496970e9-d66c-402c-8628-bfb2ce86f235 initialized with dedicated namespace\",\n  \"Document: temporal_rag_test_story.md\\n\\nContent:\\n# \\ud83d\\udcda Temporal Knowledge Story for RAG Testing\\n\\n\\n\\n## \\ud83e\\udde0 Story: The Life and Choices of Aanya Sharma (2023\\u20132025)\\n\\n\\n\\n### \\ud83d\\udcc5 December 2023\\n\\n\\n- Aanya Sharma is a product manager at **Zyphos Tech**, living in **Bangalore**.\\n\\n\\n- \\n\\nShe prefers **Android phones**. Her favorite phone is the **OnePlus 11R**.\\n\\n\\n- \\n\\nShe is using **Notion** as her preferred note-taking app.\\n\\n\\n- \\n\\nShe uses **Slack** for team collaboration.\\n\\n\\n- \\n\\nHer favorite coffee shop is **Third Wave Coffee, Indiranagar**.\\n\\n\\n\\n### \\ud83d\\udcc5 February 2024\\n\\n\\n- Aanya moves to **Hyderabad** for a project.\\n\\n\\n- \\n\\nShe discovers and starts preferring **Samsung Galaxy Z Fold 5** over OnePlus.\\n\\n\\n- \\n\\nShe starts using **Obsidian** instead of Notion due to better knowledge graphing.\\n\\n\\n- \\n\\nHer favorite caf\\u00e9 becomes **Roastery Coffee House** in Hyderabad.\\n\\n\\n-\"\n]\n        \"Document: temporal_rag_test_story.md\\n\\nContent:\\nSlack is replaced by **Microsoft Teams** in her organization.\\n\\n\\n\\n### \\ud83d\\udcc5 June 2024\\n\\n\\n- Aanya buys an **iPhone 15 Pro Max** after being influenced by her designer friends.\\n\\n\\n- \\n\\nShe now prefers **Apple devices**.\\n\\n\\n- \\n\\nShe starts using **Apple Notes**.\\n\\n\\n- \\n\\nShe still uses Microsoft Teams.\\n\\n\\n- \\n\\nHer favorite coffee shop is now **Starbucks, Banjara Hills**.\\n\\n\\n\\n### \\ud83d\\udcc5 September 2024\\n\\n\\n- Aanya is promoted to **Director of Product**.\\n\\n\\n- \\n\\nShe starts managing two teams:\\n  - **Product Team A**: Working on internal tools.\\n  - **Product Team B**: Working on mobile consumer app.\\n\\n\\n- \\n\\nProduct Team A uses **Jira**, while Team B uses **Linear**.\\n\\n\\n- \\n\\nShe uses **Miro** heavily for brainstorming and workshops.\\n\\n\\n- \\n\\nShe starts splitting her time between **Hyderabad** and **Mumbai**.\\n\\n\\n-\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'iPhone 15 Pro Max', 'summary': '', 'entity_types': ['Entity'], 'attributes': {}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{
  "summary": "The iPhone 15 Pro Max was purchased by Aanya Sharma in June 2024, influenced by her designer friends. This purchase marked a shift in her preference towards Apple devices. She also began using Apple Notes around this time. Previously, in December 2023, she was a product manager at Zyphos Tech in Bangalore, preferring Android phones, specifically the OnePlus 11R. By February 2024, she had moved to Hyderabad and started using a Samsung Galaxy Z Fold 5. In September 2024, Aanya was promoted to Director of Product and began splitting her time between Hyderabad and Mumbai."
}
```

2025-09-12 17:44:54,748 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-09-12 17:44:54,748 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-09-12 17:44:54,749 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:44:54,837 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-09-12 17:44:54,837 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_call": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Tenant 496970e9-d66c-402c-8628-bfb2ce86f235 initialized with dedicated namespace\",\n  \"Document: temporal_rag_test_story.md\\n\\nContent:\\n# \\ud83d\\udcda Temporal Knowledge Story for RAG Testing\\n\\n\\n\\n## \\ud83e\\udde0 Story: The Life and Choices of Aanya Sharma (2023\\u20132025)\\n\\n\\n\\n### \\ud83d\\udcc5 December 2023\\n\\n\\n- Aanya Sharma is a product manager at **Zyphos Tech**, living in **Bangalore**.\\n\\n\\n- \\n\\nShe prefers **Android phones**. Her favorite phone is the **OnePlus 11R**.\\n\\n\\n- \\n\\nShe is using **Notion** as her preferred note-taking app.\\n\\n\\n- \\n\\nShe uses **Slack** for team collaboration.\\n\\n\\n- \\n\\nHer favorite coffee shop is **Third Wave Coffee, Indiranagar**.\\n\\n\\n\\n### \\ud83d\\udcc5 February 2024\\n\\n\\n- Aanya moves to **Hyderabad** for a project.\\n\\n\\n- \\n\\nShe discovers and starts preferring **Samsung Galaxy Z Fold 5** over OnePlus.\\n\\n\\n- \\n\\nShe starts using **Obsidian** instead of Notion due to better knowledge graphing.\\n\\n\\n- \\n\\nHer favorite caf\\u00e9 becomes **Roastery Coffee House** in Hyderabad.\\n\\n\\n-\"\n]\n        \"Document: temporal_rag_test_story.md\\n\\nContent:\\nSlack is replaced by **Microsoft Teams** in her organization.\\n\\n\\n\\n### \\ud83d\\udcc5 June 2024\\n\\n\\n- Aanya buys an **iPhone 15 Pro Max** after being influenced by her designer friends.\\n\\n\\n- \\n\\nShe now prefers **Apple devices**.\\n\\n\\n- \\n\\nShe starts using **Apple Notes**.\\n\\n\\n- \\n\\nShe still uses Microsoft Teams.\\n\\n\\n- \\n\\nHer favorite coffee shop is now **Starbucks, Banjara Hills**.\\n\\n\\n\\n### \\ud83d\\udcc5 September 2024\\n\\n\\n- Aanya is promoted to **Director of Product**.\\n\\n\\n- \\n\\nShe starts managing two teams:\\n  - **Product Team A**: Working on internal tools.\\n  - **Product Team B**: Working on mobile consumer app.\\n\\n\\n- \\n\\nProduct Team A uses **Jira**, while Team B uses **Linear**.\\n\\n\\n- \\n\\nShe uses **Miro** heavily for brainstorming and workshops.\\n\\n\\n- \\n\\nShe starts splitting her time between **Hyderabad** and **Mumbai**.\\n\\n\\n-\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'Mumbai', 'summary': '', 'entity_types': ['Entity'], 'attributes': {}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{"properties": {"summary": "Mumbai is a city where Aanya Sharma started splitting her time in September 2024. She was promoted to Director of Product and now manages two teams, Product Team A (using Jira) and Product Team B (using Linear). She also uses Miro for brainstorming and workshops. Aanya previously lived in Bangalore and Hyderabad, and her preferences in technology and coffee shops have evolved over time."}, "required": ["summary"], "title": "EntityAttributes_8bc6da9a64dd4380b4498c1d7c9ea9cc", "type": "object"}
```

2025-09-12 17:44:54,837 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-09-12 17:44:54,837 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-09-12 17:44:54,839 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:44:55,813 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-09-12 17:44:55,814 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_call": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Tenant 496970e9-d66c-402c-8628-bfb2ce86f235 initialized with dedicated namespace\",\n  \"Document: temporal_rag_test_story.md\\n\\nContent:\\n# \\ud83d\\udcda Temporal Knowledge Story for RAG Testing\\n\\n\\n\\n## \\ud83e\\udde0 Story: The Life and Choices of Aanya Sharma (2023\\u20132025)\\n\\n\\n\\n### \\ud83d\\udcc5 December 2023\\n\\n\\n- Aanya Sharma is a product manager at **Zyphos Tech**, living in **Bangalore**.\\n\\n\\n- \\n\\nShe prefers **Android phones**. Her favorite phone is the **OnePlus 11R**.\\n\\n\\n- \\n\\nShe is using **Notion** as her preferred note-taking app.\\n\\n\\n- \\n\\nShe uses **Slack** for team collaboration.\\n\\n\\n- \\n\\nHer favorite coffee shop is **Third Wave Coffee, Indiranagar**.\\n\\n\\n\\n### \\ud83d\\udcc5 February 2024\\n\\n\\n- Aanya moves to **Hyderabad** for a project.\\n\\n\\n- \\n\\nShe discovers and starts preferring **Samsung Galaxy Z Fold 5** over OnePlus.\\n\\n\\n- \\n\\nShe starts using **Obsidian** instead of Notion due to better knowledge graphing.\\n\\n\\n- \\n\\nHer favorite caf\\u00e9 becomes **Roastery Coffee House** in Hyderabad.\\n\\n\\n-\"\n]\n        \"Document: temporal_rag_test_story.md\\n\\nContent:\\nSlack is replaced by **Microsoft Teams** in her organization.\\n\\n\\n\\n### \\ud83d\\udcc5 June 2024\\n\\n\\n- Aanya buys an **iPhone 15 Pro Max** after being influenced by her designer friends.\\n\\n\\n- \\n\\nShe now prefers **Apple devices**.\\n\\n\\n- \\n\\nShe starts using **Apple Notes**.\\n\\n\\n- \\n\\nShe still uses Microsoft Teams.\\n\\n\\n- \\n\\nHer favorite coffee shop is now **Starbucks, Banjara Hills**.\\n\\n\\n\\n### \\ud83d\\udcc5 September 2024\\n\\n\\n- Aanya is promoted to **Director of Product**.\\n\\n\\n- \\n\\nShe starts managing two teams:\\n  - **Product Team A**: Working on internal tools.\\n  - **Product Team B**: Working on mobile consumer app.\\n\\n\\n- \\n\\nProduct Team A uses **Jira**, while Team B uses **Linear**.\\n\\n\\n- \\n\\nShe uses **Miro** heavily for brainstorming and workshops.\\n\\n\\n- \\n\\nShe starts splitting her time between **Hyderabad** and **Mumbai**.\\n\\n\\n-\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'Director of Product', 'summary': '', 'entity_types': ['Entity'], 'attributes': {}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{
  "summary": "Aanya Sharma, initially a Product Manager at Zyphos Tech in Bangalore, transitioned to Hyderabad in February 2024. Her preferences evolved from Android (OnePlus 11R, Samsung Galaxy Z Fold 5) to Apple devices (iPhone 15 Pro Max) by June 2024. Her note-taking tools changed from Notion to Obsidian, and then to Apple Notes. Collaboration tools shifted from Slack to Microsoft Teams. By September 2024, Aanya was promoted to Director of Product, managing two teams (Product Team A using Jira, Product Team B using Linear) and utilizing Miro for brainstorming. She began splitting her time between Hyderabad and Mumbai."
}
```

2025-09-12 17:44:55,814 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-09-12 17:44:55,814 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-09-12 17:44:55,816 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:45:03,584 - graphiti_core.graphiti - INFO - Completed add_episode in 65996.5569972992 ms
2025-09-12 17:45:03,585 - tenant_graphiti_client - INFO - ✅ Added episode 'tenant_496970e9-d66c-402c-8628-bfb2ce86f235_dc909740-dffa-4b77-b3e3-59655b8d503f_chunk_1_1757679237' for tenant 496970e9-d66c-402c-8628-bfb2ce86f235 (namespace: tenant_496970e9-d66c-402c-8628-bfb2ce86f235)
2025-09-12 17:45:03,792 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:45:38,994 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-09-12 17:45:38,994 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_call": null,
        "function_response": null,
        "text": "\n<TEXT>\nDocument: temporal_rag_test_story.md\n\nContent:\nHer Mumbai go-to place is **Blue Tokai, Bandra**.\n\n\n\n### \ud83d\udcc5 January 2025\n\n\n- Aanya switches to **Pixel 9 Pro** as she becomes interested in AI-first devices.\n\n\n- \n\nApple is no longer her preferred brand\u2014she now leans toward **Google\u2019s ecosystem**.\n\n\n- \n\nShe moves fully to **Hyderabad**.\n\n\n- \n\nShe now prefers **Trello** for personal projects, while her teams still use Jira and Linear.\n\n\n- \n\nShe mentors a group of interns, one of whom, **Rahul Mehta**, prefers **One UI over Pixel UI**.\n\n\n\n### \ud83d\udcc5 July 2025\n\n\n- Aanya joins **Cerebro AI** as **Chief Product Officer**.\n\n\n- \n\nShe now oversees:\n  - **Infra Team** (uses Jira)\n  - **ML Research Team** (uses GitHub Projects)\n  - **AI Product Team** (uses Notion again)\n\n\n- \n\nShe reverts to **iPhone 16** due to better integration with her Mac.\n\n\n-\n</TEXT>\n<ENTITY TYPES>\n[{'entity_type_id': 0, 'entity_type_name': 'Entity', 'entity_type_description': 'Default entity classification. Use this entity type if the entity is not one of the other listed types.'}]\n</ENTITY TYPES>\n\nGiven the above text, extract entities from the TEXT that are explicitly or implicitly mentioned.\nFor each entity extracted, also determine its entity type based on the provided ENTITY TYPES and their descriptions.\nIndicate the classified entity type by providing its entity_type_id.\n\n\n\nGuidelines:\n1. Extract significant entities, concepts, or actors mentioned in the conversation.\n2. Avoid creating nodes for relationships or actions.\n3. Avoid creating nodes for temporal information like dates, times or years (these will be added to edges later).\n4. Be as explicit as possible in your node names, using full names and avoiding abbreviations.\n"
      }
    ],
    "role": "user"
  }
]
Raw output: {"extracted_entities": [{"name": "Blue Tokai, Bandra", "entity_type_id": 0}, {"name": "Aanya", "entity_type_id": 0}, {"name": "Pixel 9 Pro", "entity_type_id": 0}, {"name": "Apple", "entity_type_id": 0}, {"name": "Google\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\... (truncated) ...n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\

2025-09-12 17:45:38,995 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Unterminated string starting at: line 1 column 213 (char 212)
2025-09-12 17:45:38,995 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-09-12 17:45:38,998 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:45:46,362 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:45:48,763 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:46:23,943 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-09-12 17:46:23,943 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_call": null,
        "function_response": null,
        "text": "\n        <PREVIOUS MESSAGES>\n        [\n  \"Tenant 496970e9-d66c-402c-8628-bfb2ce86f235 initialized with dedicated namespace\",\n  \"Document: temporal_rag_test_story.md\\n\\nContent:\\n# \\ud83d\\udcda Temporal Knowledge Story for RAG Testing\\n\\n\\n\\n## \\ud83e\\udde0 Story: The Life and Choices of Aanya Sharma (2023\\u20132025)\\n\\n\\n\\n### \\ud83d\\udcc5 December 2023\\n\\n\\n- Aanya Sharma is a product manager at **Zyphos Tech**, living in **Bangalore**.\\n\\n\\n- \\n\\nShe prefers **Android phones**. Her favorite phone is the **OnePlus 11R**.\\n\\n\\n- \\n\\nShe is using **Notion** as her preferred note-taking app.\\n\\n\\n- \\n\\nShe uses **Slack** for team collaboration.\\n\\n\\n- \\n\\nHer favorite coffee shop is **Third Wave Coffee, Indiranagar**.\\n\\n\\n\\n### \\ud83d\\udcc5 February 2024\\n\\n\\n- Aanya moves to **Hyderabad** for a project.\\n\\n\\n- \\n\\nShe discovers and starts preferring **Samsung Galaxy Z Fold 5** over OnePlus.\\n\\n\\n- \\n\\nShe starts using **Obsidian** instead of Notion due to better knowledge graphing.\\n\\n\\n- \\n\\nHer favorite caf\\u00e9 becomes **Roastery Coffee House** in Hyderabad.\\n\\n\\n-\",\n  \"Document: temporal_rag_test_story.md\\n\\nContent:\\nSlack is replaced by **Microsoft Teams** in her organization.\\n\\n\\n\\n### \\ud83d\\udcc5 June 2024\\n\\n\\n- Aanya buys an **iPhone 15 Pro Max** after being influenced by her designer friends.\\n\\n\\n- \\n\\nShe now prefers **Apple devices**.\\n\\n\\n- \\n\\nShe starts using **Apple Notes**.\\n\\n\\n- \\n\\nShe still uses Microsoft Teams.\\n\\n\\n- \\n\\nHer favorite coffee shop is now **Starbucks, Banjara Hills**.\\n\\n\\n\\n### \\ud83d\\udcc5 September 2024\\n\\n\\n- Aanya is promoted to **Director of Product**.\\n\\n\\n- \\n\\nShe starts managing two teams:\\n  - **Product Team A**: Working on internal tools.\\n  - **Product Team B**: Working on mobile consumer app.\\n\\n\\n- \\n\\nProduct Team A uses **Jira**, while Team B uses **Linear**.\\n\\n\\n- \\n\\nShe uses **Miro** heavily for brainstorming and workshops.\\n\\n\\n- \\n\\nShe starts splitting her time between **Hyderabad** and **Mumbai**.\\n\\n\\n-\"\n]\n        </PREVIOUS MESSAGES>\n        <CURRENT MESSAGE>\n        Document: temporal_rag_test_story.md\n\nContent:\nHer Mumbai go-to place is **Blue Tokai, Bandra**.\n\n\n\n### \ud83d\udcc5 January 2025\n\n\n- Aanya switches to **Pixel 9 Pro** as she becomes interested in AI-first devices.\n\n\n- \n\nApple is no longer her preferred brand\u2014she now leans toward **Google\u2019s ecosystem**.\n\n\n- \n\nShe moves fully to **Hyderabad**.\n\n\n- \n\nShe now prefers **Trello** for personal projects, while her teams still use Jira and Linear.\n\n\n- \n\nShe mentors a group of interns, one of whom, **Rahul Mehta**, prefers **One UI over Pixel UI**.\n\n\n\n### \ud83d\udcc5 July 2025\n\n\n- Aanya joins **Cerebro AI** as **Chief Product Officer**.\n\n\n- \n\nShe now oversees:\n  - **Infra Team** (uses Jira)\n  - **ML Research Team** (uses GitHub Projects)\n  - **AI Product Team** (uses Notion again)\n\n\n- \n\nShe reverts to **iPhone 16** due to better integration with her Mac.\n\n\n-\n        </CURRENT MESSAGE>\n        \n        \n        Each of the following ENTITIES were extracted from the CURRENT MESSAGE.\n        Each entity in ENTITIES is represented as a JSON object with the following structure:\n        {\n            id: integer id of the entity,\n            name: \"name of the entity\",\n            entity_type: \"ontological classification of the entity\",\n            entity_type_description: \"Description of what the entity type represents\",\n            duplication_candidates: [\n                {\n                    idx: integer index of the candidate entity,\n                    name: \"name of the candidate entity\",\n                    entity_type: \"ontological classification of the candidate entity\",\n                    ...<additional attributes>\n                }\n            ]\n        }\n        \n        <ENTITIES>\n        [\n  {\n    \"id\": 0,\n    \"name\": \"Blue Tokai, Bandra\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 1,\n    \"name\": \"Aanya\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 2,\n    \"name\": \"Pixel 9 Pro\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 3,\n    \"name\": \"AI-first devices\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 4,\n    \"name\": \"Apple\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 5,\n    \"name\": \"Google\\u2019s ecosystem\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 6,\n    \"name\": \"Hyderabad\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 7,\n    \"name\": \"Trello\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 8,\n    \"name\": \"Jira\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 9,\n    \"name\": \"Linear\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 10,\n    \"name\": \"Rahul Mehta\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 11,\n    \"name\": \"One UI\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 12,\n    \"name\": \"Pixel UI\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 13,\n    \"name\": \"Cerebro AI\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 14,\n    \"name\": \"Chief Product Officer\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 15,\n    \"name\": \"Infra Team\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 16,\n    \"name\": \"ML Research Team\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 17,\n    \"name\": \"GitHub Projects\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 18,\n    \"name\": \"AI Product Team\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 19,\n    \"name\": \"Notion\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 20,\n    \"name\": \"iPhone 16\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 21,\n    \"name\": \"Mac\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  }\n]\n        </ENTITIES>\n        \n        <EXISTING ENTITIES>\n        [\n  [\n    {\n      \"idx\": 0,\n      \"name\": \"Mumbai\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 1,\n      \"name\": \"Bangalore\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 2,\n      \"name\": \"Third Wave Coffee, Indiranagar\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 3,\n      \"name\": \"Starbucks, Banjara Hills\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 4,\n      \"name\": \"Hyderabad\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 5,\n      \"name\": \"Aanya Sharma\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 6,\n      \"name\": \"Jira\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 7,\n      \"name\": \"Linear\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 8,\n      \"name\": \"Product Team A\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 9,\n      \"name\": \"Product Team B\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 10,\n      \"name\": \"Zyphos Tech\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 11,\n      \"name\": \"Android phones\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 12,\n      \"name\": \"iPhone 15 Pro Max\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 13,\n      \"name\": \"Apple Notes\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 14,\n      \"name\": \"Apple devices\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 15,\n      \"name\": \"Director of Product\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 16,\n      \"name\": \"Samsung Galaxy Z Fold 5\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 17,\n      \"name\": \"OnePlus 11R\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 18,\n      \"name\": \"Microsoft Teams\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 19,\n      \"name\": \"namespace\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 20,\n      \"name\": \"Roastery Coffee House\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 21,\n      \"name\": \"Slack\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 22,\n      \"name\": \"Miro\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 23,\n      \"name\": \"Obsidian\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 24,\n      \"name\": \"Notion\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    }\n  ]\n]\n        </EXISTING ENTITIES>\n\n        For each of the above ENTITIES, determine if the entity is a duplicate of any of the EXISTING ENTITIES.\n\n        Entities should only be considered duplicates if they refer to the *same real-world object or concept*.\n\n        Do NOT mark entities as duplicates if:\n        - They are related but distinct.\n        - They have similar names or purposes but refer to separate instances or concepts.\n\n        Task:\n        Your response will be a list called entity_resolutions which contains one entry for each entity.\n        \n        For each entity, return the id of the entity as id, the name of the entity as name, and the duplicate_idx\n        as an integer.\n        \n        - If an entity is a duplicate of one of the EXISTING ENTITIES, return the idx of the candidate it is a \n        duplicate of.\n        - If an entity is not a duplicate of one of the EXISTING ENTITIES, return the -1 as the duplication_idx\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: {"entity_resolutions": [{"id": 0, "duplicate_idx": -1, "name": "Blue Tokai, Bandra", "duplicates": []}, {"id": 1, "duplicate_idx": 5, "name": "Aanya", "duplicates": [5]}, {"id": 2, "duplicate_idx": -1, "name": "Pixel 9 Pro", "duplicates": []}, {"id": 3, "duplicate_idx": -1, "name": "AI-first devices", "duplicates": []}, {"id": 4, "duplicate_idx": 14, "name": "Apple", "duplicates": [14]}, {"id": 5, "duplicate_idx": -1, "name": "Google\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\... (truncated) ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n

2025-09-12 17:46:23,945 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Unterminated string starting at: line 1 column 431 (char 430)
2025-09-12 17:46:23,945 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-09-12 17:46:23,949 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:46:57,635 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-09-12 17:46:57,636 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_call": null,
        "function_response": null,
        "text": "\n        <PREVIOUS MESSAGES>\n        [\n  \"Tenant 496970e9-d66c-402c-8628-bfb2ce86f235 initialized with dedicated namespace\",\n  \"Document: temporal_rag_test_story.md\\n\\nContent:\\n# \\ud83d\\udcda Temporal Knowledge Story for RAG Testing\\n\\n\\n\\n## \\ud83e\\udde0 Story: The Life and Choices of Aanya Sharma (2023\\u20132025)\\n\\n\\n\\n### \\ud83d\\udcc5 December 2023\\n\\n\\n- Aanya Sharma is a product manager at **Zyphos Tech**, living in **Bangalore**.\\n\\n\\n- \\n\\nShe prefers **Android phones**. Her favorite phone is the **OnePlus 11R**.\\n\\n\\n- \\n\\nShe is using **Notion** as her preferred note-taking app.\\n\\n\\n- \\n\\nShe uses **Slack** for team collaboration.\\n\\n\\n- \\n\\nHer favorite coffee shop is **Third Wave Coffee, Indiranagar**.\\n\\n\\n\\n### \\ud83d\\udcc5 February 2024\\n\\n\\n- Aanya moves to **Hyderabad** for a project.\\n\\n\\n- \\n\\nShe discovers and starts preferring **Samsung Galaxy Z Fold 5** over OnePlus.\\n\\n\\n- \\n\\nShe starts using **Obsidian** instead of Notion due to better knowledge graphing.\\n\\n\\n- \\n\\nHer favorite caf\\u00e9 becomes **Roastery Coffee House** in Hyderabad.\\n\\n\\n-\",\n  \"Document: temporal_rag_test_story.md\\n\\nContent:\\nSlack is replaced by **Microsoft Teams** in her organization.\\n\\n\\n\\n### \\ud83d\\udcc5 June 2024\\n\\n\\n- Aanya buys an **iPhone 15 Pro Max** after being influenced by her designer friends.\\n\\n\\n- \\n\\nShe now prefers **Apple devices**.\\n\\n\\n- \\n\\nShe starts using **Apple Notes**.\\n\\n\\n- \\n\\nShe still uses Microsoft Teams.\\n\\n\\n- \\n\\nHer favorite coffee shop is now **Starbucks, Banjara Hills**.\\n\\n\\n\\n### \\ud83d\\udcc5 September 2024\\n\\n\\n- Aanya is promoted to **Director of Product**.\\n\\n\\n- \\n\\nShe starts managing two teams:\\n  - **Product Team A**: Working on internal tools.\\n  - **Product Team B**: Working on mobile consumer app.\\n\\n\\n- \\n\\nProduct Team A uses **Jira**, while Team B uses **Linear**.\\n\\n\\n- \\n\\nShe uses **Miro** heavily for brainstorming and workshops.\\n\\n\\n- \\n\\nShe starts splitting her time between **Hyderabad** and **Mumbai**.\\n\\n\\n-\"\n]\n        </PREVIOUS MESSAGES>\n        <CURRENT MESSAGE>\n        Document: temporal_rag_test_story.md\n\nContent:\nHer Mumbai go-to place is **Blue Tokai, Bandra**.\n\n\n\n### \ud83d\udcc5 January 2025\n\n\n- Aanya switches to **Pixel 9 Pro** as she becomes interested in AI-first devices.\n\n\n- \n\nApple is no longer her preferred brand\u2014she now leans toward **Google\u2019s ecosystem**.\n\n\n- \n\nShe moves fully to **Hyderabad**.\n\n\n- \n\nShe now prefers **Trello** for personal projects, while her teams still use Jira and Linear.\n\n\n- \n\nShe mentors a group of interns, one of whom, **Rahul Mehta**, prefers **One UI over Pixel UI**.\n\n\n\n### \ud83d\udcc5 July 2025\n\n\n- Aanya joins **Cerebro AI** as **Chief Product Officer**.\n\n\n- \n\nShe now oversees:\n  - **Infra Team** (uses Jira)\n  - **ML Research Team** (uses GitHub Projects)\n  - **AI Product Team** (uses Notion again)\n\n\n- \n\nShe reverts to **iPhone 16** due to better integration with her Mac.\n\n\n-\n        </CURRENT MESSAGE>\n        \n        \n        Each of the following ENTITIES were extracted from the CURRENT MESSAGE.\n        Each entity in ENTITIES is represented as a JSON object with the following structure:\n        {\n            id: integer id of the entity,\n            name: \"name of the entity\",\n            entity_type: \"ontological classification of the entity\",\n            entity_type_description: \"Description of what the entity type represents\",\n            duplication_candidates: [\n                {\n                    idx: integer index of the candidate entity,\n                    name: \"name of the candidate entity\",\n                    entity_type: \"ontological classification of the candidate entity\",\n                    ...<additional attributes>\n                }\n            ]\n        }\n        \n        <ENTITIES>\n        [\n  {\n    \"id\": 0,\n    \"name\": \"Blue Tokai, Bandra\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 1,\n    \"name\": \"Aanya\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 2,\n    \"name\": \"Pixel 9 Pro\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 3,\n    \"name\": \"AI-first devices\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 4,\n    \"name\": \"Apple\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 5,\n    \"name\": \"Google\\u2019s ecosystem\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 6,\n    \"name\": \"Hyderabad\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 7,\n    \"name\": \"Trello\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 8,\n    \"name\": \"Jira\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 9,\n    \"name\": \"Linear\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 10,\n    \"name\": \"Rahul Mehta\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 11,\n    \"name\": \"One UI\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 12,\n    \"name\": \"Pixel UI\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 13,\n    \"name\": \"Cerebro AI\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 14,\n    \"name\": \"Chief Product Officer\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 15,\n    \"name\": \"Infra Team\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 16,\n    \"name\": \"ML Research Team\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 17,\n    \"name\": \"GitHub Projects\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 18,\n    \"name\": \"AI Product Team\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 19,\n    \"name\": \"Notion\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 20,\n    \"name\": \"iPhone 16\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  },\n  {\n    \"id\": 21,\n    \"name\": \"Mac\",\n    \"entity_type\": [\n      \"Entity\"\n    ],\n    \"entity_type_description\": \"The type of the None singleton.\"\n  }\n]\n        </ENTITIES>\n        \n        <EXISTING ENTITIES>\n        [\n  [\n    {\n      \"idx\": 0,\n      \"name\": \"Mumbai\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 1,\n      \"name\": \"Bangalore\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 2,\n      \"name\": \"Third Wave Coffee, Indiranagar\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 3,\n      \"name\": \"Starbucks, Banjara Hills\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 4,\n      \"name\": \"Hyderabad\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 5,\n      \"name\": \"Aanya Sharma\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 6,\n      \"name\": \"Jira\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 7,\n      \"name\": \"Linear\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 8,\n      \"name\": \"Product Team A\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 9,\n      \"name\": \"Product Team B\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 10,\n      \"name\": \"Zyphos Tech\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 11,\n      \"name\": \"Android phones\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 12,\n      \"name\": \"iPhone 15 Pro Max\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 13,\n      \"name\": \"Apple Notes\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 14,\n      \"name\": \"Apple devices\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 15,\n      \"name\": \"Director of Product\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 16,\n      \"name\": \"Samsung Galaxy Z Fold 5\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 17,\n      \"name\": \"OnePlus 11R\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 18,\n      \"name\": \"Microsoft Teams\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 19,\n      \"name\": \"namespace\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 20,\n      \"name\": \"Roastery Coffee House\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 21,\n      \"name\": \"Slack\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 22,\n      \"name\": \"Miro\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 23,\n      \"name\": \"Obsidian\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    },\n    {\n      \"idx\": 24,\n      \"name\": \"Notion\",\n      \"entity_types\": [\n        \"Entity\"\n      ],\n      \"labels\": [\n        \"Entity\"\n      ]\n    }\n  ]\n]\n        </EXISTING ENTITIES>\n\n        For each of the above ENTITIES, determine if the entity is a duplicate of any of the EXISTING ENTITIES.\n\n        Entities should only be considered duplicates if they refer to the *same real-world object or concept*.\n\n        Do NOT mark entities as duplicates if:\n        - They are related but distinct.\n        - They have similar names or purposes but refer to separate instances or concepts.\n\n        Task:\n        Your response will be a list called entity_resolutions which contains one entry for each entity.\n        \n        For each entity, return the id of the entity as id, the name of the entity as name, and the duplicate_idx\n        as an integer.\n        \n        - If an entity is a duplicate of one of the EXISTING ENTITIES, return the idx of the candidate it is a \n        duplicate of.\n        - If an entity is not a duplicate of one of the EXISTING ENTITIES, return the -1 as the duplication_idx\n        "
      }
    ],
    "role": "user"
  },
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_call": null,
        "function_response": null,
        "text": "The previous response attempt was invalid. Error type: Exception. Error details: . Please try again with a valid response, ensuring the output matches the expected format and constraints."
      }
    ],
    "role": "user"
  }
]
Raw output: {"entity_resolutions": [{"id": 0, "duplicate_idx": -1, "name": "Blue Tokai, Bandra", "duplicates": []}, {"id": 1, "duplicate_idx": 5, "name": "Aanya", "duplicates": [5]}, {"id": 2, "duplicate_idx": -1, "name": "Pixel 9 Pro", "duplicates": []}, {"id": 3, "duplicate_idx": -1, "name": "AI-first devices", "duplicates": []}, {"id": 4, "duplicate_idx": -1, "name": "Apple", "duplicates": []}, {"id": 5, "duplicate_idx": -1, "name": "Google\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\... (truncated) ...n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\

2025-09-12 17:46:57,637 - tenant_graphiti_client - ERROR - ❌ Failed to add episode for tenant 496970e9-d66c-402c-8628-bfb2ce86f235: Rate limit exceeded. Please try again later.
2025-09-12 17:46:57,638 - tenant_data_ingestion_service - ERROR - Failed to add chunk 2 to tenant graph
2025-09-12 17:46:57,858 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:46:59,582 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:47:01,270 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:48:10,031 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-09-12 17:48:10,032 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_call": null,
        "function_response": null,
        "text": "\n<PREVIOUS_MESSAGES>\n[\n  \"Tenant 496970e9-d66c-402c-8628-bfb2ce86f235 initialized with dedicated namespace\",\n  \"Document: temporal_rag_test_story.md\\n\\nContent:\\n# \\ud83d\\udcda Temporal Knowledge Story for RAG Testing\\n\\n\\n\\n## \\ud83e\\udde0 Story: The Life and Choices of Aanya Sharma (2023\\u20132025)\\n\\n\\n\\n### \\ud83d\\udcc5 December 2023\\n\\n\\n- Aanya Sharma is a product manager at **Zyphos Tech**, living in **Bangalore**.\\n\\n\\n- \\n\\nShe prefers **Android phones**. Her favorite phone is the **OnePlus 11R**.\\n\\n\\n- \\n\\nShe is using **Notion** as her preferred note-taking app.\\n\\n\\n- \\n\\nShe uses **Slack** for team collaboration.\\n\\n\\n- \\n\\nHer favorite coffee shop is **Third Wave Coffee, Indiranagar**.\\n\\n\\n\\n### \\ud83d\\udcc5 February 2024\\n\\n\\n- Aanya moves to **Hyderabad** for a project.\\n\\n\\n- \\n\\nShe discovers and starts preferring **Samsung Galaxy Z Fold 5** over OnePlus.\\n\\n\\n- \\n\\nShe starts using **Obsidian** instead of Notion due to better knowledge graphing.\\n\\n\\n- \\n\\nHer favorite caf\\u00e9 becomes **Roastery Coffee House** in Hyderabad.\\n\\n\\n-\",\n  \"Document: temporal_rag_test_story.md\\n\\nContent:\\nSlack is replaced by **Microsoft Teams** in her organization.\\n\\n\\n\\n### \\ud83d\\udcc5 June 2024\\n\\n\\n- Aanya buys an **iPhone 15 Pro Max** after being influenced by her designer friends.\\n\\n\\n- \\n\\nShe now prefers **Apple devices**.\\n\\n\\n- \\n\\nShe starts using **Apple Notes**.\\n\\n\\n- \\n\\nShe still uses Microsoft Teams.\\n\\n\\n- \\n\\nHer favorite coffee shop is now **Starbucks, Banjara Hills**.\\n\\n\\n\\n### \\ud83d\\udcc5 September 2024\\n\\n\\n- Aanya is promoted to **Director of Product**.\\n\\n\\n- \\n\\nShe starts managing two teams:\\n  - **Product Team A**: Working on internal tools.\\n  - **Product Team B**: Working on mobile consumer app.\\n\\n\\n- \\n\\nProduct Team A uses **Jira**, while Team B uses **Linear**.\\n\\n\\n- \\n\\nShe uses **Miro** heavily for brainstorming and workshops.\\n\\n\\n- \\n\\nShe starts splitting her time between **Hyderabad** and **Mumbai**.\\n\\n\\n-\"\n]\n</PREVIOUS_MESSAGES>\n\n<CURRENT_MESSAGE>\nDocument: temporal_rag_test_story.md\n\nContent:\nHer preferred coffee shop is now **Sonder Coffee, HSR Layout** when she\u2019s in Bangalore for board meetings.\n\n---\n</CURRENT_MESSAGE>\n\n<ENTITIES>\n[{'id': 0, 'name': 'Sonder Coffee, HSR Layout', 'entity_types': ['Entity']}, {'id': 1, 'name': 'Bangalore', 'entity_types': ['Entity']}] \n</ENTITIES>\n\n<REFERENCE_TIME>\n2025-09-12 17:46:57.840430  # ISO 8601 (UTC); used to resolve relative time mentions\n</REFERENCE_TIME>\n\n<FACT TYPES>\n[]\n</FACT TYPES>\n\n# TASK\nExtract all factual relationships between the given ENTITIES based on the CURRENT MESSAGE.\nOnly extract facts that:\n- involve two DISTINCT ENTITIES from the ENTITIES list,\n- are clearly stated or unambiguously implied in the CURRENT MESSAGE,\n    and can be represented as edges in a knowledge graph.\n- The FACT TYPES provide a list of the most important types of facts, make sure to extract facts of these types\n- The FACT TYPES are not an exhaustive list, extract all facts from the message even if they do not fit into one\n    of the FACT TYPES\n- The FACT TYPES each contain their fact_type_signature which represents the source and target entity types.\n\nYou may use information from the PREVIOUS MESSAGES only to disambiguate references or support continuity.\n\n\n\n\n# EXTRACTION RULES\n\n1. Only emit facts where both the subject and object match IDs in ENTITIES.\n2. Each fact must involve two **distinct** entities.\n3. Use a SCREAMING_SNAKE_CASE string as the `relation_type` (e.g., FOUNDED, WORKS_AT).\n4. Do not emit duplicate or semantically redundant facts.\n5. The `fact_text` should quote or closely paraphrase the original source sentence(s).\n6. Use `REFERENCE_TIME` to resolve vague or relative temporal expressions (e.g., \"last week\").\n7. Do **not** hallucinate or infer temporal bounds from unrelated events.\n\n# DATETIME RULES\n\n- Use ISO 8601 with \u201cZ\u201d suffix (UTC) (e.g., 2025-04-30T00:00:00Z).\n- If the fact is ongoing (present tense), set `valid_at` to REFERENCE_TIME.\n- If a change/termination is expressed, set `invalid_at` to the relevant timestamp.\n- Leave both fields `null` if no explicit or resolvable time is stated.\n- If only a date is mentioned (no time), assume 00:00:00.\n- If only a year is mentioned, use January 1st at 00:00:00.\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: {"edges": [{"relation_type": "IS_LOCATED_IN", "source_entity_id": 0, "target_entity_id": 1, "fact": "Sonder Coffee, HSR Layout when she\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\... (truncated) ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n

2025-09-12 17:48:10,032 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Unterminated string starting at: line 1 column 101 (char 100)
2025-09-12 17:48:10,033 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-09-12 17:48:10,035 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:48:30,426 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:48:30,428 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:48:32,123 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:48:36,625 - graphiti_core.graphiti - INFO - Completed add_episode in 98784.83700752258 ms
2025-09-12 17:48:36,625 - tenant_graphiti_client - INFO - ✅ Added episode 'tenant_496970e9-d66c-402c-8628-bfb2ce86f235_dc909740-dffa-4b77-b3e3-59655b8d503f_chunk_3_1757679417' for tenant 496970e9-d66c-402c-8628-bfb2ce86f235 (namespace: tenant_496970e9-d66c-402c-8628-bfb2ce86f235)
2025-09-12 17:48:36,625 - tenant_data_ingestion_service - INFO - Successfully added 3 episodes to tenant 496970e9-d66c-402c-8628-bfb2ce86f235 graph namespace
2025-09-12 17:48:36,625 - tenant_data_ingestion_service - INFO - Successfully ingested document dc909740-dffa-4b77-b3e3-59655b8d503f for tenant 496970e9-d66c-402c-8628-bfb2ce86f235 in 319923.10ms
2025-09-12 17:58:42,338 - multi_tenant_agent - INFO - Using comprehensive system prompt for intelligent tool routing
2025-09-12 17:58:42,388 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 17:58:42,430 - multi_tenant_agent - INFO - Created multi-tenant agent with model: gemini-2.0-flash-thinking-exp-1219
2025-09-12 17:58:42,436 - multi_tenant_agent - INFO - Successfully registered tenant-aware tools
2025-09-12 17:58:42,436 - multi_tenant_agent - INFO - 🧠 Starting chat processing for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 17:58:42,436 - multi_tenant_agent - INFO - 📝 User query: Hi! Can you tell me about how aanya sharma coffee shop preferences changed over time?
2025-09-12 17:58:42,436 - multi_tenant_agent - INFO - 🤖 Running agent with model gemini-2.0-flash-thinking-exp-1219
2025-09-12 17:58:42,439 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:58:45,667 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 17:58:45,674 - multi_tenant_agent - INFO - 🔍 Local dual search for tenant 496970e9-d66c-402c-8628-bfb2ce86f235: aanya sharma coffee shop preferences over time
2025-09-12 17:58:45,675 - multi_tenant_agent - INFO - 🔍 Vector search for tenant 496970e9-d66c-402c-8628-bfb2ce86f235: aanya sharma coffee shop preferences over time
2025-09-12 17:58:52,489 - multi_tenant_agent - INFO - ✅ Vector search returned 4 results for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 17:58:52,490 - multi_tenant_agent - INFO - 🔍 Graph search for tenant 496970e9-d66c-402c-8628-bfb2ce86f235: aanya sharma coffee shop preferences over time
2025-09-12 17:58:54,288 - tenant_graphiti_client - INFO - Graph search for tenant 496970e9-d66c-402c-8628-bfb2ce86f235 (namespace: tenant_496970e9-d66c-402c-8628-bfb2ce86f235) returned 10 results
2025-09-12 17:58:54,288 - multi_tenant_agent - INFO - ✅ Graph search returned 10 results for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 17:58:54,288 - multi_tenant_agent - INFO - ✅ Local dual search returned 9 combined results
2025-09-12 17:58:54,289 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:58:57,405 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 17:58:57,407 - multi_tenant_agent - INFO - ✅ Agent completed processing for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 17:58:57,407 - multi_tenant_agent - INFO - 📊 Extracted 0 tools and 0 sources
2025-09-12 17:59:46,236 - multi_tenant_agent - INFO - Using comprehensive system prompt for intelligent tool routing
2025-09-12 17:59:46,277 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 17:59:46,322 - multi_tenant_agent - INFO - Created multi-tenant agent with model: gemini-2.0-flash-thinking-exp-1219
2025-09-12 17:59:46,324 - multi_tenant_agent - INFO - Successfully registered tenant-aware tools
2025-09-12 17:59:46,324 - multi_tenant_agent - INFO - 🧠 Starting chat processing for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 17:59:46,324 - multi_tenant_agent - INFO - 📝 User query: Hi! Tell me about neon multi tenancy?
2025-09-12 17:59:46,324 - multi_tenant_agent - INFO - 🤖 Running agent with model gemini-2.0-flash-thinking-exp-1219
2025-09-12 17:59:46,325 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:59:47,788 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 17:59:47,793 - multi_tenant_agent - INFO - 🔍 Local dual search for tenant 496970e9-d66c-402c-8628-bfb2ce86f235: neon multi tenancy
2025-09-12 17:59:47,794 - multi_tenant_agent - INFO - 🔍 Vector search for tenant 496970e9-d66c-402c-8628-bfb2ce86f235: neon multi tenancy
2025-09-12 17:59:53,718 - multi_tenant_agent - INFO - ✅ Vector search returned 3 results for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 17:59:53,718 - multi_tenant_agent - INFO - 🔍 Graph search for tenant 496970e9-d66c-402c-8628-bfb2ce86f235: neon multi tenancy
2025-09-12 17:59:55,521 - tenant_graphiti_client - INFO - Graph search for tenant 496970e9-d66c-402c-8628-bfb2ce86f235 (namespace: tenant_496970e9-d66c-402c-8628-bfb2ce86f235) returned 10 results
2025-09-12 17:59:55,522 - multi_tenant_agent - INFO - ✅ Graph search returned 10 results for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 17:59:55,522 - multi_tenant_agent - INFO - ✅ Local dual search returned 8 combined results
2025-09-12 17:59:55,523 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 17:59:57,068 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 17:59:57,072 - multi_tenant_agent - INFO - ✅ Agent completed processing for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 17:59:57,072 - multi_tenant_agent - INFO - 📊 Extracted 0 tools and 0 sources
2025-09-12 18:11:07,805 - interactive_multi_tenant_api - INFO - Shutting down Multi-Tenant RAG API...
2025-09-12 18:11:12,900 - __main__ - INFO - Starting Interactive Multi-Tenant RAG API on 127.0.0.1:8000
2025-09-12 18:11:12,924 - interactive_multi_tenant_api - INFO - Starting Multi-Tenant RAG API...
2025-09-12 18:11:12,924 - interactive_multi_tenant_api - INFO - Neo4j URI: neo4j://127.0.0.1:7687
2025-09-12 18:11:12,924 - interactive_multi_tenant_api - INFO - Neo4j User: neo4j
2025-09-12 18:11:12,924 - interactive_multi_tenant_api - INFO - Neo4j Password: ***
2025-09-12 18:11:12,924 - tenant_manager - INFO - TenantManager initialized with Graphiti client
2025-09-12 18:11:12,924 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 18:11:12,924 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-09-12 18:11:12,924 - multi_tenant_ingestion - INFO - Multi-tenant ingestion pipeline initialized
2025-09-12 18:11:12,924 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-09-12 18:11:12,924 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-09-12 18:11:12,924 - interactive_multi_tenant_api - INFO - Tenant manager initialized
2025-09-12 18:11:12,927 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 18:11:12,927 - interactive_multi_tenant_api - INFO - Tenant ingestion service initialized
2025-09-12 18:11:12,927 - auth_middleware - INFO - JWT Authenticator initialized
2025-09-12 18:11:12,927 - interactive_multi_tenant_api - INFO - JWT authenticator initialized
2025-09-12 18:11:12,927 - interactive_multi_tenant_api - INFO - 🎯 Multi-Tenant RAG API ready - all backend logs will appear in this terminal
2025-09-12 18:11:12,927 - interactive_multi_tenant_api - INFO - 📊 Backend activity from CLI and API operations will be shown below:
2025-09-12 18:11:20,850 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-09-12 18:11:21,041 - catalog_database - INFO - Catalog database connection test successful
2025-09-12 18:11:21,041 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 18:11:21,133 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 18:11:21,182 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 18:11:21,275 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_uuid IF NOT EXISTS FOR (e:Episodic) ON (e.uuid)` has no effect.} {description: `RANGE INDEX episode_uuid FOR (e:Episodic) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX episode_uuid IF NOT EXISTS FOR (n:Episodic) ON (n.uuid)'
2025-09-12 18:11:21,277 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX community_uuid IF NOT EXISTS FOR (e:Community) ON (e.uuid)` has no effect.} {description: `RANGE INDEX community_uuid FOR (e:Community) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX community_uuid IF NOT EXISTS FOR (n:Community) ON (n.uuid)'
2025-09-12 18:11:21,277 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_uuid IF NOT EXISTS FOR (e:Entity) ON (e.uuid)` has no effect.} {description: `RANGE INDEX entity_uuid FOR (e:Entity) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX entity_uuid IF NOT EXISTS FOR (n:Entity) ON (n.uuid)'
2025-09-12 18:11:21,278 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX has_member_uuid FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)'
2025-09-12 18:11:21,279 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX mention_uuid FOR ()-[e:MENTIONS]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)'
2025-09-12 18:11:21,280 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_group_id IF NOT EXISTS FOR (e:Entity) ON (e.group_id)` has no effect.} {description: `RANGE INDEX entity_group_id FOR (e:Entity) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX entity_group_id IF NOT EXISTS FOR (n:Entity) ON (n.group_id)'
2025-09-12 18:11:21,281 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX relation_uuid FOR ()-[e:RELATES_TO]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)'
2025-09-12 18:11:21,282 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_group_id IF NOT EXISTS FOR (e:Episodic) ON (e.group_id)` has no effect.} {description: `RANGE INDEX episode_group_id FOR (e:Episodic) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX episode_group_id IF NOT EXISTS FOR (n:Episodic) ON (n.group_id)'
2025-09-12 18:11:21,283 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX mention_group_id FOR ()-[e:MENTIONS]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)'
2025-09-12 18:11:21,283 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX relation_group_id FOR ()-[e:RELATES_TO]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)'
2025-09-12 18:11:21,284 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` has no effect.} {description: `RANGE INDEX invalid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` already exists.} {position: None} for query: 'CREATE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)'
2025-09-12 18:11:21,285 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_entity_index FOR (e:Entity) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.created_at)'
2025-09-12 18:11:21,285 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.name)` has no effect.} {description: `RANGE INDEX name_entity_index FOR (e:Entity) ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.name)'
2025-09-12 18:11:21,286 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX episode_content IF NOT EXISTS FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` has no effect.} {description: `FULLTEXT INDEX episode_content FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX episode_content IF NOT EXISTS \n            FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]'
2025-09-12 18:11:21,286 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_episodic_index FOR (e:Episodic) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.created_at)'
2025-09-12 18:11:21,288 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_episodic_index FOR (e:Episodic) ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.valid_at)'
2025-09-12 18:11:21,288 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)` has no effect.} {description: `RANGE INDEX name_edge_index FOR ()-[e:RELATES_TO]-() ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)'
2025-09-12 18:11:21,289 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` has no effect.} {description: `FULLTEXT INDEX node_name_and_summary FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS \n            FOR (n:Entity) ON EACH [n.name, n.summary, n.group_id]'
2025-09-12 18:11:21,289 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)'
2025-09-12 18:11:21,289 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX community_name IF NOT EXISTS FOR (e:Community) ON EACH [e.name, e.group_id]` has no effect.} {description: `FULLTEXT INDEX community_name FOR (e:Community) ON EACH [e.name, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX community_name IF NOT EXISTS \n            FOR (n:Community) ON EACH [n.name, n.group_id]'
2025-09-12 18:11:21,289 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` has no effect.} {description: `RANGE INDEX expired_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` already exists.} {position: None} for query: 'CREATE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)'
2025-09-12 18:11:21,290 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` has no effect.} {description: `FULLTEXT INDEX edge_name_and_fact FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS \n            FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]'
2025-09-12 18:11:21,290 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)'
2025-09-12 18:11:21,290 - tenant_graphiti_client - INFO - TenantGraphitiClient initialized successfully with LLM: gemini-2.0-flash-thinking-exp-1219
2025-09-12 18:11:57,774 - auth_middleware - INFO - Created access token for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 18:12:56,222 - multi_tenant_agent - INFO - Using comprehensive system prompt for intelligent tool routing
2025-09-12 18:12:56,270 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 18:12:56,313 - multi_tenant_agent - INFO - Created multi-tenant agent with model: gemini-2.0-flash-thinking-exp-1219
2025-09-12 18:12:56,318 - multi_tenant_agent - INFO - Successfully registered tenant-aware tools
2025-09-12 18:12:56,319 - multi_tenant_agent - INFO - 🧠 Starting chat processing for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 18:12:56,319 - multi_tenant_agent - INFO - 📝 User query: Hi! Can you tell me about how aanya sharma coffee shop prefernces changed over time?
2025-09-12 18:12:56,319 - multi_tenant_agent - INFO - 🤖 Running agent with model gemini-2.0-flash-thinking-exp-1219
2025-09-12 18:12:56,320 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 18:13:00,027 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 18:13:00,031 - multi_tenant_agent - INFO - 🔍 Local dual search for tenant 496970e9-d66c-402c-8628-bfb2ce86f235: aanya sharma coffee shop preferences over time
2025-09-12 18:13:00,031 - multi_tenant_agent - INFO - 🔍 Vector search for tenant 496970e9-d66c-402c-8628-bfb2ce86f235: aanya sharma coffee shop preferences over time
2025-09-12 18:13:06,309 - multi_tenant_agent - INFO - ✅ Vector search returned 4 results for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 18:13:06,310 - multi_tenant_agent - INFO - 🔍 Graph search for tenant 496970e9-d66c-402c-8628-bfb2ce86f235: aanya sharma coffee shop preferences over time
2025-09-12 18:13:08,121 - tenant_graphiti_client - INFO - Graph search for tenant 496970e9-d66c-402c-8628-bfb2ce86f235 (namespace: tenant_496970e9-d66c-402c-8628-bfb2ce86f235) returned 10 results
2025-09-12 18:13:08,121 - multi_tenant_agent - INFO - ✅ Graph search returned 10 results for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 18:13:08,121 - multi_tenant_agent - INFO - ✅ Local dual search returned 9 combined results
2025-09-12 18:13:08,122 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 18:13:10,920 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 18:13:10,923 - multi_tenant_agent - INFO - ✅ Agent completed processing for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 18:13:10,924 - multi_tenant_agent - INFO - 🔍 Extracting tool usage from agent messages
2025-09-12 18:13:10,924 - multi_tenant_agent - INFO - Found 4 messages to analyze
2025-09-12 18:13:10,924 - multi_tenant_agent - INFO - Message 0: <class 'pydantic_ai.messages.ModelRequest'>, attributes: ['instructions', 'kind', 'parts', 'user_text_prompt']
2025-09-12 18:13:10,924 - multi_tenant_agent - INFO - Message 1: <class 'pydantic_ai.messages.ModelResponse'>, attributes: ['cost', 'kind', 'model_name', 'otel_events', 'otel_message_parts', 'parts', 'price', 'provider_details', 'provider_name', 'provider_request_id', 'provider_response_id', 'timestamp', 'usage', 'vendor_details', 'vendor_id']
2025-09-12 18:13:10,924 - multi_tenant_agent - INFO - Message 2: <class 'pydantic_ai.messages.ModelRequest'>, attributes: ['instructions', 'kind', 'parts', 'user_text_prompt']
2025-09-12 18:13:10,924 - multi_tenant_agent - INFO - Message 3: <class 'pydantic_ai.messages.ModelResponse'>, attributes: ['cost', 'kind', 'model_name', 'otel_events', 'otel_message_parts', 'parts', 'price', 'provider_details', 'provider_name', 'provider_request_id', 'provider_response_id', 'timestamp', 'usage', 'vendor_details', 'vendor_id']
2025-09-12 18:13:10,925 - multi_tenant_agent - INFO - 📊 Extracted 0 tools and 0 sources
2025-09-12 18:13:10,925 - multi_tenant_agent - INFO - 📊 Using tracked tools: ['Vector Search', 'Knowledge Graph Search', 'Dual Storage Search']
2025-09-12 18:13:10,925 - multi_tenant_agent - INFO - 📊 Using tracked sources: 5 sources
2025-09-12 18:13:10,925 - multi_tenant_agent - INFO - 📊 Final result: 3 tools, 2 unique sources
2025-09-12 18:15:57,225 - multi_tenant_agent - INFO - Using comprehensive system prompt for intelligent tool routing
2025-09-12 18:15:57,268 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 18:15:57,312 - multi_tenant_agent - INFO - Created multi-tenant agent with model: gemini-2.0-flash-thinking-exp-1219
2025-09-12 18:15:57,315 - multi_tenant_agent - INFO - Successfully registered tenant-aware tools
2025-09-12 18:15:57,315 - multi_tenant_agent - INFO - 🧠 Starting chat processing for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 18:15:57,315 - multi_tenant_agent - INFO - 📝 User query: Hi! Use vector search and answer this : How aanya sharma phone preferences
2025-09-12 18:15:57,316 - multi_tenant_agent - INFO - 🤖 Running agent with model gemini-2.0-flash-thinking-exp-1219
2025-09-12 18:15:57,317 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 18:15:58,755 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 18:15:58,762 - multi_tenant_agent - INFO - 🔍 Vector search for tenant 496970e9-d66c-402c-8628-bfb2ce86f235: Aanya Sharma phone preferences
2025-09-12 18:16:04,590 - multi_tenant_agent - INFO - ✅ Vector search returned 4 results for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 18:16:04,591 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 18:16:06,169 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 18:16:06,175 - multi_tenant_agent - INFO - ✅ Agent completed processing for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 18:16:06,175 - multi_tenant_agent - INFO - 🔍 Extracting tool usage from agent messages
2025-09-12 18:16:06,175 - multi_tenant_agent - INFO - Found 4 messages to analyze
2025-09-12 18:16:06,175 - multi_tenant_agent - INFO - Message 0: <class 'pydantic_ai.messages.ModelRequest'>, attributes: ['instructions', 'kind', 'parts', 'user_text_prompt']
2025-09-12 18:16:06,176 - multi_tenant_agent - INFO - Message 1: <class 'pydantic_ai.messages.ModelResponse'>, attributes: ['cost', 'kind', 'model_name', 'otel_events', 'otel_message_parts', 'parts', 'price', 'provider_details', 'provider_name', 'provider_request_id', 'provider_response_id', 'timestamp', 'usage', 'vendor_details', 'vendor_id']
2025-09-12 18:16:06,176 - multi_tenant_agent - INFO - Message 2: <class 'pydantic_ai.messages.ModelRequest'>, attributes: ['instructions', 'kind', 'parts', 'user_text_prompt']
2025-09-12 18:16:06,176 - multi_tenant_agent - INFO - Message 3: <class 'pydantic_ai.messages.ModelResponse'>, attributes: ['cost', 'kind', 'model_name', 'otel_events', 'otel_message_parts', 'parts', 'price', 'provider_details', 'provider_name', 'provider_request_id', 'provider_response_id', 'timestamp', 'usage', 'vendor_details', 'vendor_id']
2025-09-12 18:16:06,176 - multi_tenant_agent - INFO - 📊 Extracted 0 tools and 0 sources
2025-09-12 18:16:06,177 - multi_tenant_agent - INFO - 📊 Final result: 1 tools, 0 unique sources
2025-09-12 18:18:08,865 - multi_tenant_agent - INFO - Using comprehensive system prompt for intelligent tool routing
2025-09-12 18:18:08,906 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 18:18:08,950 - multi_tenant_agent - INFO - Created multi-tenant agent with model: gemini-2.0-flash-thinking-exp-1219
2025-09-12 18:18:08,952 - multi_tenant_agent - INFO - Successfully registered tenant-aware tools
2025-09-12 18:18:08,952 - multi_tenant_agent - INFO - 🧠 Starting chat processing for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 18:18:08,952 - multi_tenant_agent - INFO - 📝 User query: Hi! Use graph search only and answer this: How Aanya Sharma's phone preferences have
2025-09-12 18:18:08,952 - multi_tenant_agent - INFO - 🤖 Running agent with model gemini-2.0-flash-thinking-exp-1219
2025-09-12 18:18:08,953 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 18:18:10,240 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 18:18:10,245 - multi_tenant_agent - INFO - 🔍 Graph search for tenant 496970e9-d66c-402c-8628-bfb2ce86f235: Aanya Sharma's phone preferences
2025-09-12 18:18:10,913 - tenant_graphiti_client - INFO - Graph search for tenant 496970e9-d66c-402c-8628-bfb2ce86f235 (namespace: tenant_496970e9-d66c-402c-8628-bfb2ce86f235) returned 10 results
2025-09-12 18:18:10,914 - multi_tenant_agent - INFO - ✅ Graph search returned 10 results for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 18:18:10,916 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 18:18:13,411 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 18:18:13,413 - multi_tenant_agent - INFO - ✅ Agent completed processing for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 18:18:13,413 - multi_tenant_agent - INFO - 🔍 Extracting tool usage from agent messages
2025-09-12 18:18:13,414 - multi_tenant_agent - INFO - Found 4 messages to analyze
2025-09-12 18:18:13,414 - multi_tenant_agent - INFO - Message 0: <class 'pydantic_ai.messages.ModelRequest'>, attributes: ['instructions', 'kind', 'parts', 'user_text_prompt']
2025-09-12 18:18:13,414 - multi_tenant_agent - INFO - Message 1: <class 'pydantic_ai.messages.ModelResponse'>, attributes: ['cost', 'kind', 'model_name', 'otel_events', 'otel_message_parts', 'parts', 'price', 'provider_details', 'provider_name', 'provider_request_id', 'provider_response_id', 'timestamp', 'usage', 'vendor_details', 'vendor_id']
2025-09-12 18:18:13,414 - multi_tenant_agent - INFO - Message 2: <class 'pydantic_ai.messages.ModelRequest'>, attributes: ['instructions', 'kind', 'parts', 'user_text_prompt']
2025-09-12 18:18:13,414 - multi_tenant_agent - INFO - Message 3: <class 'pydantic_ai.messages.ModelResponse'>, attributes: ['cost', 'kind', 'model_name', 'otel_events', 'otel_message_parts', 'parts', 'price', 'provider_details', 'provider_name', 'provider_request_id', 'provider_response_id', 'timestamp', 'usage', 'vendor_details', 'vendor_id']
2025-09-12 18:18:13,414 - multi_tenant_agent - INFO - 📊 Extracted 0 tools and 0 sources
2025-09-12 18:18:13,414 - multi_tenant_agent - INFO - 📊 Final result: 1 tools, 0 unique sources
2025-09-12 18:23:48,243 - interactive_multi_tenant_api - INFO - Shutting down Multi-Tenant RAG API...
2025-09-12 18:23:54,623 - __main__ - INFO - Starting Interactive Multi-Tenant RAG API on 127.0.0.1:8000
2025-09-12 18:23:54,650 - interactive_multi_tenant_api - INFO - Starting Multi-Tenant RAG API...
2025-09-12 18:23:54,650 - interactive_multi_tenant_api - INFO - Neo4j URI: neo4j://127.0.0.1:7687
2025-09-12 18:23:54,650 - interactive_multi_tenant_api - INFO - Neo4j User: neo4j
2025-09-12 18:23:54,650 - interactive_multi_tenant_api - INFO - Neo4j Password: ***
2025-09-12 18:23:54,650 - tenant_manager - INFO - TenantManager initialized with Graphiti client
2025-09-12 18:23:54,650 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 18:23:54,650 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-09-12 18:23:54,650 - multi_tenant_ingestion - INFO - Multi-tenant ingestion pipeline initialized
2025-09-12 18:23:54,650 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-09-12 18:23:54,650 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-09-12 18:23:54,650 - interactive_multi_tenant_api - INFO - Tenant manager initialized
2025-09-12 18:23:54,653 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 18:23:54,653 - interactive_multi_tenant_api - INFO - Tenant ingestion service initialized
2025-09-12 18:23:54,653 - auth_middleware - INFO - JWT Authenticator initialized
2025-09-12 18:23:54,653 - interactive_multi_tenant_api - INFO - JWT authenticator initialized
2025-09-12 18:23:54,653 - interactive_multi_tenant_api - INFO - 🎯 Multi-Tenant RAG API ready - all backend logs will appear in this terminal
2025-09-12 18:23:54,654 - interactive_multi_tenant_api - INFO - 📊 Backend activity from CLI and API operations will be shown below:
2025-09-12 18:24:12,425 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-09-12 18:24:12,586 - catalog_database - INFO - Catalog database connection test successful
2025-09-12 18:24:12,587 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 18:24:12,678 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 18:24:12,729 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 18:24:12,833 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX mention_uuid FOR ()-[e:MENTIONS]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)'
2025-09-12 18:24:12,833 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX has_member_uuid FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)'
2025-09-12 18:24:12,833 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX community_uuid IF NOT EXISTS FOR (e:Community) ON (e.uuid)` has no effect.} {description: `RANGE INDEX community_uuid FOR (e:Community) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX community_uuid IF NOT EXISTS FOR (n:Community) ON (n.uuid)'
2025-09-12 18:24:12,834 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_uuid IF NOT EXISTS FOR (e:Episodic) ON (e.uuid)` has no effect.} {description: `RANGE INDEX episode_uuid FOR (e:Episodic) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX episode_uuid IF NOT EXISTS FOR (n:Episodic) ON (n.uuid)'
2025-09-12 18:24:12,834 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX relation_uuid FOR ()-[e:RELATES_TO]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)'
2025-09-12 18:24:12,834 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_uuid IF NOT EXISTS FOR (e:Entity) ON (e.uuid)` has no effect.} {description: `RANGE INDEX entity_uuid FOR (e:Entity) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX entity_uuid IF NOT EXISTS FOR (n:Entity) ON (n.uuid)'
2025-09-12 18:24:12,834 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_group_id IF NOT EXISTS FOR (e:Entity) ON (e.group_id)` has no effect.} {description: `RANGE INDEX entity_group_id FOR (e:Entity) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX entity_group_id IF NOT EXISTS FOR (n:Entity) ON (n.group_id)'
2025-09-12 18:24:12,838 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_group_id IF NOT EXISTS FOR (e:Episodic) ON (e.group_id)` has no effect.} {description: `RANGE INDEX episode_group_id FOR (e:Episodic) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX episode_group_id IF NOT EXISTS FOR (n:Episodic) ON (n.group_id)'
2025-09-12 18:24:12,838 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.name)` has no effect.} {description: `RANGE INDEX name_entity_index FOR (e:Entity) ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.name)'
2025-09-12 18:24:12,841 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX mention_group_id FOR ()-[e:MENTIONS]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)'
2025-09-12 18:24:12,841 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` has no effect.} {description: `FULLTEXT INDEX node_name_and_summary FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS \n            FOR (n:Entity) ON EACH [n.name, n.summary, n.group_id]'
2025-09-12 18:24:12,841 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX episode_content IF NOT EXISTS FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` has no effect.} {description: `FULLTEXT INDEX episode_content FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX episode_content IF NOT EXISTS \n            FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]'
2025-09-12 18:24:12,841 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` has no effect.} {description: `FULLTEXT INDEX edge_name_and_fact FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS \n            FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]'
2025-09-12 18:24:12,842 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX community_name IF NOT EXISTS FOR (e:Community) ON EACH [e.name, e.group_id]` has no effect.} {description: `FULLTEXT INDEX community_name FOR (e:Community) ON EACH [e.name, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX community_name IF NOT EXISTS \n            FOR (n:Community) ON EACH [n.name, n.group_id]'
2025-09-12 18:24:12,842 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX relation_group_id FOR ()-[e:RELATES_TO]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)'
2025-09-12 18:24:12,843 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_episodic_index FOR (e:Episodic) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.created_at)'
2025-09-12 18:24:12,843 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_entity_index FOR (e:Entity) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.created_at)'
2025-09-12 18:24:12,845 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)` has no effect.} {description: `RANGE INDEX name_edge_index FOR ()-[e:RELATES_TO]-() ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)'
2025-09-12 18:24:12,846 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_episodic_index FOR (e:Episodic) ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.valid_at)'
2025-09-12 18:24:12,847 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)'
2025-09-12 18:24:12,848 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` has no effect.} {description: `RANGE INDEX expired_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` already exists.} {position: None} for query: 'CREATE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)'
2025-09-12 18:24:12,849 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)'
2025-09-12 18:24:12,849 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` has no effect.} {description: `RANGE INDEX invalid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` already exists.} {position: None} for query: 'CREATE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)'
2025-09-12 18:24:12,849 - tenant_graphiti_client - INFO - TenantGraphitiClient initialized successfully with LLM: gemini-2.0-flash-thinking-exp-1219
2025-09-12 18:24:59,327 - auth_middleware - INFO - Created access token for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 18:26:16,889 - multi_tenant_agent - INFO - Using comprehensive system prompt for intelligent tool routing
2025-09-12 18:26:16,939 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 18:26:16,981 - multi_tenant_agent - INFO - Created multi-tenant agent with model: gemini-2.0-flash-thinking-exp-1219
2025-09-12 18:26:16,987 - multi_tenant_agent - INFO - Successfully registered tenant-aware tools
2025-09-12 18:26:16,987 - multi_tenant_agent - INFO - 🧠 Starting chat processing for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 18:26:16,987 - multi_tenant_agent - INFO - 📝 User query: Hi! Tell me how aanya sharma phone preferences changed over time and wat was the reason for various ...
2025-09-12 18:26:16,987 - multi_tenant_agent - INFO - 🤖 Running agent with model gemini-2.0-flash-thinking-exp-1219
2025-09-12 18:26:16,989 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 18:26:19,615 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 18:26:19,620 - multi_tenant_agent - INFO - 🔍 Local dual search for tenant 496970e9-d66c-402c-8628-bfb2ce86f235: aanya sharma phone preferences changed over time and what was the reason for various changes
2025-09-12 18:26:19,620 - multi_tenant_agent - INFO - 🔍 Vector search for tenant 496970e9-d66c-402c-8628-bfb2ce86f235: aanya sharma phone preferences changed over time and what was the reason for various changes
2025-09-12 18:26:25,875 - multi_tenant_agent - INFO - ✅ Vector search returned 4 results for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 18:26:25,875 - multi_tenant_agent - INFO - 🔍 Graph search for tenant 496970e9-d66c-402c-8628-bfb2ce86f235: aanya sharma phone preferences changed over time and what was the reason for various changes
2025-09-12 18:26:26,446 - tenant_graphiti_client - INFO - Graph search for tenant 496970e9-d66c-402c-8628-bfb2ce86f235 (namespace: tenant_496970e9-d66c-402c-8628-bfb2ce86f235) returned 10 results
2025-09-12 18:26:26,446 - multi_tenant_agent - INFO - ✅ Graph search returned 10 results for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 18:26:26,446 - multi_tenant_agent - INFO - ✅ Local dual search returned 9 combined results
2025-09-12 18:26:26,447 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 18:26:29,341 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 18:26:29,344 - multi_tenant_agent - INFO - ✅ Agent completed processing for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 18:26:29,344 - multi_tenant_agent - INFO - 🔍 Extracting tool usage from agent messages
2025-09-12 18:26:29,344 - multi_tenant_agent - INFO - Found 4 messages to analyze
2025-09-12 18:26:29,344 - multi_tenant_agent - INFO - Message 0: <class 'pydantic_ai.messages.ModelRequest'>, attributes: ['instructions', 'kind', 'parts', 'user_text_prompt']
2025-09-12 18:26:29,344 - multi_tenant_agent - INFO - Message 1: <class 'pydantic_ai.messages.ModelResponse'>, attributes: ['cost', 'kind', 'model_name', 'otel_events', 'otel_message_parts', 'parts', 'price', 'provider_details', 'provider_name', 'provider_request_id', 'provider_response_id', 'timestamp', 'usage', 'vendor_details', 'vendor_id']
2025-09-12 18:26:29,344 - multi_tenant_agent - INFO - Message 2: <class 'pydantic_ai.messages.ModelRequest'>, attributes: ['instructions', 'kind', 'parts', 'user_text_prompt']
2025-09-12 18:26:29,344 - multi_tenant_agent - INFO - Message 3: <class 'pydantic_ai.messages.ModelResponse'>, attributes: ['cost', 'kind', 'model_name', 'otel_events', 'otel_message_parts', 'parts', 'price', 'provider_details', 'provider_name', 'provider_request_id', 'provider_response_id', 'timestamp', 'usage', 'vendor_details', 'vendor_id']
2025-09-12 18:26:29,344 - multi_tenant_agent - INFO - 📊 Extracted 0 tools and 0 sources
2025-09-12 18:26:29,344 - multi_tenant_agent - INFO - 📊 Using tracked tools: ['Vector Search', 'Knowledge Graph Search', 'Dual Storage Search']
2025-09-12 18:26:29,344 - multi_tenant_agent - INFO - 📊 Using tracked sources: 5 sources
2025-09-12 18:26:29,344 - multi_tenant_agent - INFO - 📊 Final result: 3 tools, 2 unique sources
2025-09-12 18:28:29,767 - multi_tenant_agent - INFO - Using comprehensive system prompt for intelligent tool routing
2025-09-12 18:28:29,790 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 18:28:29,826 - multi_tenant_agent - INFO - Created multi-tenant agent with model: gemini-2.0-flash-thinking-exp-1219
2025-09-12 18:28:29,829 - multi_tenant_agent - INFO - Successfully registered tenant-aware tools
2025-09-12 18:28:29,829 - multi_tenant_agent - INFO - 🧠 Starting chat processing for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 18:28:29,829 - multi_tenant_agent - INFO - 📝 User query: Use vector search only and Tell me how aanya sharmacoffee shop  preferences changed over time and wh...
2025-09-12 18:28:29,829 - multi_tenant_agent - INFO - 🤖 Running agent with model gemini-2.0-flash-thinking-exp-1219
2025-09-12 18:28:29,831 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 18:28:31,300 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 18:28:31,302 - multi_tenant_agent - INFO - 🔍 Vector search for tenant 496970e9-d66c-402c-8628-bfb2ce86f235: Aanya Sharma coffee shop preferences changed over time and the reason for various changes
2025-09-12 18:28:38,160 - multi_tenant_agent - INFO - ✅ Vector search returned 4 results for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 18:28:38,161 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 18:28:40,823 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 18:28:40,824 - multi_tenant_agent - INFO - ✅ Agent completed processing for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 18:28:40,824 - multi_tenant_agent - INFO - 🔍 Extracting tool usage from agent messages
2025-09-12 18:28:40,824 - multi_tenant_agent - INFO - Found 4 messages to analyze
2025-09-12 18:28:40,824 - multi_tenant_agent - INFO - Message 0: <class 'pydantic_ai.messages.ModelRequest'>, attributes: ['instructions', 'kind', 'parts', 'user_text_prompt']
2025-09-12 18:28:40,824 - multi_tenant_agent - INFO - Message 1: <class 'pydantic_ai.messages.ModelResponse'>, attributes: ['cost', 'kind', 'model_name', 'otel_events', 'otel_message_parts', 'parts', 'price', 'provider_details', 'provider_name', 'provider_request_id', 'provider_response_id', 'timestamp', 'usage', 'vendor_details', 'vendor_id']
2025-09-12 18:28:40,824 - multi_tenant_agent - INFO - Message 2: <class 'pydantic_ai.messages.ModelRequest'>, attributes: ['instructions', 'kind', 'parts', 'user_text_prompt']
2025-09-12 18:28:40,825 - multi_tenant_agent - INFO - Message 3: <class 'pydantic_ai.messages.ModelResponse'>, attributes: ['cost', 'kind', 'model_name', 'otel_events', 'otel_message_parts', 'parts', 'price', 'provider_details', 'provider_name', 'provider_request_id', 'provider_response_id', 'timestamp', 'usage', 'vendor_details', 'vendor_id']
2025-09-12 18:28:40,825 - multi_tenant_agent - INFO - 📊 Extracted 0 tools and 0 sources
2025-09-12 18:28:40,825 - multi_tenant_agent - INFO - 📊 Final result: 1 tools, 0 unique sources
2025-09-12 18:29:29,646 - multi_tenant_agent - INFO - Using comprehensive system prompt for intelligent tool routing
2025-09-12 18:29:29,664 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 18:29:29,701 - multi_tenant_agent - INFO - Created multi-tenant agent with model: gemini-2.0-flash-thinking-exp-1219
2025-09-12 18:29:29,703 - multi_tenant_agent - INFO - Successfully registered tenant-aware tools
2025-09-12 18:29:29,703 - multi_tenant_agent - INFO - 🧠 Starting chat processing for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 18:29:29,703 - multi_tenant_agent - INFO - 📝 User query: Use grapgh search and Tell me how aanya sharma phone preferences changed over time and what was the ...
2025-09-12 18:29:29,703 - multi_tenant_agent - INFO - 🤖 Running agent with model gemini-2.0-flash-thinking-exp-1219
2025-09-12 18:29:29,704 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 18:29:32,517 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 18:29:32,518 - multi_tenant_agent - INFO - 🔍 Graph search for tenant 496970e9-d66c-402c-8628-bfb2ce86f235: Aanya Sharma phone preferences over time and reasons for changes
2025-09-12 18:29:33,075 - tenant_graphiti_client - INFO - Graph search for tenant 496970e9-d66c-402c-8628-bfb2ce86f235 (namespace: tenant_496970e9-d66c-402c-8628-bfb2ce86f235) returned 10 results
2025-09-12 18:29:33,075 - multi_tenant_agent - INFO - ✅ Graph search returned 10 results for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 18:29:33,075 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 18:29:36,247 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 18:29:36,248 - multi_tenant_agent - INFO - ✅ Agent completed processing for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 18:29:36,249 - multi_tenant_agent - INFO - 🔍 Extracting tool usage from agent messages
2025-09-12 18:29:36,249 - multi_tenant_agent - INFO - Found 4 messages to analyze
2025-09-12 18:29:36,249 - multi_tenant_agent - INFO - Message 0: <class 'pydantic_ai.messages.ModelRequest'>, attributes: ['instructions', 'kind', 'parts', 'user_text_prompt']
2025-09-12 18:29:36,249 - multi_tenant_agent - INFO - Message 1: <class 'pydantic_ai.messages.ModelResponse'>, attributes: ['cost', 'kind', 'model_name', 'otel_events', 'otel_message_parts', 'parts', 'price', 'provider_details', 'provider_name', 'provider_request_id', 'provider_response_id', 'timestamp', 'usage', 'vendor_details', 'vendor_id']
2025-09-12 18:29:36,249 - multi_tenant_agent - INFO - Message 2: <class 'pydantic_ai.messages.ModelRequest'>, attributes: ['instructions', 'kind', 'parts', 'user_text_prompt']
2025-09-12 18:29:36,249 - multi_tenant_agent - INFO - Message 3: <class 'pydantic_ai.messages.ModelResponse'>, attributes: ['cost', 'kind', 'model_name', 'otel_events', 'otel_message_parts', 'parts', 'price', 'provider_details', 'provider_name', 'provider_request_id', 'provider_response_id', 'timestamp', 'usage', 'vendor_details', 'vendor_id']
2025-09-12 18:29:36,249 - multi_tenant_agent - INFO - 📊 Extracted 0 tools and 0 sources
2025-09-12 18:29:36,249 - multi_tenant_agent - INFO - 📊 Final result: 1 tools, 0 unique sources
2025-09-12 18:30:48,161 - multi_tenant_agent - INFO - Using comprehensive system prompt for intelligent tool routing
2025-09-12 18:30:48,208 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 18:30:48,253 - multi_tenant_agent - INFO - Created multi-tenant agent with model: gemini-2.0-flash-thinking-exp-1219
2025-09-12 18:30:48,255 - multi_tenant_agent - INFO - Successfully registered tenant-aware tools
2025-09-12 18:30:48,255 - multi_tenant_agent - INFO - 🧠 Starting chat processing for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 18:30:48,255 - multi_tenant_agent - INFO - 📝 User query: Use grapgh search and Tell me how aanya sharmacoffee shop  preferences changed over time and what wa...
2025-09-12 18:30:48,255 - multi_tenant_agent - INFO - 🤖 Running agent with model gemini-2.0-flash-thinking-exp-1219
2025-09-12 18:30:48,256 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 18:30:49,851 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 18:30:49,855 - multi_tenant_agent - INFO - 🔍 Graph search for tenant 496970e9-d66c-402c-8628-bfb2ce86f235: aanya sharmacoffee shop preferences changed over time and what was the reason for various changes
2025-09-12 18:30:50,521 - tenant_graphiti_client - INFO - Graph search for tenant 496970e9-d66c-402c-8628-bfb2ce86f235 (namespace: tenant_496970e9-d66c-402c-8628-bfb2ce86f235) returned 10 results
2025-09-12 18:30:50,522 - multi_tenant_agent - INFO - ✅ Graph search returned 10 results for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 18:30:50,522 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 18:30:54,254 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 18:30:54,256 - multi_tenant_agent - INFO - ✅ Agent completed processing for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 18:30:54,256 - multi_tenant_agent - INFO - 🔍 Extracting tool usage from agent messages
2025-09-12 18:30:54,256 - multi_tenant_agent - INFO - Found 4 messages to analyze
2025-09-12 18:30:54,256 - multi_tenant_agent - INFO - Message 0: <class 'pydantic_ai.messages.ModelRequest'>, attributes: ['instructions', 'kind', 'parts', 'user_text_prompt']
2025-09-12 18:30:54,256 - multi_tenant_agent - INFO - Message 1: <class 'pydantic_ai.messages.ModelResponse'>, attributes: ['cost', 'kind', 'model_name', 'otel_events', 'otel_message_parts', 'parts', 'price', 'provider_details', 'provider_name', 'provider_request_id', 'provider_response_id', 'timestamp', 'usage', 'vendor_details', 'vendor_id']
2025-09-12 18:30:54,256 - multi_tenant_agent - INFO - Message 2: <class 'pydantic_ai.messages.ModelRequest'>, attributes: ['instructions', 'kind', 'parts', 'user_text_prompt']
2025-09-12 18:30:54,256 - multi_tenant_agent - INFO - Message 3: <class 'pydantic_ai.messages.ModelResponse'>, attributes: ['cost', 'kind', 'model_name', 'otel_events', 'otel_message_parts', 'parts', 'price', 'provider_details', 'provider_name', 'provider_request_id', 'provider_response_id', 'timestamp', 'usage', 'vendor_details', 'vendor_id']
2025-09-12 18:30:54,256 - multi_tenant_agent - INFO - 📊 Extracted 0 tools and 0 sources
2025-09-12 18:30:54,256 - multi_tenant_agent - INFO - 📊 Final result: 1 tools, 0 unique sources
2025-09-12 18:33:13,650 - multi_tenant_agent - INFO - Using comprehensive system prompt for intelligent tool routing
2025-09-12 18:33:13,692 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 18:33:13,736 - multi_tenant_agent - INFO - Created multi-tenant agent with model: gemini-2.0-flash-thinking-exp-1219
2025-09-12 18:33:13,738 - multi_tenant_agent - INFO - Successfully registered tenant-aware tools
2025-09-12 18:33:13,739 - interactive_multi_tenant_api - ERROR - Search error for tenant 496970e9-d66c-402c-8628-bfb2ce86f235: 'MultiTenantRAGAgent' object has no attribute 'tenant_hybrid_search'
2025-09-12 18:51:02,374 - interactive_multi_tenant_api - INFO - Shutting down Multi-Tenant RAG API...
2025-09-12 18:51:07,966 - __main__ - INFO - Starting Interactive Multi-Tenant RAG API on 127.0.0.1:8000
2025-09-12 18:51:07,994 - interactive_multi_tenant_api - INFO - Starting Multi-Tenant RAG API...
2025-09-12 18:51:07,994 - interactive_multi_tenant_api - INFO - Neo4j URI: neo4j://127.0.0.1:7687
2025-09-12 18:51:07,994 - interactive_multi_tenant_api - INFO - Neo4j User: neo4j
2025-09-12 18:51:07,994 - interactive_multi_tenant_api - INFO - Neo4j Password: ***
2025-09-12 18:51:07,994 - tenant_manager - INFO - TenantManager initialized with Graphiti client
2025-09-12 18:51:07,994 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 18:51:07,994 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-09-12 18:51:07,994 - multi_tenant_ingestion - INFO - Multi-tenant ingestion pipeline initialized
2025-09-12 18:51:07,994 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-09-12 18:51:07,994 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-09-12 18:51:07,994 - interactive_multi_tenant_api - INFO - Tenant manager initialized
2025-09-12 18:51:07,997 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-12 18:51:07,997 - interactive_multi_tenant_api - INFO - Tenant ingestion service initialized
2025-09-12 18:51:07,997 - auth_middleware - INFO - JWT Authenticator initialized
2025-09-12 18:51:07,997 - interactive_multi_tenant_api - INFO - JWT authenticator initialized
2025-09-12 18:51:07,997 - interactive_multi_tenant_api - INFO - 🎯 Multi-Tenant RAG API ready - all backend logs will appear in this terminal
2025-09-12 18:51:07,997 - interactive_multi_tenant_api - INFO - 📊 Backend activity from CLI and API operations will be shown below:
2025-09-12 18:51:22,882 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-09-12 18:51:23,056 - catalog_database - INFO - Catalog database connection test successful
2025-09-12 18:51:23,057 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 18:51:23,145 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 18:51:23,194 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 18:51:23,287 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_uuid IF NOT EXISTS FOR (e:Entity) ON (e.uuid)` has no effect.} {description: `RANGE INDEX entity_uuid FOR (e:Entity) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX entity_uuid IF NOT EXISTS FOR (n:Entity) ON (n.uuid)'
2025-09-12 18:51:23,288 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX relation_uuid FOR ()-[e:RELATES_TO]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)'
2025-09-12 18:51:23,288 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_uuid IF NOT EXISTS FOR (e:Episodic) ON (e.uuid)` has no effect.} {description: `RANGE INDEX episode_uuid FOR (e:Episodic) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX episode_uuid IF NOT EXISTS FOR (n:Episodic) ON (n.uuid)'
2025-09-12 18:51:23,288 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX community_uuid IF NOT EXISTS FOR (e:Community) ON (e.uuid)` has no effect.} {description: `RANGE INDEX community_uuid FOR (e:Community) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX community_uuid IF NOT EXISTS FOR (n:Community) ON (n.uuid)'
2025-09-12 18:51:23,290 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX has_member_uuid FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)'
2025-09-12 18:51:23,290 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX mention_uuid FOR ()-[e:MENTIONS]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)'
2025-09-12 18:51:23,291 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_group_id IF NOT EXISTS FOR (e:Episodic) ON (e.group_id)` has no effect.} {description: `RANGE INDEX episode_group_id FOR (e:Episodic) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX episode_group_id IF NOT EXISTS FOR (n:Episodic) ON (n.group_id)'
2025-09-12 18:51:23,291 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_group_id IF NOT EXISTS FOR (e:Entity) ON (e.group_id)` has no effect.} {description: `RANGE INDEX entity_group_id FOR (e:Entity) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX entity_group_id IF NOT EXISTS FOR (n:Entity) ON (n.group_id)'
2025-09-12 18:51:23,295 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX relation_group_id FOR ()-[e:RELATES_TO]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)'
2025-09-12 18:51:23,295 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.name)` has no effect.} {description: `RANGE INDEX name_entity_index FOR (e:Entity) ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.name)'
2025-09-12 18:51:23,295 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX mention_group_id FOR ()-[e:MENTIONS]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)'
2025-09-12 18:51:23,296 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` has no effect.} {description: `FULLTEXT INDEX edge_name_and_fact FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS \n            FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]'
2025-09-12 18:51:23,297 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` has no effect.} {description: `FULLTEXT INDEX node_name_and_summary FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS \n            FOR (n:Entity) ON EACH [n.name, n.summary, n.group_id]'
2025-09-12 18:51:23,297 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX community_name IF NOT EXISTS FOR (e:Community) ON EACH [e.name, e.group_id]` has no effect.} {description: `FULLTEXT INDEX community_name FOR (e:Community) ON EACH [e.name, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX community_name IF NOT EXISTS \n            FOR (n:Community) ON EACH [n.name, n.group_id]'
2025-09-12 18:51:23,297 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_episodic_index FOR (e:Episodic) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.created_at)'
2025-09-12 18:51:23,297 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_entity_index FOR (e:Entity) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.created_at)'
2025-09-12 18:51:23,298 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_episodic_index FOR (e:Episodic) ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.valid_at)'
2025-09-12 18:51:23,298 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)` has no effect.} {description: `RANGE INDEX name_edge_index FOR ()-[e:RELATES_TO]-() ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)'
2025-09-12 18:51:23,300 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` has no effect.} {description: `RANGE INDEX expired_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` already exists.} {position: None} for query: 'CREATE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)'
2025-09-12 18:51:23,300 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)'
2025-09-12 18:51:23,301 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)'
2025-09-12 18:51:23,301 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` has no effect.} {description: `RANGE INDEX invalid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` already exists.} {position: None} for query: 'CREATE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)'
2025-09-12 18:51:23,301 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX episode_content IF NOT EXISTS FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` has no effect.} {description: `FULLTEXT INDEX episode_content FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX episode_content IF NOT EXISTS \n            FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]'
2025-09-12 18:51:23,302 - tenant_graphiti_client - INFO - TenantGraphitiClient initialized successfully with LLM: gemini-2.0-flash-thinking-exp-1219
2025-09-12 18:52:14,903 - auth_middleware - INFO - Created access token for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 18:53:06,655 - multi_tenant_agent - INFO - Using comprehensive system prompt for intelligent tool routing
2025-09-12 18:53:06,703 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 18:53:06,746 - multi_tenant_agent - INFO - Created multi-tenant agent with model: gemini-2.0-flash-thinking-exp-1219
2025-09-12 18:53:06,753 - multi_tenant_agent - INFO - Successfully registered tenant-aware tools
2025-09-12 18:55:24,685 - multi_tenant_agent - INFO - Using comprehensive system prompt for intelligent tool routing
2025-09-12 18:55:24,729 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 18:55:24,775 - multi_tenant_agent - INFO - Created multi-tenant agent with model: gemini-2.0-flash-thinking-exp-1219
2025-09-12 18:55:24,778 - multi_tenant_agent - INFO - Successfully registered tenant-aware tools
2025-09-12 18:55:24,778 - interactive_multi_tenant_api - ERROR - Graph search failed: 'TenantGraphitiClient' object has no attribute 'search'
2025-09-12 18:55:55,942 - multi_tenant_agent - INFO - Using comprehensive system prompt for intelligent tool routing
2025-09-12 18:55:55,986 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 18:55:56,031 - multi_tenant_agent - INFO - Created multi-tenant agent with model: gemini-2.0-flash-thinking-exp-1219
2025-09-12 18:55:56,033 - multi_tenant_agent - INFO - Successfully registered tenant-aware tools
2025-09-12 18:58:10,485 - auth_middleware - INFO - Created access token for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 18:58:59,632 - multi_tenant_agent - INFO - Using comprehensive system prompt for intelligent tool routing
2025-09-12 18:58:59,677 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-12 18:58:59,723 - multi_tenant_agent - INFO - Created multi-tenant agent with model: gemini-2.0-flash-thinking-exp-1219
2025-09-12 18:58:59,730 - multi_tenant_agent - INFO - Successfully registered tenant-aware tools
2025-09-12 18:58:59,730 - multi_tenant_agent - INFO - 🧠 Starting chat processing for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 18:58:59,730 - multi_tenant_agent - INFO - 📝 User query: How Aanya sharma is related to Rahul Mehta?
2025-09-12 18:58:59,730 - multi_tenant_agent - INFO - 🤖 Running agent with model gemini-2.0-flash-thinking-exp-1219
2025-09-12 18:58:59,740 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 18:59:01,108 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 18:59:01,116 - multi_tenant_agent - INFO - 🔍 Local dual search for tenant 496970e9-d66c-402c-8628-bfb2ce86f235: How Aanya sharma is related to Rahul Mehta?
2025-09-12 18:59:01,116 - multi_tenant_agent - INFO - 🔍 Vector search for tenant 496970e9-d66c-402c-8628-bfb2ce86f235: How Aanya sharma is related to Rahul Mehta?
2025-09-12 18:59:07,761 - multi_tenant_agent - INFO - ✅ Vector search returned 4 results for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 18:59:07,762 - multi_tenant_agent - INFO - 🔍 Graph search for tenant 496970e9-d66c-402c-8628-bfb2ce86f235: How Aanya sharma is related to Rahul Mehta?
2025-09-12 18:59:09,521 - tenant_graphiti_client - INFO - Graph search for tenant 496970e9-d66c-402c-8628-bfb2ce86f235 (namespace: tenant_496970e9-d66c-402c-8628-bfb2ce86f235) returned 10 results
2025-09-12 18:59:09,521 - multi_tenant_agent - INFO - ✅ Graph search returned 10 results for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 18:59:09,521 - multi_tenant_agent - INFO - ✅ Local dual search returned 9 combined results
2025-09-12 18:59:09,522 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-12 18:59:12,063 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-12 18:59:12,067 - multi_tenant_agent - INFO - ✅ Agent completed processing for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-12 18:59:12,068 - multi_tenant_agent - INFO - 🔍 Extracting tool usage from agent messages
2025-09-12 18:59:12,068 - multi_tenant_agent - INFO - Found 4 messages to analyze
2025-09-12 18:59:12,068 - multi_tenant_agent - INFO - Message 0: <class 'pydantic_ai.messages.ModelRequest'>, attributes: ['instructions', 'kind', 'parts', 'user_text_prompt']
2025-09-12 18:59:12,068 - multi_tenant_agent - INFO - Message 1: <class 'pydantic_ai.messages.ModelResponse'>, attributes: ['cost', 'kind', 'model_name', 'otel_events', 'otel_message_parts', 'parts', 'price', 'provider_details', 'provider_name', 'provider_request_id', 'provider_response_id', 'timestamp', 'usage', 'vendor_details', 'vendor_id']
2025-09-12 18:59:12,069 - multi_tenant_agent - INFO - Message 2: <class 'pydantic_ai.messages.ModelRequest'>, attributes: ['instructions', 'kind', 'parts', 'user_text_prompt']
2025-09-12 18:59:12,069 - multi_tenant_agent - INFO - Message 3: <class 'pydantic_ai.messages.ModelResponse'>, attributes: ['cost', 'kind', 'model_name', 'otel_events', 'otel_message_parts', 'parts', 'price', 'provider_details', 'provider_name', 'provider_request_id', 'provider_response_id', 'timestamp', 'usage', 'vendor_details', 'vendor_id']
2025-09-12 18:59:12,069 - multi_tenant_agent - INFO - 📊 Extracted 0 tools and 0 sources
2025-09-12 18:59:12,070 - multi_tenant_agent - INFO - 📊 Using tracked tools: ['Vector Search', 'Knowledge Graph Search', 'Dual Storage Search']
2025-09-12 18:59:12,070 - multi_tenant_agent - INFO - 📊 Using tracked sources: 5 sources
2025-09-12 18:59:12,070 - multi_tenant_agent - INFO - 📊 Final result: 3 tools, 2 unique sources
2025-09-14 19:26:25,287 - auth_middleware - WARNING - JWT verification failed: Signature has expired.
2025-09-14 19:26:25,288 - auth_middleware - ERROR - Failed to decode token: Signature has expired.
2025-09-14 19:26:25,288 - interactive_multi_tenant_api - ERROR - JWT validation error: Signature has expired.
2025-09-14 19:26:50,230 - auth_middleware - WARNING - JWT verification failed: Signature has expired.
2025-09-14 19:26:50,232 - auth_middleware - ERROR - Failed to decode token: Signature has expired.
2025-09-14 19:26:50,232 - interactive_multi_tenant_api - ERROR - JWT validation error: Signature has expired.
2025-09-14 19:26:57,608 - interactive_multi_tenant_api - INFO - Shutting down Multi-Tenant RAG API...
2025-09-14 19:27:02,061 - __main__ - INFO - Starting Interactive Multi-Tenant RAG API on 127.0.0.1:8000
2025-09-14 19:27:02,103 - interactive_multi_tenant_api - INFO - Starting Multi-Tenant RAG API...
2025-09-14 19:27:02,103 - interactive_multi_tenant_api - INFO - Neo4j URI: neo4j://127.0.0.1:7687
2025-09-14 19:27:02,103 - interactive_multi_tenant_api - INFO - Neo4j User: neo4j
2025-09-14 19:27:02,103 - interactive_multi_tenant_api - INFO - Neo4j Password: ***
2025-09-14 19:27:02,103 - tenant_manager - INFO - TenantManager initialized with Graphiti client
2025-09-14 19:27:02,103 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-14 19:27:02,103 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-09-14 19:27:02,103 - multi_tenant_ingestion - INFO - Multi-tenant ingestion pipeline initialized
2025-09-14 19:27:02,103 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-09-14 19:27:02,103 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-09-14 19:27:02,103 - interactive_multi_tenant_api - INFO - Tenant manager initialized
2025-09-14 19:27:02,107 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-14 19:27:02,107 - interactive_multi_tenant_api - INFO - Tenant ingestion service initialized
2025-09-14 19:27:02,107 - auth_middleware - INFO - JWT Authenticator initialized
2025-09-14 19:27:02,107 - interactive_multi_tenant_api - INFO - JWT authenticator initialized
2025-09-14 19:27:02,107 - interactive_multi_tenant_api - INFO - 🎯 Multi-Tenant RAG API ready - all backend logs will appear in this terminal
2025-09-14 19:27:02,107 - interactive_multi_tenant_api - INFO - 📊 Backend activity from CLI and API operations will be shown below:
2025-09-14 19:27:27,594 - catalog_database - ERROR - Failed to initialize catalog database pool: [Errno 8] nodename nor servname provided, or not known
2025-09-14 19:27:27,594 - tenant_manager - ERROR - Error checking tenant existence for 496970e9-d66c-402c-8628-bfb2ce86f235: [Errno 8] nodename nor servname provided, or not known
2025-09-14 19:32:49,384 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-09-14 19:32:49,677 - catalog_database - INFO - Catalog database connection test successful
2025-09-14 19:32:49,679 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-14 19:32:49,769 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-14 19:32:49,818 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-14 19:32:49,923 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX relation_uuid FOR ()-[e:RELATES_TO]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)'
2025-09-14 19:32:49,923 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_uuid IF NOT EXISTS FOR (e:Episodic) ON (e.uuid)` has no effect.} {description: `RANGE INDEX episode_uuid FOR (e:Episodic) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX episode_uuid IF NOT EXISTS FOR (n:Episodic) ON (n.uuid)'
2025-09-14 19:32:49,925 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX mention_uuid FOR ()-[e:MENTIONS]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)'
2025-09-14 19:32:49,925 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_uuid IF NOT EXISTS FOR (e:Entity) ON (e.uuid)` has no effect.} {description: `RANGE INDEX entity_uuid FOR (e:Entity) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX entity_uuid IF NOT EXISTS FOR (n:Entity) ON (n.uuid)'
2025-09-14 19:32:49,926 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_group_id IF NOT EXISTS FOR (e:Episodic) ON (e.group_id)` has no effect.} {description: `RANGE INDEX episode_group_id FOR (e:Episodic) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX episode_group_id IF NOT EXISTS FOR (n:Episodic) ON (n.group_id)'
2025-09-14 19:32:49,926 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX community_uuid IF NOT EXISTS FOR (e:Community) ON (e.uuid)` has no effect.} {description: `RANGE INDEX community_uuid FOR (e:Community) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX community_uuid IF NOT EXISTS FOR (n:Community) ON (n.uuid)'
2025-09-14 19:32:49,926 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX mention_group_id FOR ()-[e:MENTIONS]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)'
2025-09-14 19:32:49,927 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX relation_group_id FOR ()-[e:RELATES_TO]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)'
2025-09-14 19:32:49,927 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_group_id IF NOT EXISTS FOR (e:Entity) ON (e.group_id)` has no effect.} {description: `RANGE INDEX entity_group_id FOR (e:Entity) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX entity_group_id IF NOT EXISTS FOR (n:Entity) ON (n.group_id)'
2025-09-14 19:32:49,927 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX has_member_uuid FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)'
2025-09-14 19:32:49,928 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.name)` has no effect.} {description: `RANGE INDEX name_entity_index FOR (e:Entity) ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.name)'
2025-09-14 19:32:49,930 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_entity_index FOR (e:Entity) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.created_at)'
2025-09-14 19:32:49,931 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_episodic_index FOR (e:Episodic) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.created_at)'
2025-09-14 19:32:49,932 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` has no effect.} {description: `FULLTEXT INDEX node_name_and_summary FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS \n            FOR (n:Entity) ON EACH [n.name, n.summary, n.group_id]'
2025-09-14 19:32:49,932 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` has no effect.} {description: `FULLTEXT INDEX edge_name_and_fact FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS \n            FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]'
2025-09-14 19:32:49,932 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX community_name IF NOT EXISTS FOR (e:Community) ON EACH [e.name, e.group_id]` has no effect.} {description: `FULLTEXT INDEX community_name FOR (e:Community) ON EACH [e.name, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX community_name IF NOT EXISTS \n            FOR (n:Community) ON EACH [n.name, n.group_id]'
2025-09-14 19:32:49,933 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_episodic_index FOR (e:Episodic) ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.valid_at)'
2025-09-14 19:32:49,933 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)` has no effect.} {description: `RANGE INDEX name_edge_index FOR ()-[e:RELATES_TO]-() ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)'
2025-09-14 19:32:49,934 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)'
2025-09-14 19:32:49,935 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` has no effect.} {description: `RANGE INDEX expired_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` already exists.} {position: None} for query: 'CREATE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)'
2025-09-14 19:32:49,936 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)'
2025-09-14 19:32:49,936 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` has no effect.} {description: `RANGE INDEX invalid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` already exists.} {position: None} for query: 'CREATE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)'
2025-09-14 19:32:49,937 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX episode_content IF NOT EXISTS FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` has no effect.} {description: `FULLTEXT INDEX episode_content FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX episode_content IF NOT EXISTS \n            FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]'
2025-09-14 19:32:49,937 - tenant_graphiti_client - INFO - TenantGraphitiClient initialized successfully with LLM: gemini-2.0-flash-thinking-exp-1219
2025-09-14 19:32:50,345 - auth_middleware - INFO - Created access token for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-14 19:40:07,283 - multi_tenant_agent - INFO - Using comprehensive system prompt for intelligent tool routing
2025-09-14 19:40:07,327 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-14 19:40:07,369 - multi_tenant_agent - INFO - Created multi-tenant agent with model: gemini-2.0-flash-thinking-exp-1219
2025-09-14 19:40:07,375 - multi_tenant_agent - INFO - Successfully registered tenant-aware tools
2025-09-14 19:40:07,376 - multi_tenant_agent - INFO - 🧠 Starting chat processing for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-14 19:40:07,376 - multi_tenant_agent - INFO - 📝 User query: Hi! Tell me which exact mobile phone did aanya used when she was into google exosystem? Also, which ...
2025-09-14 19:40:07,376 - multi_tenant_agent - INFO - 🤖 Running agent with model gemini-2.0-flash-thinking-exp-1219
2025-09-14 19:40:07,378 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-14 19:40:13,036 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-14 19:40:13,042 - multi_tenant_agent - INFO - 🔍 Local dual search for tenant 496970e9-d66c-402c-8628-bfb2ce86f235: Which mobile phone did Aanya use when she was into Google ecosystem and which UI did she prefer at that time?
2025-09-14 19:40:13,043 - multi_tenant_agent - INFO - 🔍 Vector search for tenant 496970e9-d66c-402c-8628-bfb2ce86f235: Which mobile phone did Aanya use when she was into Google ecosystem and which UI did she prefer at that time?
2025-09-14 19:40:24,710 - multi_tenant_agent - INFO - ✅ Vector search returned 4 results for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-14 19:40:24,710 - multi_tenant_agent - INFO - 🔍 Graph search for tenant 496970e9-d66c-402c-8628-bfb2ce86f235: Which mobile phone did Aanya use when she was into Google ecosystem and which UI did she prefer at that time?
2025-09-14 19:40:27,047 - tenant_graphiti_client - INFO - Graph search for tenant 496970e9-d66c-402c-8628-bfb2ce86f235 (namespace: tenant_496970e9-d66c-402c-8628-bfb2ce86f235) returned 10 results
2025-09-14 19:40:27,047 - multi_tenant_agent - INFO - ✅ Graph search returned 10 results for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-14 19:40:27,047 - multi_tenant_agent - INFO - ✅ Local dual search returned 9 combined results
2025-09-14 19:40:27,048 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-14 19:40:31,374 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-1219:generateContent "HTTP/1.1 200 OK"
2025-09-14 19:40:31,377 - multi_tenant_agent - INFO - ✅ Agent completed processing for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-14 19:40:31,377 - multi_tenant_agent - INFO - 🔍 Extracting tool usage from agent messages
2025-09-14 19:40:31,378 - multi_tenant_agent - INFO - Found 4 messages to analyze
2025-09-14 19:40:31,378 - multi_tenant_agent - INFO - Message 0: <class 'pydantic_ai.messages.ModelRequest'>, attributes: ['instructions', 'kind', 'parts', 'user_text_prompt']
2025-09-14 19:40:31,378 - multi_tenant_agent - INFO - Message 1: <class 'pydantic_ai.messages.ModelResponse'>, attributes: ['cost', 'kind', 'model_name', 'otel_events', 'otel_message_parts', 'parts', 'price', 'provider_details', 'provider_name', 'provider_request_id', 'provider_response_id', 'timestamp', 'usage', 'vendor_details', 'vendor_id']
2025-09-14 19:40:31,378 - multi_tenant_agent - INFO - Message 2: <class 'pydantic_ai.messages.ModelRequest'>, attributes: ['instructions', 'kind', 'parts', 'user_text_prompt']
2025-09-14 19:40:31,378 - multi_tenant_agent - INFO - Message 3: <class 'pydantic_ai.messages.ModelResponse'>, attributes: ['cost', 'kind', 'model_name', 'otel_events', 'otel_message_parts', 'parts', 'price', 'provider_details', 'provider_name', 'provider_request_id', 'provider_response_id', 'timestamp', 'usage', 'vendor_details', 'vendor_id']
2025-09-14 19:40:31,378 - multi_tenant_agent - INFO - 📊 Extracted 0 tools and 0 sources
2025-09-14 19:40:31,378 - multi_tenant_agent - INFO - 📊 Using tracked tools: ['Vector Search', 'Knowledge Graph Search', 'Dual Storage Search']
2025-09-14 19:40:31,378 - multi_tenant_agent - INFO - 📊 Using tracked sources: 5 sources
2025-09-14 19:40:31,378 - multi_tenant_agent - INFO - 📊 Final result: 3 tools, 2 unique sources
2025-09-14 19:50:05,845 - auth_middleware - INFO - Created access token for tenant 496970e9-d66c-402c-8628-bfb2ce86f235
2025-09-15 12:33:29,481 - __main__ - INFO - Starting Interactive Multi-Tenant RAG API on 127.0.0.1:8000
2025-09-15 12:33:29,529 - interactive_multi_tenant_api - INFO - Starting Multi-Tenant RAG API...
2025-09-15 12:33:29,536 - interactive_multi_tenant_api - INFO - Neo4j URI: neo4j://127.0.0.1:7687
2025-09-15 12:33:29,537 - interactive_multi_tenant_api - INFO - Neo4j User: neo4j
2025-09-15 12:33:29,537 - interactive_multi_tenant_api - INFO - Neo4j Password: ***
2025-09-15 12:33:29,537 - tenant_manager - INFO - TenantManager initialized with Graphiti client
2025-09-15 12:33:29,537 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-15 12:33:29,537 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-09-15 12:33:29,537 - multi_tenant_ingestion - INFO - Multi-tenant ingestion pipeline initialized
2025-09-15 12:33:29,537 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-09-15 12:33:29,537 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-09-15 12:33:29,537 - interactive_multi_tenant_api - INFO - Tenant manager initialized
2025-09-15 12:33:29,563 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-15 12:33:29,563 - interactive_multi_tenant_api - INFO - Tenant ingestion service initialized
2025-09-15 12:33:29,563 - auth_middleware - INFO - JWT Authenticator initialized
2025-09-15 12:33:29,563 - interactive_multi_tenant_api - INFO - JWT authenticator initialized
2025-09-15 12:33:29,563 - interactive_multi_tenant_api - INFO - 🎯 Multi-Tenant RAG API ready - all backend logs will appear in this terminal
2025-09-15 12:33:29,563 - interactive_multi_tenant_api - INFO - 📊 Backend activity from CLI and API operations will be shown below:
2025-09-15 12:34:22,945 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-09-15 12:34:23,113 - catalog_database - INFO - Catalog database connection test successful
2025-09-15 12:34:23,113 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-15 12:34:23,158 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-15 12:34:23,184 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-15 12:34:23,290 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_uuid IF NOT EXISTS FOR (e:Entity) ON (e.uuid)` has no effect.} {description: `RANGE INDEX entity_uuid FOR (e:Entity) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX entity_uuid IF NOT EXISTS FOR (n:Entity) ON (n.uuid)'
2025-09-15 12:34:23,293 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX relation_uuid FOR ()-[e:RELATES_TO]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)'
2025-09-15 12:34:23,293 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX mention_uuid FOR ()-[e:MENTIONS]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)'
2025-09-15 12:34:23,294 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX community_uuid IF NOT EXISTS FOR (e:Community) ON (e.uuid)` has no effect.} {description: `RANGE INDEX community_uuid FOR (e:Community) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX community_uuid IF NOT EXISTS FOR (n:Community) ON (n.uuid)'
2025-09-15 12:34:23,294 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX has_member_uuid FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)'
2025-09-15 12:34:23,295 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_uuid IF NOT EXISTS FOR (e:Episodic) ON (e.uuid)` has no effect.} {description: `RANGE INDEX episode_uuid FOR (e:Episodic) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX episode_uuid IF NOT EXISTS FOR (n:Episodic) ON (n.uuid)'
2025-09-15 12:34:23,295 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_group_id IF NOT EXISTS FOR (e:Episodic) ON (e.group_id)` has no effect.} {description: `RANGE INDEX episode_group_id FOR (e:Episodic) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX episode_group_id IF NOT EXISTS FOR (n:Episodic) ON (n.group_id)'
2025-09-15 12:34:23,295 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_group_id IF NOT EXISTS FOR (e:Entity) ON (e.group_id)` has no effect.} {description: `RANGE INDEX entity_group_id FOR (e:Entity) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX entity_group_id IF NOT EXISTS FOR (n:Entity) ON (n.group_id)'
2025-09-15 12:34:23,296 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX relation_group_id FOR ()-[e:RELATES_TO]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)'
2025-09-15 12:34:23,297 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX mention_group_id FOR ()-[e:MENTIONS]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)'
2025-09-15 12:34:23,298 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.name)` has no effect.} {description: `RANGE INDEX name_entity_index FOR (e:Entity) ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.name)'
2025-09-15 12:34:23,299 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_entity_index FOR (e:Entity) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.created_at)'
2025-09-15 12:34:23,300 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_episodic_index FOR (e:Episodic) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.created_at)'
2025-09-15 12:34:23,302 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_episodic_index FOR (e:Episodic) ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.valid_at)'
2025-09-15 12:34:23,302 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` has no effect.} {description: `FULLTEXT INDEX node_name_and_summary FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS \n            FOR (n:Entity) ON EACH [n.name, n.summary, n.group_id]'
2025-09-15 12:34:23,303 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)` has no effect.} {description: `RANGE INDEX name_edge_index FOR ()-[e:RELATES_TO]-() ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)'
2025-09-15 12:34:23,303 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)'
2025-09-15 12:34:23,304 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX community_name IF NOT EXISTS FOR (e:Community) ON EACH [e.name, e.group_id]` has no effect.} {description: `FULLTEXT INDEX community_name FOR (e:Community) ON EACH [e.name, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX community_name IF NOT EXISTS \n            FOR (n:Community) ON EACH [n.name, n.group_id]'
2025-09-15 12:34:23,304 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` has no effect.} {description: `FULLTEXT INDEX edge_name_and_fact FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS \n            FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]'
2025-09-15 12:34:23,304 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` has no effect.} {description: `RANGE INDEX expired_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` already exists.} {position: None} for query: 'CREATE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)'
2025-09-15 12:34:23,304 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)'
2025-09-15 12:34:23,305 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` has no effect.} {description: `RANGE INDEX invalid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` already exists.} {position: None} for query: 'CREATE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)'
2025-09-15 12:34:23,305 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX episode_content IF NOT EXISTS FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` has no effect.} {description: `FULLTEXT INDEX episode_content FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX episode_content IF NOT EXISTS \n            FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]'
2025-09-15 12:34:23,306 - tenant_graphiti_client - INFO - TenantGraphitiClient initialized successfully with LLM: gemini-2.0-flash-thinking-exp-1219
2025-09-15 12:35:45,253 - auth_middleware - INFO - Created access token for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-15 12:36:57,651 - multi_tenant_agent - INFO - Using comprehensive system prompt for intelligent tool routing
2025-09-15 12:36:57,671 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-15 12:36:57,704 - multi_tenant_agent - INFO - Created multi-tenant agent with model: gemini-2.0-flash-thinking-exp-1219
2025-09-15 12:36:57,711 - multi_tenant_agent - INFO - Successfully registered tenant-aware tools
2025-09-15 12:36:57,711 - multi_tenant_agent - INFO - 🧠 Starting chat processing for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-15 12:36:57,711 - multi_tenant_agent - INFO - 📝 User query: Hi! Tell me how aanya sharma phone preferences changed over time? And Correspondingly tell me the re...
2025-09-15 12:36:57,711 - multi_tenant_agent - INFO - 🤖 Running agent with model gemini-2.0-flash-thinking-exp-1219
2025-09-15 12:36:57,713 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:36:59,563 - multi_tenant_agent - INFO - 🔍 Local dual search for tenant 5a115121-e3a2-439c-bc70-960c033581d2: aanya sharma phone preferences changed over time and reasons for switching
2025-09-15 12:36:59,564 - multi_tenant_agent - INFO - 🔍 Vector search for tenant 5a115121-e3a2-439c-bc70-960c033581d2: aanya sharma phone preferences changed over time and reasons for switching
2025-09-15 12:37:06,362 - multi_tenant_agent - INFO - ✅ Vector search returned 2 results for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-15 12:37:06,362 - multi_tenant_agent - INFO - 🔍 Graph search for tenant 5a115121-e3a2-439c-bc70-960c033581d2: aanya sharma phone preferences changed over time and reasons for switching
2025-09-15 12:37:07,136 - tenant_graphiti_client - INFO - Graph search for tenant 5a115121-e3a2-439c-bc70-960c033581d2 (namespace: tenant_5a115121-e3a2-439c-bc70-960c033581d2) returned 10 results
2025-09-15 12:37:07,137 - multi_tenant_agent - INFO - ✅ Graph search returned 10 results for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-15 12:37:07,137 - multi_tenant_agent - INFO - ✅ Local dual search returned 7 combined results
2025-09-15 12:37:07,137 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:37:08,776 - multi_tenant_agent - INFO - ✅ Agent completed processing for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-15 12:37:08,776 - multi_tenant_agent - INFO - 🔍 Extracting tool usage from agent messages
2025-09-15 12:37:08,776 - multi_tenant_agent - INFO - Found 4 messages to analyze
2025-09-15 12:37:08,776 - multi_tenant_agent - INFO - Message 0: <class 'pydantic_ai.messages.ModelRequest'>, attributes: ['instructions', 'kind', 'parts', 'user_text_prompt']
2025-09-15 12:37:08,776 - multi_tenant_agent - INFO - Message 1: <class 'pydantic_ai.messages.ModelResponse'>, attributes: ['kind', 'model_name', 'otel_events', 'parts', 'timestamp', 'usage', 'vendor_details', 'vendor_id']
2025-09-15 12:37:08,777 - multi_tenant_agent - INFO - Message 2: <class 'pydantic_ai.messages.ModelRequest'>, attributes: ['instructions', 'kind', 'parts', 'user_text_prompt']
2025-09-15 12:37:08,777 - multi_tenant_agent - INFO - Message 3: <class 'pydantic_ai.messages.ModelResponse'>, attributes: ['kind', 'model_name', 'otel_events', 'parts', 'timestamp', 'usage', 'vendor_details', 'vendor_id']
2025-09-15 12:37:08,777 - multi_tenant_agent - INFO - 📊 Extracted 0 tools and 0 sources
2025-09-15 12:37:08,777 - multi_tenant_agent - INFO - 📊 Using tracked tools: ['Vector Search', 'Knowledge Graph Search', 'Dual Storage Search']
2025-09-15 12:37:08,777 - multi_tenant_agent - INFO - 📊 Using tracked sources: 5 sources
2025-09-15 12:37:08,777 - multi_tenant_agent - INFO - 📊 Final result: 3 tools, 4 unique sources
2025-09-15 12:38:27,019 - multi_tenant_agent - INFO - Using comprehensive system prompt for intelligent tool routing
2025-09-15 12:38:27,021 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-15 12:38:27,064 - multi_tenant_agent - INFO - Created multi-tenant agent with model: gemini-2.0-flash-thinking-exp-1219
2025-09-15 12:38:27,067 - multi_tenant_agent - INFO - Successfully registered tenant-aware tools
2025-09-15 12:38:27,067 - multi_tenant_agent - INFO - 🧠 Starting chat processing for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-15 12:38:27,067 - multi_tenant_agent - INFO - 📝 User query: Hi! Tell me about how multi tenancy feature can be implemented in neon db and what is the prefered w...
2025-09-15 12:38:27,067 - multi_tenant_agent - INFO - 🤖 Running agent with model gemini-2.0-flash-thinking-exp-1219
2025-09-15 12:38:27,069 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:38:31,415 - multi_tenant_agent - INFO - 🔍 Local dual search for tenant 5a115121-e3a2-439c-bc70-960c033581d2: how to implement multi tenancy in neon db and what is the preferred way
2025-09-15 12:38:31,415 - multi_tenant_agent - INFO - 🔍 Vector search for tenant 5a115121-e3a2-439c-bc70-960c033581d2: how to implement multi tenancy in neon db and what is the preferred way
2025-09-15 12:38:38,885 - multi_tenant_agent - INFO - ✅ Vector search returned 10 results for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-15 12:38:38,886 - multi_tenant_agent - INFO - 🔍 Graph search for tenant 5a115121-e3a2-439c-bc70-960c033581d2: how to implement multi tenancy in neon db and what is the preferred way
2025-09-15 12:38:39,530 - tenant_graphiti_client - INFO - Graph search for tenant 5a115121-e3a2-439c-bc70-960c033581d2 (namespace: tenant_5a115121-e3a2-439c-bc70-960c033581d2) returned 10 results
2025-09-15 12:38:39,530 - multi_tenant_agent - INFO - ✅ Graph search returned 10 results for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-15 12:38:39,530 - multi_tenant_agent - INFO - ✅ Local dual search returned 15 combined results
2025-09-15 12:38:39,531 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:38:42,681 - multi_tenant_agent - INFO - ✅ Agent completed processing for tenant 5a115121-e3a2-439c-bc70-960c033581d2
2025-09-15 12:38:42,682 - multi_tenant_agent - INFO - 🔍 Extracting tool usage from agent messages
2025-09-15 12:38:42,682 - multi_tenant_agent - INFO - Found 4 messages to analyze
2025-09-15 12:38:42,682 - multi_tenant_agent - INFO - Message 0: <class 'pydantic_ai.messages.ModelRequest'>, attributes: ['instructions', 'kind', 'parts', 'user_text_prompt']
2025-09-15 12:38:42,682 - multi_tenant_agent - INFO - Message 1: <class 'pydantic_ai.messages.ModelResponse'>, attributes: ['kind', 'model_name', 'otel_events', 'parts', 'timestamp', 'usage', 'vendor_details', 'vendor_id']
2025-09-15 12:38:42,682 - multi_tenant_agent - INFO - Message 2: <class 'pydantic_ai.messages.ModelRequest'>, attributes: ['instructions', 'kind', 'parts', 'user_text_prompt']
2025-09-15 12:38:42,682 - multi_tenant_agent - INFO - Message 3: <class 'pydantic_ai.messages.ModelResponse'>, attributes: ['kind', 'model_name', 'otel_events', 'parts', 'timestamp', 'usage', 'vendor_details', 'vendor_id']
2025-09-15 12:38:42,682 - multi_tenant_agent - INFO - 📊 Extracted 0 tools and 0 sources
2025-09-15 12:38:42,682 - multi_tenant_agent - INFO - 📊 Using tracked tools: ['Vector Search', 'Knowledge Graph Search', 'Dual Storage Search']
2025-09-15 12:38:42,683 - multi_tenant_agent - INFO - 📊 Using tracked sources: 5 sources
2025-09-15 12:38:42,683 - multi_tenant_agent - INFO - 📊 Final result: 3 tools, 1 unique sources
2025-09-15 12:43:14,842 - tenant_data_ingestion_service - INFO - Starting document ingestion for tenant 5a115121-e3a2-439c-bc70-960c033581d2: temporal_rag_test_story.md
2025-09-15 12:43:19,243 - tenant_data_ingestion_service - INFO - Creating chunks for document: temporal_rag_test_story.md
2025-09-15 12:43:19,247 - tenant_data_ingestion_service - INFO - Generating embeddings for 4 chunks
2025-09-15 12:43:19,247 - ingestion.embedder - INFO - Generating embeddings for 4 chunks
2025-09-15 12:43:20,005 - ingestion.embedder - INFO - Processed batch 1/1
2025-09-15 12:43:20,005 - ingestion.embedder - INFO - Generated embeddings for 4 chunks (model: embedding-001, dimensions: 768)
2025-09-15 12:43:27,660 - tenant_data_ingestion_service - INFO - Adding 4 chunks to tenant 5a115121-e3a2-439c-bc70-960c033581d2 graph namespace: tenant_5a115121-e3a2-439c-bc70-960c033581d2
2025-09-15 12:43:27,739 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:43:33,089 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:43:33,917 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:43:55,011 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:43:55,018 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:43:55,023 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:43:55,028 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:43:55,032 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:43:55,037 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:43:55,040 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:43:55,044 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:43:55,048 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:43:55,051 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:43:55,054 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:43:55,057 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:43:57,150 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-09-15 12:43:57,151 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Document: NEON_MULTI_TENANCY_EXPLAINED.md\\n\\nContent:\\n-- Documents table (no tenant_id needed - entire DB is for one tenant)\\nCREATE TABLE documents (\\n    id VARCHAR(50) PRIMARY KEY DEFAULT gen_random_uuid()::text,\\n    title TEXT NOT NULL,\\n    source TEXT NOT NULL,\\n    content TEXT NOT NULL,\\n    metadata JSONB DEFAULT '{}',\\n    created_at TIMESTAMPTZ DEFAULT NOW()\\n);\\n\\n-- Chunks table for vector search\\nCREATE TABLE chunks (\\n    id VARCHAR(50) PRIMARY KEY DEFAULT gen_random_uuid()::text,\\n    document_id VARCHAR(50) NOT NULL REFERENCES documents(id) ON DELETE CASCADE,\\n    content TEXT NOT NULL,\\n    embedding VECTOR(768),\\n    chunk_index INTEGER NOT NULL,\\n    created_at TIMESTAMPTZ DEFAULT NOW()\\n);\",\n  \"Document: NEON_MULTI_TENANCY_EXPLAINED.md\\n\\nContent:\\nclass TenantManager:\\n    \\\"\\\"\\\"Manages Neon projects for complete tenant isolation\\\"\\\"\\\"\\n    \\n    def __init__(self, neon_api_key: str, catalog_db_url: str):\\n        self.neon_client = NeonAPIClient(neon_api_key)\\n        self.catalog_db = Database(catalog_db_url)\\n    \\n    async def create_tenant(self, name: str, email: str, region: str = \\\"aws-us-east-1\\\") -> UUID:\\n        \\\"\\\"\\\"Create new tenant with dedicated Neon project\\\"\\\"\\\"\\n        \\n        # 1. Create Neon project via API\\n        project = await self.neon_client.create_project({\\n            \\\"name\\\": f\\\"tenant-{name.lower().replace(' ', '-')}\\\",\\n            \\\"pg_version\\\": 16,\\n            \\\"region_id\\\": region\\n        })\\n        \\n        # 2. Get connection details\\n        connection = await self.neon_client.get_connection_details(\",\n  \"Document: NEON_MULTI_TENANCY_EXPLAINED.md\\n\\nContent:\\n## \\ud83c\\udfaf **Benefits of Our Project-per-Tenant Approach**\\n\\n\\n\\n### **\\ud83c\\udfd7\\ufe0f Following Official Neon Best Practices**\\n\\n\\n\\n- \\n\\n**Primary Recommendation**: Exactly what Neon officially recommends\\n\\n\\n- \\n\\n**Battle-tested**: Used by successful SaaS companies at scale\\n\\n\\n- \\n\\n**Future-proof**: Aligned with Neon's roadmap and optimization efforts\\n\\n\\n\\n### **\\ud83d\\udcb0 Cost Effectiveness**\\n\\n\\n\\n- \\n\\n**Scale-to-zero**: Inactive tenants cost virtually nothing\\n\\n\\n- \\n\\n**Independent scaling**: Each tenant pays only for their usage\\n\\n\\n- \\n\\n**No wasted resources**: Compute scales per tenant needs\\n\\n\\n- \\n\\n**Predictable costs**: Clear per-tenant cost attribution\\n\\n\\n\\n### **\\ud83d\\udee1\\ufe0f Ultimate Security**\\n\\n\\n\\n- \\n\\n**Physical separation**: Complete data isolation by design\\n\\n\\n- \\n\\n**No RLS complexity**: Simple security model\\n\\n\\n-\",\n  \"Document: NEON_MULTI_TENANCY_EXPLAINED.md\\n\\nContent:\\n**Audit-friendly**: Clear tenant data boundaries\\n\\n\\n- \\n\\n**Compliance-ready**: Perfect for regulatory requirements\\n\\n\\n\\n### **\\u26a1 Performance Benefits**\\n\\n\\n\\n- \\n\\n**Dedicated compute**: No \\\"noisy neighbor\\\" problems\\n\\n\\n- \\n\\n**Optimized per tenant**: Database tuning per workload\\n\\n\\n- \\n\\n**Faster queries**: No complex tenant filtering\\n\\n\\n- \\n\\n**Better caching**: Tenant-specific query optimization\\n\\n\\n\\n### **\\ud83d\\udd27 Operational Simplicity**\\n\\n\\n\\n- \\n\\n**Standard PostgreSQL**: Each tenant database is normal PostgreSQL\\n\\n\\n- \\n\\n**Easy backups**: Per-tenant point-in-time recovery\\n\\n\\n- \\n\\n**Simple monitoring**: Clear per-tenant metrics\\n\\n\\n- \\n\\n**Regional deployment**: Tenants in specific regions for compliance\\n\\n\\n\\n## \\ud83d\\ude80 **Why This Works Perfectly for You**\\n\\n\\n\\n### **\\u2705 Following Official Neon Guidance**\\n\\n\\n\\n-\",\n  \"Document: NEON_MULTI_TENANCY_EXPLAINED.md\\n\\nContent:\\n**Neon's Primary Recommendation**: This is exactly what Neon officially recommends for scalable multi-tenant SaaS\\n\\n\\n- \\n\\n**Officially Documented**: Follows patterns from official Neon documentation\\n\\n\\n- \\n\\n**Best Practice Validated**: Used by successful companies at scale\\n\\n\\n\\n### **\\ud83c\\udfaf Perfect for Your Use Case**\\n\\n\\n\\n- \\n\\n**RAG System Ready**: Ideal for knowledge graphs and vector search\\n\\n\\n- \\n\\n**Enterprise Grade**: Meets compliance and security requirements  \\n\\n\\n- \\n\\n**Cost Optimized**: Scale-to-zero for inactive customers\\n\\n\\n- \\n\\n**Performance Optimized**: No shared resource contention\\n\\n\\n\\n### **\\ud83d\\udcc8 Scalability & Growth**\\n\\n\\n\\n- \\n\\n**Scales to thousands** of tenants seamlessly\\n\\n\\n- \\n\\n**Regional deployment** for global compliance\\n\\n\\n- \\n\\n**Independent scaling** per tenant workload\\n\\n\\n-\",\n  \"Document: NEON_MULTI_TENANCY_EXPLAINED.md\\n\\nContent:\\ncurl -X POST \\\"http://localhost:8000/tenants\\\" -d '{\\n  \\\"name\\\": \\\"Company B\\\", \\n  \\\"email\\\": \\\"admin@companyb.com\\\",\\n  \\\"region\\\": \\\"aws-us-east-1\\\"\\n}'\\n```\\n\\n\\n\\n### **2. Add Documents to Each Tenant's Database**\\n\\n\\n\\n```bash\\n\\n\\n# Add document to Tenant A's dedicated database\\n\\n\\ncurl -X POST \\\"http://localhost:8000/documents\\\" \\\\\\n  -H \\\"Authorization: Bearer TENANT_A_TOKEN\\\" \\\\\\n  -d '{\\\"title\\\": \\\"A Secret\\\", \\\"content\\\": \\\"Top secret A data\\\"}'\\n\\n\\n\\n# Add document to Tenant B's separate dedicated database\\n\\n\\ncurl -X POST \\\"http://localhost:8000/documents\\\" \\\\\\n  -H \\\"Authorization: Bearer TENANT_B_TOKEN\\\" \\\\\\n  -d '{\\\"title\\\": \\\"B Secret\\\", \\\"content\\\": \\\"Top secret B data\\\"}'\\n```\\n\\n\\n\\n### **3. Verify Natural Isolation**\\n\\n\\n\\n```bash\\n\\n\\n# Tenant A queries their dedicated database\",\n  \"Document: NEON_MULTI_TENANCY_EXPLAINED.md\\n\\nContent:\\ncurl -H \\\"Authorization: Bearer TENANT_A_TOKEN\\\" \\\\\\n  \\\"http://localhost:8000/documents\\\"\\n\\n\\n# Returns: Only \\\"A Secret\\\" document (from A's database)\\n\\n\\n\\n# Tenant B queries their separate dedicated database\\n\\n\\ncurl -H \\\"Authorization: Bearer TENANT_B_TOKEN\\\" \\\\\\n  \\\"http://localhost:8000/documents\\\"\\n\\n\\n# Returns: Only \\\"B Secret\\\" document (from B's database)\\n\\n\\n```\\n\\n\\n\\n### **4. Verify Database Separation**\\n\\n\\n\\n```python\\n\\n\\n# Direct database verification\\n\\n\\ntenant_a_db_url = await manager.get_tenant_database_url(tenant_a_id)\\ntenant_b_db_url = await manager.get_tenant_database_url(tenant_b_id)\\n\\n\\n\\n# Verify they're completely different databases\\n\\n\\nassert tenant_a_db_url != tenant_b_db_url\\nassert \\\"ep-different-endpoint\\\" in tenant_a_db_url\\nassert \\\"ep-another-endpoint\\\" in tenant_b_db_url\",\n  \"Document: NEON_MULTI_TENANCY_EXPLAINED.md\\n\\nContent:\\n# Query each database directly\\n\\n\\nasync with Database(tenant_a_db_url) as db_a:\\n    a_docs = await db_a.fetch_all(\\\"SELECT * FROM documents\\\")\\n    # Only Tenant A's documents\\n\\nasync with Database(tenant_b_db_url) as db_b:\\n    b_docs = await db_b.fetch_all(\\\"SELECT * FROM documents\\\")\\n    # Only Tenant B's documents\\n```\\n\\n\\n\\n## \\ud83d\\udccb **Summary**\\n\\n\\n\\n**Project-per-Tenant Multi-tenancy in Neon PostgreSQL** allows you to:\\n\\n1. **Follow official Neon best practices** for scalable SaaS architecture\\n\\n\\n2. \\n\\n**Achieve complete tenant isolation** through physical database separation  \\n\\n\\n3. \\n\\n**Optimize costs** with scale-to-zero for inactive tenants\\n\\n\\n4. \\n\\n**Scale independently** per tenant with dedicated compute\\n\\n\\n5. \\n\\n**Maintain operational simplicity** with standard PostgreSQL per tenant\\n\\n\\n6.\",\n  \"Document: NEON_MULTI_TENANCY_EXPLAINED.md\\n\\nContent:\\n**Meet enterprise requirements** with regional deployment and compliance\\n\\n**Our implementation** follows **official Neon recommendations** and provides **complete tenant isolation** while being **cost-effective**, **performant**, and **operationally simple**.\\n\\n**Perfect for**: Multi-tenant SaaS applications, RAG systems, knowledge graphs, and any application requiring complete customer data isolation with enterprise-grade security and scalability.\\n\\n**Key Advantages Over Shared Schema Approaches:**\\n\\n- \\u2705 **Complete physical isolation** (no RLS complexity)\\n\\n\\n- \\n\\n\\u2705 **Scale-to-zero cost benefits** (inactive tenants cost nothing)  \\n\\n\\n- \\n\\n\\u2705 **Independent performance** (no noisy neighbor issues)\\n\\n\\n- \\n\\n\\u2705 **Operational simplicity** (standard PostgreSQL management)\\n\\n\\n-\",\n  \"Document: NEON_MULTI_TENANCY_EXPLAINED.md\\n\\nContent:\\n\\u2705 **Enterprise compliance** (perfect audit trails and data separation)\\n\\n\\ud83c\\udf89 **You're ready to build secure, scalable, cost-effective multi-tenant applications following official Neon best practices!**\"\n]\n        \"Document: temporal_rag_test_story.md\\n\\nContent:\\n# \\ud83d\\udcda Temporal Knowledge Story for RAG Testing\\n\\n\\n\\n## \\ud83e\\udde0 Story: The Life and Choices of Aanya Sharma (2023\\u20132025)\\n\\n\\n\\n### \\ud83d\\udcc5 December 2023\\n\\n\\n- Aanya Sharma is a product manager at **Zyphos Tech**, living in **Bangalore**.\\n\\n\\n- \\n\\nShe prefers **Android phones**. Her favorite phone is the **OnePlus 11R**.\\n\\n\\n- \\n\\nShe is using **Notion** as her preferred note-taking app.\\n\\n\\n- \\n\\nShe uses **Slack** for team collaboration.\\n\\n\\n- \\n\\nHer favorite coffee shop is **Third Wave Coffee, Indiranagar**.\\n\\n\\n\\n### \\ud83d\\udcc5 February 2024\\n\\n\\n- Aanya moves to **Hyderabad** for a project.\\n\\n\\n- \\n\\nShe discovers and starts preferring **Samsung Galaxy Z Fold 5** over OnePlus.\\n\\n\\n- \\n\\nShe starts using **Obsidian** instead of Notion due to better knowledge graphing.\\n\\n\\n- \\n\\nHer favorite caf\\u00e9 becomes **Roastery Coffee House** in Hyderabad.\\n\\n\\n-\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'Bangalore', 'summary': '', 'entity_types': ['Entity'], 'attributes': {}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{"properties": {"summary": "Bangalore is a city where Aanya Sharma lived in December 2023. At that time, she was a product manager at Zyphos Tech. She preferred Android phones, specifically the OnePlus 11R, and used Notion for notes and Slack for collaboration. Her favorite coffee shop in Bangalore was Third Wave Coffee, located in Indiranagar."}, "required": ["summary"], "title": "EntityAttributes_98f6db23829f43e8825b868bb7e0ee01", "type": "object"}
```

2025-09-15 12:43:57,152 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-09-15 12:43:57,152 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-09-15 12:43:57,153 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:44:00,053 - graphiti_core.graphiti - INFO - Completed add_episode in 32393.218994140625 ms
2025-09-15 12:44:00,054 - tenant_graphiti_client - INFO - ✅ Added episode 'tenant_5a115121-e3a2-439c-bc70-960c033581d2_3639c63c-694a-46ab-8452-2f4a66db3fec_chunk_0_1757920407' for tenant 5a115121-e3a2-439c-bc70-960c033581d2 (namespace: tenant_5a115121-e3a2-439c-bc70-960c033581d2)
2025-09-15 12:44:00,264 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:44:06,254 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:44:07,137 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:45:14,878 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:45:14,882 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:45:14,884 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:45:14,887 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:45:14,889 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:45:14,891 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:45:14,894 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:45:14,896 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:45:14,898 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:45:14,900 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:45:14,902 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:45:14,904 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:45:14,907 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:45:14,909 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:45:16,135 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:45:16,136 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:45:16,138 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:45:16,139 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:45:16,141 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:45:16,145 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:45:16,146 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:45:16,148 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:45:16,149 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:45:16,151 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:45:16,153 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:45:21,680 - graphiti_core.graphiti - INFO - Completed add_episode in 81425.03094673157 ms
2025-09-15 12:45:21,680 - tenant_graphiti_client - INFO - ✅ Added episode 'tenant_5a115121-e3a2-439c-bc70-960c033581d2_3639c63c-694a-46ab-8452-2f4a66db3fec_chunk_1_1757920440' for tenant 5a115121-e3a2-439c-bc70-960c033581d2 (namespace: tenant_5a115121-e3a2-439c-bc70-960c033581d2)
2025-09-15 12:45:21,893 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:46:24,722 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-09-15 12:46:24,722 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n<TEXT>\nDocument: temporal_rag_test_story.md\n\nContent:\nHer Mumbai go-to place is **Blue Tokai, Bandra**.\n\n\n\n### \ud83d\udcc5 January 2025\n\n\n- Aanya switches to **Pixel 9 Pro** as she becomes interested in AI-first devices.\n\n\n- \n\nApple is no longer her preferred brand\u2014she now leans toward **Google\u2019s ecosystem**.\n\n\n- \n\nShe moves fully to **Hyderabad**.\n\n\n- \n\nShe now prefers **Trello** for personal projects, while her teams still use Jira and Linear.\n\n\n- \n\nShe mentors a group of interns, one of whom, **Rahul Mehta**, prefers **One UI over Pixel UI**.\n\n\n\n### \ud83d\udcc5 July 2025\n\n\n- Aanya joins **Cerebro AI** as **Chief Product Officer**.\n\n\n- \n\nShe now oversees:\n  - **Infra Team** (uses Jira)\n  - **ML Research Team** (uses GitHub Projects)\n  - **AI Product Team** (uses Notion again)\n\n\n- \n\nShe reverts to **iPhone 16** due to better integration with her Mac.\n\n\n-\n</TEXT>\n<ENTITY TYPES>\n[{'entity_type_id': 0, 'entity_type_name': 'Entity', 'entity_type_description': 'Default entity classification. Use this entity type if the entity is not one of the other listed types.'}]\n</ENTITY TYPES>\n\nGiven the above text, extract entities from the TEXT that are explicitly or implicitly mentioned.\nFor each entity extracted, also determine its entity type based on the provided ENTITY TYPES and their descriptions.\nIndicate the classified entity type by providing its entity_type_id.\n\n\n\nGuidelines:\n1. Extract significant entities, concepts, or actors mentioned in the conversation.\n2. Avoid creating nodes for relationships or actions.\n3. Avoid creating nodes for temporal information like dates, times or years (these will be added to edges later).\n4. Be as explicit as possible in your node names, using full names and avoiding abbreviations.\n"
      }
    ],
    "role": "user"
  }
]
Raw output: {"extracted_entities": [{"name": "Blue Tokai, Bandra", "entity_type_id": 0}, {"name": "Aanya", "entity_type_id": 0}, {"name": "Pixel 9 Pro", "entity_type_id": 0}, {"name": "Apple", "entity_type_id": 0}, {"name": "Google\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\... (truncated) ...n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\

2025-09-15 12:46:24,723 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Unterminated string starting at: line 1 column 213 (char 212)
2025-09-15 12:46:24,723 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-09-15 12:46:24,724 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:47:29,431 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-09-15 12:47:29,432 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n<TEXT>\nDocument: temporal_rag_test_story.md\n\nContent:\nHer Mumbai go-to place is **Blue Tokai, Bandra**.\n\n\n\n### \ud83d\udcc5 January 2025\n\n\n- Aanya switches to **Pixel 9 Pro** as she becomes interested in AI-first devices.\n\n\n- \n\nApple is no longer her preferred brand\u2014she now leans toward **Google\u2019s ecosystem**.\n\n\n- \n\nShe moves fully to **Hyderabad**.\n\n\n- \n\nShe now prefers **Trello** for personal projects, while her teams still use Jira and Linear.\n\n\n- \n\nShe mentors a group of interns, one of whom, **Rahul Mehta**, prefers **One UI over Pixel UI**.\n\n\n\n### \ud83d\udcc5 July 2025\n\n\n- Aanya joins **Cerebro AI** as **Chief Product Officer**.\n\n\n- \n\nShe now oversees:\n  - **Infra Team** (uses Jira)\n  - **ML Research Team** (uses GitHub Projects)\n  - **AI Product Team** (uses Notion again)\n\n\n- \n\nShe reverts to **iPhone 16** due to better integration with her Mac.\n\n\n-\n</TEXT>\n<ENTITY TYPES>\n[{'entity_type_id': 0, 'entity_type_name': 'Entity', 'entity_type_description': 'Default entity classification. Use this entity type if the entity is not one of the other listed types.'}]\n</ENTITY TYPES>\n\nGiven the above text, extract entities from the TEXT that are explicitly or implicitly mentioned.\nFor each entity extracted, also determine its entity type based on the provided ENTITY TYPES and their descriptions.\nIndicate the classified entity type by providing its entity_type_id.\n\n\n\nGuidelines:\n1. Extract significant entities, concepts, or actors mentioned in the conversation.\n2. Avoid creating nodes for relationships or actions.\n3. Avoid creating nodes for temporal information like dates, times or years (these will be added to edges later).\n4. Be as explicit as possible in your node names, using full names and avoiding abbreviations.\n"
      }
    ],
    "role": "user"
  },
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "The previous response attempt was invalid. Error type: Exception. Error details: . Please try again with a valid response, ensuring the output matches the expected format and constraints."
      }
    ],
    "role": "user"
  }
]
Raw output: {"extracted_entities": [{"name": "Blue Tokai, Bandra", "entity_type_id": 0}, {"name": "Aanya", "entity_type_id": 0}, {"name": "Pixel 9 Pro", "entity_type_id": 0}, {"name": "Apple", "entity_type_id": 0}, {"name": "Google\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\... (truncated) ...n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\

2025-09-15 12:47:29,433 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Unterminated string starting at: line 1 column 213 (char 212)
2025-09-15 12:47:29,433 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 2/2): 
2025-09-15 12:47:29,433 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed and retries are exhausted.
2025-09-15 12:47:29,433 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "role": "system",
    "content": "You are an AI assistant that extracts entity nodes from text. \n    Your primary task is to extract and classify the speaker and other significant entities mentioned in the provided text.\nDo not escape unicode characters.\n\n\nAny extracted information should be returned in the same language as it was written in."
  },
  {
    "role": "user",
    "content": "\n<TEXT>\nDocument: temporal_rag_test_story.md\n\nContent:\nHer Mumbai go-to place is **Blue Tokai, Bandra**.\n\n\n\n### \ud83d\udcc5 January 2025\n\n\n- Aanya switches to **Pixel 9 Pro** as she becomes interested in AI-first devices.\n\n\n- \n\nApple is no longer her preferred brand\u2014she now leans toward **Google\u2019s ecosystem**.\n\n\n- \n\nShe moves fully to **Hyderabad**.\n\n\n- \n\nShe now prefers **Trello** for personal projects, while her teams still use Jira and Linear.\n\n\n- \n\nShe mentors a group of interns, one of whom, **Rahul Mehta**, prefers **One UI over Pixel UI**.\n\n\n\n### \ud83d\udcc5 July 2025\n\n\n- Aanya joins **Cerebro AI** as **Chief Product Officer**.\n\n\n- \n\nShe now oversees:\n  - **Infra Team** (uses Jira)\n  - **ML Research Team** (uses GitHub Projects)\n  - **AI Product Team** (uses Notion again)\n\n\n- \n\nShe reverts to **iPhone 16** due to better integration with her Mac.\n\n\n-\n</TEXT>\n<ENTITY TYPES>\n[{'entity_type_id': 0, 'entity_type_name': 'Entity', 'entity_type_description': 'Default entity classification. Use this entity type if the entity is not one of the other listed types.'}]\n</ENTITY TYPES>\n\nGiven the above text, extract entities from the TEXT that are explicitly or implicitly mentioned.\nFor each entity extracted, also determine its entity type based on the provided ENTITY TYPES and their descriptions.\nIndicate the classified entity type by providing its entity_type_id.\n\n\n\nGuidelines:\n1. Extract significant entities, concepts, or actors mentioned in the conversation.\n2. Avoid creating nodes for relationships or actions.\n3. Avoid creating nodes for temporal information like dates, times or years (these will be added to edges later).\n4. Be as explicit as possible in your node names, using full names and avoiding abbreviations.\n"
  },
  {
    "role": "user",
    "content": "The previous response attempt was invalid. Error type: Exception. Error details: . Please try again with a valid response, ensuring the output matches the expected format and constraints."
  },
  {
    "role": "user",
    "content": "The previous response attempt was invalid. Error type: Exception. Error details: . Please try again with a valid response, ensuring the output matches the expected format and constraints."
  }
]
No raw output available
2025-09-15 12:47:29,433 - graphiti_core.llm_client.gemini_client - ERROR - Max retries (2) exceeded. Last error: 
2025-09-15 12:47:29,434 - tenant_graphiti_client - ERROR - ❌ Failed to add episode for tenant 5a115121-e3a2-439c-bc70-960c033581d2: 
2025-09-15 12:47:29,434 - tenant_data_ingestion_service - ERROR - Failed to add chunk 2 to tenant graph
2025-09-15 12:47:29,650 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:47:33,537 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:47:34,222 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:47:40,599 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:47:40,606 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:47:41,291 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:47:42,458 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-09-15 12:47:42,459 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Document: NEON_MULTI_TENANCY_EXPLAINED.md\\n\\nContent:\\n## \\ud83c\\udfaf **Benefits of Our Project-per-Tenant Approach**\\n\\n\\n\\n### **\\ud83c\\udfd7\\ufe0f Following Official Neon Best Practices**\\n\\n\\n\\n- \\n\\n**Primary Recommendation**: Exactly what Neon officially recommends\\n\\n\\n- \\n\\n**Battle-tested**: Used by successful SaaS companies at scale\\n\\n\\n- \\n\\n**Future-proof**: Aligned with Neon's roadmap and optimization efforts\\n\\n\\n\\n### **\\ud83d\\udcb0 Cost Effectiveness**\\n\\n\\n\\n- \\n\\n**Scale-to-zero**: Inactive tenants cost virtually nothing\\n\\n\\n- \\n\\n**Independent scaling**: Each tenant pays only for their usage\\n\\n\\n- \\n\\n**No wasted resources**: Compute scales per tenant needs\\n\\n\\n- \\n\\n**Predictable costs**: Clear per-tenant cost attribution\\n\\n\\n\\n### **\\ud83d\\udee1\\ufe0f Ultimate Security**\\n\\n\\n\\n- \\n\\n**Physical separation**: Complete data isolation by design\\n\\n\\n- \\n\\n**No RLS complexity**: Simple security model\\n\\n\\n-\",\n  \"Document: NEON_MULTI_TENANCY_EXPLAINED.md\\n\\nContent:\\n**Audit-friendly**: Clear tenant data boundaries\\n\\n\\n- \\n\\n**Compliance-ready**: Perfect for regulatory requirements\\n\\n\\n\\n### **\\u26a1 Performance Benefits**\\n\\n\\n\\n- \\n\\n**Dedicated compute**: No \\\"noisy neighbor\\\" problems\\n\\n\\n- \\n\\n**Optimized per tenant**: Database tuning per workload\\n\\n\\n- \\n\\n**Faster queries**: No complex tenant filtering\\n\\n\\n- \\n\\n**Better caching**: Tenant-specific query optimization\\n\\n\\n\\n### **\\ud83d\\udd27 Operational Simplicity**\\n\\n\\n\\n- \\n\\n**Standard PostgreSQL**: Each tenant database is normal PostgreSQL\\n\\n\\n- \\n\\n**Easy backups**: Per-tenant point-in-time recovery\\n\\n\\n- \\n\\n**Simple monitoring**: Clear per-tenant metrics\\n\\n\\n- \\n\\n**Regional deployment**: Tenants in specific regions for compliance\\n\\n\\n\\n## \\ud83d\\ude80 **Why This Works Perfectly for You**\\n\\n\\n\\n### **\\u2705 Following Official Neon Guidance**\\n\\n\\n\\n-\",\n  \"Document: NEON_MULTI_TENANCY_EXPLAINED.md\\n\\nContent:\\n**Neon's Primary Recommendation**: This is exactly what Neon officially recommends for scalable multi-tenant SaaS\\n\\n\\n- \\n\\n**Officially Documented**: Follows patterns from official Neon documentation\\n\\n\\n- \\n\\n**Best Practice Validated**: Used by successful companies at scale\\n\\n\\n\\n### **\\ud83c\\udfaf Perfect for Your Use Case**\\n\\n\\n\\n- \\n\\n**RAG System Ready**: Ideal for knowledge graphs and vector search\\n\\n\\n- \\n\\n**Enterprise Grade**: Meets compliance and security requirements  \\n\\n\\n- \\n\\n**Cost Optimized**: Scale-to-zero for inactive customers\\n\\n\\n- \\n\\n**Performance Optimized**: No shared resource contention\\n\\n\\n\\n### **\\ud83d\\udcc8 Scalability & Growth**\\n\\n\\n\\n- \\n\\n**Scales to thousands** of tenants seamlessly\\n\\n\\n- \\n\\n**Regional deployment** for global compliance\\n\\n\\n- \\n\\n**Independent scaling** per tenant workload\\n\\n\\n-\",\n  \"Document: NEON_MULTI_TENANCY_EXPLAINED.md\\n\\nContent:\\ncurl -X POST \\\"http://localhost:8000/tenants\\\" -d '{\\n  \\\"name\\\": \\\"Company B\\\", \\n  \\\"email\\\": \\\"admin@companyb.com\\\",\\n  \\\"region\\\": \\\"aws-us-east-1\\\"\\n}'\\n```\\n\\n\\n\\n### **2. Add Documents to Each Tenant's Database**\\n\\n\\n\\n```bash\\n\\n\\n# Add document to Tenant A's dedicated database\\n\\n\\ncurl -X POST \\\"http://localhost:8000/documents\\\" \\\\\\n  -H \\\"Authorization: Bearer TENANT_A_TOKEN\\\" \\\\\\n  -d '{\\\"title\\\": \\\"A Secret\\\", \\\"content\\\": \\\"Top secret A data\\\"}'\\n\\n\\n\\n# Add document to Tenant B's separate dedicated database\\n\\n\\ncurl -X POST \\\"http://localhost:8000/documents\\\" \\\\\\n  -H \\\"Authorization: Bearer TENANT_B_TOKEN\\\" \\\\\\n  -d '{\\\"title\\\": \\\"B Secret\\\", \\\"content\\\": \\\"Top secret B data\\\"}'\\n```\\n\\n\\n\\n### **3. Verify Natural Isolation**\\n\\n\\n\\n```bash\\n\\n\\n# Tenant A queries their dedicated database\",\n  \"Document: NEON_MULTI_TENANCY_EXPLAINED.md\\n\\nContent:\\ncurl -H \\\"Authorization: Bearer TENANT_A_TOKEN\\\" \\\\\\n  \\\"http://localhost:8000/documents\\\"\\n\\n\\n# Returns: Only \\\"A Secret\\\" document (from A's database)\\n\\n\\n\\n# Tenant B queries their separate dedicated database\\n\\n\\ncurl -H \\\"Authorization: Bearer TENANT_B_TOKEN\\\" \\\\\\n  \\\"http://localhost:8000/documents\\\"\\n\\n\\n# Returns: Only \\\"B Secret\\\" document (from B's database)\\n\\n\\n```\\n\\n\\n\\n### **4. Verify Database Separation**\\n\\n\\n\\n```python\\n\\n\\n# Direct database verification\\n\\n\\ntenant_a_db_url = await manager.get_tenant_database_url(tenant_a_id)\\ntenant_b_db_url = await manager.get_tenant_database_url(tenant_b_id)\\n\\n\\n\\n# Verify they're completely different databases\\n\\n\\nassert tenant_a_db_url != tenant_b_db_url\\nassert \\\"ep-different-endpoint\\\" in tenant_a_db_url\\nassert \\\"ep-another-endpoint\\\" in tenant_b_db_url\",\n  \"Document: NEON_MULTI_TENANCY_EXPLAINED.md\\n\\nContent:\\n# Query each database directly\\n\\n\\nasync with Database(tenant_a_db_url) as db_a:\\n    a_docs = await db_a.fetch_all(\\\"SELECT * FROM documents\\\")\\n    # Only Tenant A's documents\\n\\nasync with Database(tenant_b_db_url) as db_b:\\n    b_docs = await db_b.fetch_all(\\\"SELECT * FROM documents\\\")\\n    # Only Tenant B's documents\\n```\\n\\n\\n\\n## \\ud83d\\udccb **Summary**\\n\\n\\n\\n**Project-per-Tenant Multi-tenancy in Neon PostgreSQL** allows you to:\\n\\n1. **Follow official Neon best practices** for scalable SaaS architecture\\n\\n\\n2. \\n\\n**Achieve complete tenant isolation** through physical database separation  \\n\\n\\n3. \\n\\n**Optimize costs** with scale-to-zero for inactive tenants\\n\\n\\n4. \\n\\n**Scale independently** per tenant with dedicated compute\\n\\n\\n5. \\n\\n**Maintain operational simplicity** with standard PostgreSQL per tenant\\n\\n\\n6.\",\n  \"Document: NEON_MULTI_TENANCY_EXPLAINED.md\\n\\nContent:\\n**Meet enterprise requirements** with regional deployment and compliance\\n\\n**Our implementation** follows **official Neon recommendations** and provides **complete tenant isolation** while being **cost-effective**, **performant**, and **operationally simple**.\\n\\n**Perfect for**: Multi-tenant SaaS applications, RAG systems, knowledge graphs, and any application requiring complete customer data isolation with enterprise-grade security and scalability.\\n\\n**Key Advantages Over Shared Schema Approaches:**\\n\\n- \\u2705 **Complete physical isolation** (no RLS complexity)\\n\\n\\n- \\n\\n\\u2705 **Scale-to-zero cost benefits** (inactive tenants cost nothing)  \\n\\n\\n- \\n\\n\\u2705 **Independent performance** (no noisy neighbor issues)\\n\\n\\n- \\n\\n\\u2705 **Operational simplicity** (standard PostgreSQL management)\\n\\n\\n-\",\n  \"Document: NEON_MULTI_TENANCY_EXPLAINED.md\\n\\nContent:\\n\\u2705 **Enterprise compliance** (perfect audit trails and data separation)\\n\\n\\ud83c\\udf89 **You're ready to build secure, scalable, cost-effective multi-tenant applications following official Neon best practices!**\",\n  \"Document: temporal_rag_test_story.md\\n\\nContent:\\n# \\ud83d\\udcda Temporal Knowledge Story for RAG Testing\\n\\n\\n\\n## \\ud83e\\udde0 Story: The Life and Choices of Aanya Sharma (2023\\u20132025)\\n\\n\\n\\n### \\ud83d\\udcc5 December 2023\\n\\n\\n- Aanya Sharma is a product manager at **Zyphos Tech**, living in **Bangalore**.\\n\\n\\n- \\n\\nShe prefers **Android phones**. Her favorite phone is the **OnePlus 11R**.\\n\\n\\n- \\n\\nShe is using **Notion** as her preferred note-taking app.\\n\\n\\n- \\n\\nShe uses **Slack** for team collaboration.\\n\\n\\n- \\n\\nHer favorite coffee shop is **Third Wave Coffee, Indiranagar**.\\n\\n\\n\\n### \\ud83d\\udcc5 February 2024\\n\\n\\n- Aanya moves to **Hyderabad** for a project.\\n\\n\\n- \\n\\nShe discovers and starts preferring **Samsung Galaxy Z Fold 5** over OnePlus.\\n\\n\\n- \\n\\nShe starts using **Obsidian** instead of Notion due to better knowledge graphing.\\n\\n\\n- \\n\\nHer favorite caf\\u00e9 becomes **Roastery Coffee House** in Hyderabad.\\n\\n\\n-\",\n  \"Document: temporal_rag_test_story.md\\n\\nContent:\\nSlack is replaced by **Microsoft Teams** in her organization.\\n\\n\\n\\n### \\ud83d\\udcc5 June 2024\\n\\n\\n- Aanya buys an **iPhone 15 Pro Max** after being influenced by her designer friends.\\n\\n\\n- \\n\\nShe now prefers **Apple devices**.\\n\\n\\n- \\n\\nShe starts using **Apple Notes**.\\n\\n\\n- \\n\\nShe still uses Microsoft Teams.\\n\\n\\n- \\n\\nHer favorite coffee shop is now **Starbucks, Banjara Hills**.\\n\\n\\n\\n### \\ud83d\\udcc5 September 2024\\n\\n\\n- Aanya is promoted to **Director of Product**.\\n\\n\\n- \\n\\nShe starts managing two teams:\\n  - **Product Team A**: Working on internal tools.\\n  - **Product Team B**: Working on mobile consumer app.\\n\\n\\n- \\n\\nProduct Team A uses **Jira**, while Team B uses **Linear**.\\n\\n\\n- \\n\\nShe uses **Miro** heavily for brainstorming and workshops.\\n\\n\\n- \\n\\nShe starts splitting her time between **Hyderabad** and **Mumbai**.\\n\\n\\n-\"\n]\n        \"Document: temporal_rag_test_story.md\\n\\nContent:\\nHer preferred coffee shop is now **Sonder Coffee, HSR Layout** when she\\u2019s in Bangalore for board meetings.\\n\\n---\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'Sonder Coffee, HSR Layout', 'summary': '', 'entity_types': ['Entity'], 'attributes': {}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{"properties": {"summary": "Sonder Coffee, HSR Layout is a coffee shop that Aanya Sharma visits when she is in Bangalore for board meetings. This information is part of a temporal knowledge story detailing Aanya's life and choices between December 2023 and September 2024."}, "required": ["summary"], "title": "EntityAttributes_8f83fede18b34c9ea975f9548ea6d9ce", "type": "object"}
```

2025-09-15 12:47:42,461 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-09-15 12:47:42,461 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-09-15 12:47:42,464 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-09-15 12:47:44,590 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-09-15 12:47:44,590 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Document: NEON_MULTI_TENANCY_EXPLAINED.md\\n\\nContent:\\n## \\ud83c\\udfaf **Benefits of Our Project-per-Tenant Approach**\\n\\n\\n\\n### **\\ud83c\\udfd7\\ufe0f Following Official Neon Best Practices**\\n\\n\\n\\n- \\n\\n**Primary Recommendation**: Exactly what Neon officially recommends\\n\\n\\n- \\n\\n**Battle-tested**: Used by successful SaaS companies at scale\\n\\n\\n- \\n\\n**Future-proof**: Aligned with Neon's roadmap and optimization efforts\\n\\n\\n\\n### **\\ud83d\\udcb0 Cost Effectiveness**\\n\\n\\n\\n- \\n\\n**Scale-to-zero**: Inactive tenants cost virtually nothing\\n\\n\\n- \\n\\n**Independent scaling**: Each tenant pays only for their usage\\n\\n\\n- \\n\\n**No wasted resources**: Compute scales per tenant needs\\n\\n\\n- \\n\\n**Predictable costs**: Clear per-tenant cost attribution\\n\\n\\n\\n### **\\ud83d\\udee1\\ufe0f Ultimate Security**\\n\\n\\n\\n- \\n\\n**Physical separation**: Complete data isolation by design\\n\\n\\n- \\n\\n**No RLS complexity**: Simple security model\\n\\n\\n-\",\n  \"Document: NEON_MULTI_TENANCY_EXPLAINED.md\\n\\nContent:\\n**Audit-friendly**: Clear tenant data boundaries\\n\\n\\n- \\n\\n**Compliance-ready**: Perfect for regulatory requirements\\n\\n\\n\\n### **\\u26a1 Performance Benefits**\\n\\n\\n\\n- \\n\\n**Dedicated compute**: No \\\"noisy neighbor\\\" problems\\n\\n\\n- \\n\\n**Optimized per tenant**: Database tuning per workload\\n\\n\\n- \\n\\n**Faster queries**: No complex tenant filtering\\n\\n\\n- \\n\\n**Better caching**: Tenant-specific query optimization\\n\\n\\n\\n### **\\ud83d\\udd27 Operational Simplicity**\\n\\n\\n\\n- \\n\\n**Standard PostgreSQL**: Each tenant database is normal PostgreSQL\\n\\n\\n- \\n\\n**Easy backups**: Per-tenant point-in-time recovery\\n\\n\\n- \\n\\n**Simple monitoring**: Clear per-tenant metrics\\n\\n\\n- \\n\\n**Regional deployment**: Tenants in specific regions for compliance\\n\\n\\n\\n## \\ud83d\\ude80 **Why This Works Perfectly for You**\\n\\n\\n\\n### **\\u2705 Following Official Neon Guidance**\\n\\n\\n\\n-\",\n  \"Document: NEON_MULTI_TENANCY_EXPLAINED.md\\n\\nContent:\\n**Neon's Primary Recommendation**: This is exactly what Neon officially recommends for scalable multi-tenant SaaS\\n\\n\\n- \\n\\n**Officially Documented**: Follows patterns from official Neon documentation\\n\\n\\n- \\n\\n**Best Practice Validated**: Used by successful companies at scale\\n\\n\\n\\n### **\\ud83c\\udfaf Perfect for Your Use Case**\\n\\n\\n\\n- \\n\\n**RAG System Ready**: Ideal for knowledge graphs and vector search\\n\\n\\n- \\n\\n**Enterprise Grade**: Meets compliance and security requirements  \\n\\n\\n- \\n\\n**Cost Optimized**: Scale-to-zero for inactive customers\\n\\n\\n- \\n\\n**Performance Optimized**: No shared resource contention\\n\\n\\n\\n### **\\ud83d\\udcc8 Scalability & Growth**\\n\\n\\n\\n- \\n\\n**Scales to thousands** of tenants seamlessly\\n\\n\\n- \\n\\n**Regional deployment** for global compliance\\n\\n\\n- \\n\\n**Independent scaling** per tenant workload\\n\\n\\n-\",\n  \"Document: NEON_MULTI_TENANCY_EXPLAINED.md\\n\\nContent:\\ncurl -X POST \\\"http://localhost:8000/tenants\\\" -d '{\\n  \\\"name\\\": \\\"Company B\\\", \\n  \\\"email\\\": \\\"admin@companyb.com\\\",\\n  \\\"region\\\": \\\"aws-us-east-1\\\"\\n}'\\n```\\n\\n\\n\\n### **2. Add Documents to Each Tenant's Database**\\n\\n\\n\\n```bash\\n\\n\\n# Add document to Tenant A's dedicated database\\n\\n\\ncurl -X POST \\\"http://localhost:8000/documents\\\" \\\\\\n  -H \\\"Authorization: Bearer TENANT_A_TOKEN\\\" \\\\\\n  -d '{\\\"title\\\": \\\"A Secret\\\", \\\"content\\\": \\\"Top secret A data\\\"}'\\n\\n\\n\\n# Add document to Tenant B's separate dedicated database\\n\\n\\ncurl -X POST \\\"http://localhost:8000/documents\\\" \\\\\\n  -H \\\"Authorization: Bearer TENANT_B_TOKEN\\\" \\\\\\n  -d '{\\\"title\\\": \\\"B Secret\\\", \\\"content\\\": \\\"Top secret B data\\\"}'\\n```\\n\\n\\n\\n### **3. Verify Natural Isolation**\\n\\n\\n\\n```bash\\n\\n\\n# Tenant A queries their dedicated database\",\n  \"Document: NEON_MULTI_TENANCY_EXPLAINED.md\\n\\nContent:\\ncurl -H \\\"Authorization: Bearer TENANT_A_TOKEN\\\" \\\\\\n  \\\"http://localhost:8000/documents\\\"\\n\\n\\n# Returns: Only \\\"A Secret\\\" document (from A's database)\\n\\n\\n\\n# Tenant B queries their separate dedicated database\\n\\n\\ncurl -H \\\"Authorization: Bearer TENANT_B_TOKEN\\\" \\\\\\n  \\\"http://localhost:8000/documents\\\"\\n\\n\\n# Returns: Only \\\"B Secret\\\" document (from B's database)\\n\\n\\n```\\n\\n\\n\\n### **4. Verify Database Separation**\\n\\n\\n\\n```python\\n\\n\\n# Direct database verification\\n\\n\\ntenant_a_db_url = await manager.get_tenant_database_url(tenant_a_id)\\ntenant_b_db_url = await manager.get_tenant_database_url(tenant_b_id)\\n\\n\\n\\n# Verify they're completely different databases\\n\\n\\nassert tenant_a_db_url != tenant_b_db_url\\nassert \\\"ep-different-endpoint\\\" in tenant_a_db_url\\nassert \\\"ep-another-endpoint\\\" in tenant_b_db_url\",\n  \"Document: NEON_MULTI_TENANCY_EXPLAINED.md\\n\\nContent:\\n# Query each database directly\\n\\n\\nasync with Database(tenant_a_db_url) as db_a:\\n    a_docs = await db_a.fetch_all(\\\"SELECT * FROM documents\\\")\\n    # Only Tenant A's documents\\n\\nasync with Database(tenant_b_db_url) as db_b:\\n    b_docs = await db_b.fetch_all(\\\"SELECT * FROM documents\\\")\\n    # Only Tenant B's documents\\n```\\n\\n\\n\\n## \\ud83d\\udccb **Summary**\\n\\n\\n\\n**Project-per-Tenant Multi-tenancy in Neon PostgreSQL** allows you to:\\n\\n1. **Follow official Neon best practices** for scalable SaaS architecture\\n\\n\\n2. \\n\\n**Achieve complete tenant isolation** through physical database separation  \\n\\n\\n3. \\n\\n**Optimize costs** with scale-to-zero for inactive tenants\\n\\n\\n4. \\n\\n**Scale independently** per tenant with dedicated compute\\n\\n\\n5. \\n\\n**Maintain operational simplicity** with standard PostgreSQL per tenant\\n\\n\\n6.\",\n  \"Document: NEON_MULTI_TENANCY_EXPLAINED.md\\n\\nContent:\\n**Meet enterprise requirements** with regional deployment and compliance\\n\\n**Our implementation** follows **official Neon recommendations** and provides **complete tenant isolation** while being **cost-effective**, **performant**, and **operationally simple**.\\n\\n**Perfect for**: Multi-tenant SaaS applications, RAG systems, knowledge graphs, and any application requiring complete customer data isolation with enterprise-grade security and scalability.\\n\\n**Key Advantages Over Shared Schema Approaches:**\\n\\n- \\u2705 **Complete physical isolation** (no RLS complexity)\\n\\n\\n- \\n\\n\\u2705 **Scale-to-zero cost benefits** (inactive tenants cost nothing)  \\n\\n\\n- \\n\\n\\u2705 **Independent performance** (no noisy neighbor issues)\\n\\n\\n- \\n\\n\\u2705 **Operational simplicity** (standard PostgreSQL management)\\n\\n\\n-\",\n  \"Document: NEON_MULTI_TENANCY_EXPLAINED.md\\n\\nContent:\\n\\u2705 **Enterprise compliance** (perfect audit trails and data separation)\\n\\n\\ud83c\\udf89 **You're ready to build secure, scalable, cost-effective multi-tenant applications following official Neon best practices!**\",\n  \"Document: temporal_rag_test_story.md\\n\\nContent:\\n# \\ud83d\\udcda Temporal Knowledge Story for RAG Testing\\n\\n\\n\\n## \\ud83e\\udde0 Story: The Life and Choices of Aanya Sharma (2023\\u20132025)\\n\\n\\n\\n### \\ud83d\\udcc5 December 2023\\n\\n\\n- Aanya Sharma is a product manager at **Zyphos Tech**, living in **Bangalore**.\\n\\n\\n- \\n\\nShe prefers **Android phones**. Her favorite phone is the **OnePlus 11R**.\\n\\n\\n- \\n\\nShe is using **Notion** as her preferred note-taking app.\\n\\n\\n- \\n\\nShe uses **Slack** for team collaboration.\\n\\n\\n- \\n\\nHer favorite coffee shop is **Third Wave Coffee, Indiranagar**.\\n\\n\\n\\n### \\ud83d\\udcc5 February 2024\\n\\n\\n- Aanya moves to **Hyderabad** for a project.\\n\\n\\n- \\n\\nShe discovers and starts preferring **Samsung Galaxy Z Fold 5** over OnePlus.\\n\\n\\n- \\n\\nShe starts using **Obsidian** instead of Notion due to better knowledge graphing.\\n\\n\\n- \\n\\nHer favorite caf\\u00e9 becomes **Roastery Coffee House** in Hyderabad.\\n\\n\\n-\",\n  \"Document: temporal_rag_test_story.md\\n\\nContent:\\nSlack is replaced by **Microsoft Teams** in her organization.\\n\\n\\n\\n### \\ud83d\\udcc5 June 2024\\n\\n\\n- Aanya buys an **iPhone 15 Pro Max** after being influenced by her designer friends.\\n\\n\\n- \\n\\nShe now prefers **Apple devices**.\\n\\n\\n- \\n\\nShe starts using **Apple Notes**.\\n\\n\\n- \\n\\nShe still uses Microsoft Teams.\\n\\n\\n- \\n\\nHer favorite coffee shop is now **Starbucks, Banjara Hills**.\\n\\n\\n\\n### \\ud83d\\udcc5 September 2024\\n\\n\\n- Aanya is promoted to **Director of Product**.\\n\\n\\n- \\n\\nShe starts managing two teams:\\n  - **Product Team A**: Working on internal tools.\\n  - **Product Team B**: Working on mobile consumer app.\\n\\n\\n- \\n\\nProduct Team A uses **Jira**, while Team B uses **Linear**.\\n\\n\\n- \\n\\nShe uses **Miro** heavily for brainstorming and workshops.\\n\\n\\n- \\n\\nShe starts splitting her time between **Hyderabad** and **Mumbai**.\\n\\n\\n-\"\n]\n        \"Document: temporal_rag_test_story.md\\n\\nContent:\\nHer preferred coffee shop is now **Sonder Coffee, HSR Layout** when she\\u2019s in Bangalore for board meetings.\\n\\n---\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'Sonder Coffee, HSR Layout', 'summary': '', 'entity_types': ['Entity'], 'attributes': {}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  },
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "The previous response attempt was invalid. Error type: Exception. Error details: . Please try again with a valid response, ensuring the output matches the expected format and constraints."
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{"properties": {"summary": "Sonder Coffee, HSR Layout is a coffee shop that Aanya Sharma visits. She started frequenting it in September 2024 when she was splitting her time between Hyderabad and Mumbai and had board meetings in Bangalore. It is located in HSR Layout."}}
```

2025-09-15 12:47:44,591 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-09-15 12:47:44,591 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 2/2): 
2025-09-15 12:47:44,591 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed and retries are exhausted.
2025-09-15 12:47:44,591 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "role": "system",
    "content": "You are a helpful assistant that extracts entity properties from the provided text.\nDo not escape unicode characters.\n\n\nAny extracted information should be returned in the same language as it was written in."
  },
  {
    "role": "user",
    "content": "\n\n        <MESSAGES>\n        [\n  \"Document: NEON_MULTI_TENANCY_EXPLAINED.md\\n\\nContent:\\n## \\ud83c\\udfaf **Benefits of Our Project-per-Tenant Approach**\\n\\n\\n\\n### **\\ud83c\\udfd7\\ufe0f Following Official Neon Best Practices**\\n\\n\\n\\n- \\n\\n**Primary Recommendation**: Exactly what Neon officially recommends\\n\\n\\n- \\n\\n**Battle-tested**: Used by successful SaaS companies at scale\\n\\n\\n- \\n\\n**Future-proof**: Aligned with Neon's roadmap and optimization efforts\\n\\n\\n\\n### **\\ud83d\\udcb0 Cost Effectiveness**\\n\\n\\n\\n- \\n\\n**Scale-to-zero**: Inactive tenants cost virtually nothing\\n\\n\\n- \\n\\n**Independent scaling**: Each tenant pays only for their usage\\n\\n\\n- \\n\\n**No wasted resources**: Compute scales per tenant needs\\n\\n\\n- \\n\\n**Predictable costs**: Clear per-tenant cost attribution\\n\\n\\n\\n### **\\ud83d\\udee1\\ufe0f Ultimate Security**\\n\\n\\n\\n- \\n\\n**Physical separation**: Complete data isolation by design\\n\\n\\n- \\n\\n**No RLS complexity**: Simple security model\\n\\n\\n-\",\n  \"Document: NEON_MULTI_TENANCY_EXPLAINED.md\\n\\nContent:\\n**Audit-friendly**: Clear tenant data boundaries\\n\\n\\n- \\n\\n**Compliance-ready**: Perfect for regulatory requirements\\n\\n\\n\\n### **\\u26a1 Performance Benefits**\\n\\n\\n\\n- \\n\\n**Dedicated compute**: No \\\"noisy neighbor\\\" problems\\n\\n\\n- \\n\\n**Optimized per tenant**: Database tuning per workload\\n\\n\\n- \\n\\n**Faster queries**: No complex tenant filtering\\n\\n\\n- \\n\\n**Better caching**: Tenant-specific query optimization\\n\\n\\n\\n### **\\ud83d\\udd27 Operational Simplicity**\\n\\n\\n\\n- \\n\\n**Standard PostgreSQL**: Each tenant database is normal PostgreSQL\\n\\n\\n- \\n\\n**Easy backups**: Per-tenant point-in-time recovery\\n\\n\\n- \\n\\n**Simple monitoring**: Clear per-tenant metrics\\n\\n\\n- \\n\\n**Regional deployment**: Tenants in specific regions for compliance\\n\\n\\n\\n## \\ud83d\\ude80 **Why This Works Perfectly for You**\\n\\n\\n\\n### **\\u2705 Following Official Neon Guidance**\\n\\n\\n\\n-\",\n  \"Document: NEON_MULTI_TENANCY_EXPLAINED.md\\n\\nContent:\\n**Neon's Primary Recommendation**: This is exactly what Neon officially recommends for scalable multi-tenant SaaS\\n\\n\\n- \\n\\n**Officially Documented**: Follows patterns from official Neon documentation\\n\\n\\n- \\n\\n**Best Practice Validated**: Used by successful companies at scale\\n\\n\\n\\n### **\\ud83c\\udfaf Perfect for Your Use Case**\\n\\n\\n\\n- \\n\\n**RAG System Ready**: Ideal for knowledge graphs and vector search\\n\\n\\n- \\n\\n**Enterprise Grade**: Meets compliance and security requirements  \\n\\n\\n- \\n\\n**Cost Optimized**: Scale-to-zero for inactive customers\\n\\n\\n- \\n\\n**Performance Optimized**: No shared resource contention\\n\\n\\n\\n### **\\ud83d\\udcc8 Scalability & Growth**\\n\\n\\n\\n- \\n\\n**Scales to thousands** of tenants seamlessly\\n\\n\\n- \\n\\n**Regional deployment** for global compliance\\n\\n\\n- \\n\\n**Independent scaling** per tenant workload\\n\\n\\n-\",\n  \"Document: NEON_MULTI_TENANCY_EXPLAINED.md\\n\\nContent:\\ncurl -X POST \\\"http://localhost:8000/tenants\\\" -d '{\\n  \\\"name\\\": \\\"Company B\\\", \\n  \\\"email\\\": \\\"admin@companyb.com\\\",\\n  \\\"region\\\": \\\"aws-us-east-1\\\"\\n}'\\n```\\n\\n\\n\\n### **2. Add Documents to Each Tenant's Database**\\n\\n\\n\\n```bash\\n\\n\\n# Add document to Tenant A's dedicated database\\n\\n\\ncurl -X POST \\\"http://localhost:8000/documents\\\" \\\\\\n  -H \\\"Authorization: Bearer TENANT_A_TOKEN\\\" \\\\\\n  -d '{\\\"title\\\": \\\"A Secret\\\", \\\"content\\\": \\\"Top secret A data\\\"}'\\n\\n\\n\\n# Add document to Tenant B's separate dedicated database\\n\\n\\ncurl -X POST \\\"http://localhost:8000/documents\\\" \\\\\\n  -H \\\"Authorization: Bearer TENANT_B_TOKEN\\\" \\\\\\n  -d '{\\\"title\\\": \\\"B Secret\\\", \\\"content\\\": \\\"Top secret B data\\\"}'\\n```\\n\\n\\n\\n### **3. Verify Natural Isolation**\\n\\n\\n\\n```bash\\n\\n\\n# Tenant A queries their dedicated database\",\n  \"Document: NEON_MULTI_TENANCY_EXPLAINED.md\\n\\nContent:\\ncurl -H \\\"Authorization: Bearer TENANT_A_TOKEN\\\" \\\\\\n  \\\"http://localhost:8000/documents\\\"\\n\\n\\n# Returns: Only \\\"A Secret\\\" document (from A's database)\\n\\n\\n\\n# Tenant B queries their separate dedicated database\\n\\n\\ncurl -H \\\"Authorization: Bearer TENANT_B_TOKEN\\\" \\\\\\n  \\\"http://localhost:8000/documents\\\"\\n\\n\\n# Returns: Only \\\"B Secret\\\" document (from B's database)\\n\\n\\n```\\n\\n\\n\\n### **4. Verify Database Separation**\\n\\n\\n\\n```python\\n\\n\\n# Direct database verification\\n\\n\\ntenant_a_db_url = await manager.get_tenant_database_url(tenant_a_id)\\ntenant_b_db_url = await manager.get_tenant_database_url(tenant_b_id)\\n\\n\\n\\n# Verify they're completely different databases\\n\\n\\nassert tenant_a_db_url != tenant_b_db_url\\nassert \\\"ep-different-endpoint\\\" in tenant_a_db_url\\nassert \\\"ep-another-endpoint\\\" in tenant_b_db_url\",\n  \"Document: NEON_MULTI_TENANCY_EXPLAINED.md\\n\\nContent:\\n# Query each database directly\\n\\n\\nasync with Database(tenant_a_db_url) as db_a:\\n    a_docs = await db_a.fetch_all(\\\"SELECT * FROM documents\\\")\\n    # Only Tenant A's documents\\n\\nasync with Database(tenant_b_db_url) as db_b:\\n    b_docs = await db_b.fetch_all(\\\"SELECT * FROM documents\\\")\\n    # Only Tenant B's documents\\n```\\n\\n\\n\\n## \\ud83d\\udccb **Summary**\\n\\n\\n\\n**Project-per-Tenant Multi-tenancy in Neon PostgreSQL** allows you to:\\n\\n1. **Follow official Neon best practices** for scalable SaaS architecture\\n\\n\\n2. \\n\\n**Achieve complete tenant isolation** through physical database separation  \\n\\n\\n3. \\n\\n**Optimize costs** with scale-to-zero for inactive tenants\\n\\n\\n4. \\n\\n**Scale independently** per tenant with dedicated compute\\n\\n\\n5. \\n\\n**Maintain operational simplicity** with standard PostgreSQL per tenant\\n\\n\\n6.\",\n  \"Document: NEON_MULTI_TENANCY_EXPLAINED.md\\n\\nContent:\\n**Meet enterprise requirements** with regional deployment and compliance\\n\\n**Our implementation** follows **official Neon recommendations** and provides **complete tenant isolation** while being **cost-effective**, **performant**, and **operationally simple**.\\n\\n**Perfect for**: Multi-tenant SaaS applications, RAG systems, knowledge graphs, and any application requiring complete customer data isolation with enterprise-grade security and scalability.\\n\\n**Key Advantages Over Shared Schema Approaches:**\\n\\n- \\u2705 **Complete physical isolation** (no RLS complexity)\\n\\n\\n- \\n\\n\\u2705 **Scale-to-zero cost benefits** (inactive tenants cost nothing)  \\n\\n\\n- \\n\\n\\u2705 **Independent performance** (no noisy neighbor issues)\\n\\n\\n- \\n\\n\\u2705 **Operational simplicity** (standard PostgreSQL management)\\n\\n\\n-\",\n  \"Document: NEON_MULTI_TENANCY_EXPLAINED.md\\n\\nContent:\\n\\u2705 **Enterprise compliance** (perfect audit trails and data separation)\\n\\n\\ud83c\\udf89 **You're ready to build secure, scalable, cost-effective multi-tenant applications following official Neon best practices!**\",\n  \"Document: temporal_rag_test_story.md\\n\\nContent:\\n# \\ud83d\\udcda Temporal Knowledge Story for RAG Testing\\n\\n\\n\\n## \\ud83e\\udde0 Story: The Life and Choices of Aanya Sharma (2023\\u20132025)\\n\\n\\n\\n### \\ud83d\\udcc5 December 2023\\n\\n\\n- Aanya Sharma is a product manager at **Zyphos Tech**, living in **Bangalore**.\\n\\n\\n- \\n\\nShe prefers **Android phones**. Her favorite phone is the **OnePlus 11R**.\\n\\n\\n- \\n\\nShe is using **Notion** as her preferred note-taking app.\\n\\n\\n- \\n\\nShe uses **Slack** for team collaboration.\\n\\n\\n- \\n\\nHer favorite coffee shop is **Third Wave Coffee, Indiranagar**.\\n\\n\\n\\n### \\ud83d\\udcc5 February 2024\\n\\n\\n- Aanya moves to **Hyderabad** for a project.\\n\\n\\n- \\n\\nShe discovers and starts preferring **Samsung Galaxy Z Fold 5** over OnePlus.\\n\\n\\n- \\n\\nShe starts using **Obsidian** instead of Notion due to better knowledge graphing.\\n\\n\\n- \\n\\nHer favorite caf\\u00e9 becomes **Roastery Coffee House** in Hyderabad.\\n\\n\\n-\",\n  \"Document: temporal_rag_test_story.md\\n\\nContent:\\nSlack is replaced by **Microsoft Teams** in her organization.\\n\\n\\n\\n### \\ud83d\\udcc5 June 2024\\n\\n\\n- Aanya buys an **iPhone 15 Pro Max** after being influenced by her designer friends.\\n\\n\\n- \\n\\nShe now prefers **Apple devices**.\\n\\n\\n- \\n\\nShe starts using **Apple Notes**.\\n\\n\\n- \\n\\nShe still uses Microsoft Teams.\\n\\n\\n- \\n\\nHer favorite coffee shop is now **Starbucks, Banjara Hills**.\\n\\n\\n\\n### \\ud83d\\udcc5 September 2024\\n\\n\\n- Aanya is promoted to **Director of Product**.\\n\\n\\n- \\n\\nShe starts managing two teams:\\n  - **Product Team A**: Working on internal tools.\\n  - **Product Team B**: Working on mobile consumer app.\\n\\n\\n- \\n\\nProduct Team A uses **Jira**, while Team B uses **Linear**.\\n\\n\\n- \\n\\nShe uses **Miro** heavily for brainstorming and workshops.\\n\\n\\n- \\n\\nShe starts splitting her time between **Hyderabad** and **Mumbai**.\\n\\n\\n-\"\n]\n        \"Document: temporal_rag_test_story.md\\n\\nContent:\\nHer preferred coffee shop is now **Sonder Coffee, HSR Layout** when she\\u2019s in Bangalore for board meetings.\\n\\n---\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'Sonder Coffee, HSR Layout', 'summary': '', 'entity_types': ['Entity'], 'attributes': {}}\n        </ENTITY>\n        "
  },
  {
    "role": "user",
    "content": "The previous response attempt was invalid. Error type: Exception. Error details: . Please try again with a valid response, ensuring the output matches the expected format and constraints."
  },
  {
    "role": "user",
    "content": "The previous response attempt was invalid. Error type: Exception. Error details: . Please try again with a valid response, ensuring the output matches the expected format and constraints."
  }
]
No raw output available
2025-09-15 12:47:44,592 - graphiti_core.llm_client.gemini_client - ERROR - Max retries (2) exceeded. Last error: 
2025-09-15 12:47:44,593 - tenant_graphiti_client - ERROR - ❌ Failed to add episode for tenant 5a115121-e3a2-439c-bc70-960c033581d2: 
2025-09-15 12:47:44,593 - tenant_data_ingestion_service - ERROR - Failed to add chunk 3 to tenant graph
2025-09-15 12:47:44,593 - tenant_data_ingestion_service - INFO - Successfully added 2 episodes to tenant 5a115121-e3a2-439c-bc70-960c033581d2 graph namespace
2025-09-15 12:47:44,593 - tenant_data_ingestion_service - INFO - Successfully ingested document 3639c63c-694a-46ab-8452-2f4a66db3fec for tenant 5a115121-e3a2-439c-bc70-960c033581d2 in 269751.31ms
2025-09-15 12:51:34,780 - interactive_multi_tenant_api - INFO - Shutting down Multi-Tenant RAG API...
2025-09-15 12:51:43,662 - __main__ - INFO - Starting Interactive Multi-Tenant RAG API on 127.0.0.1:8000
2025-09-15 12:51:43,679 - interactive_multi_tenant_api - INFO - Starting Multi-Tenant RAG API...
2025-09-15 12:51:43,679 - interactive_multi_tenant_api - INFO - Neo4j URI: neo4j://127.0.0.1:7687
2025-09-15 12:51:43,679 - interactive_multi_tenant_api - INFO - Neo4j User: neo4j
2025-09-15 12:51:43,679 - interactive_multi_tenant_api - INFO - Neo4j Password: ***
2025-09-15 12:51:43,679 - tenant_manager - INFO - TenantManager initialized with Graphiti client
2025-09-15 12:51:43,679 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-15 12:51:43,679 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-09-15 12:51:43,679 - multi_tenant_ingestion - INFO - Multi-tenant ingestion pipeline initialized
2025-09-15 12:51:43,679 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-09-15 12:51:43,679 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-09-15 12:51:43,679 - interactive_multi_tenant_api - INFO - Tenant manager initialized
2025-09-15 12:51:43,683 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-15 12:51:43,683 - interactive_multi_tenant_api - INFO - Tenant ingestion service initialized
2025-09-15 12:51:43,683 - auth_middleware - INFO - JWT Authenticator initialized
2025-09-15 12:51:43,683 - interactive_multi_tenant_api - INFO - JWT authenticator initialized
2025-09-15 12:51:43,683 - interactive_multi_tenant_api - INFO - 🎯 Multi-Tenant RAG API ready - all backend logs will appear in this terminal
2025-09-15 12:51:43,683 - interactive_multi_tenant_api - INFO - 📊 Backend activity from CLI and API operations will be shown below:
2025-09-15 12:58:30,651 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-09-15 12:58:30,811 - catalog_database - INFO - Catalog database connection test successful
2025-09-15 12:58:30,814 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-15 12:58:30,858 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-15 12:58:30,884 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-09-15 12:58:30,960 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX mention_group_id FOR ()-[e:MENTIONS]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)'
2025-09-15 12:58:30,961 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX has_member_uuid FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)'
2025-09-15 12:58:30,961 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_group_id IF NOT EXISTS FOR (e:Episodic) ON (e.group_id)` has no effect.} {description: `RANGE INDEX episode_group_id FOR (e:Episodic) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX episode_group_id IF NOT EXISTS FOR (n:Episodic) ON (n.group_id)'
2025-09-15 12:58:30,962 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_uuid IF NOT EXISTS FOR (e:Entity) ON (e.uuid)` has no effect.} {description: `RANGE INDEX entity_uuid FOR (e:Entity) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX entity_uuid IF NOT EXISTS FOR (n:Entity) ON (n.uuid)'
2025-09-15 12:58:30,962 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX mention_uuid FOR ()-[e:MENTIONS]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)'
2025-09-15 12:58:30,963 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)` has no effect.} {description: `RANGE INDEX name_edge_index FOR ()-[e:RELATES_TO]-() ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)'
2025-09-15 12:58:30,963 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_group_id IF NOT EXISTS FOR (e:Entity) ON (e.group_id)` has no effect.} {description: `RANGE INDEX entity_group_id FOR (e:Entity) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX entity_group_id IF NOT EXISTS FOR (n:Entity) ON (n.group_id)'
2025-09-15 12:58:30,964 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.name)` has no effect.} {description: `RANGE INDEX name_entity_index FOR (e:Entity) ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.name)'
2025-09-15 12:58:30,964 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_episodic_index FOR (e:Episodic) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.created_at)'
2025-09-15 12:58:30,964 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_entity_index FOR (e:Entity) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.created_at)'
2025-09-15 12:58:30,964 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)'
2025-09-15 12:58:30,964 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_uuid IF NOT EXISTS FOR (e:Episodic) ON (e.uuid)` has no effect.} {description: `RANGE INDEX episode_uuid FOR (e:Episodic) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX episode_uuid IF NOT EXISTS FOR (n:Episodic) ON (n.uuid)'
2025-09-15 12:58:30,964 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)'
2025-09-15 12:58:30,965 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_episodic_index FOR (e:Episodic) ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.valid_at)'
2025-09-15 12:58:30,965 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX relation_group_id FOR ()-[e:RELATES_TO]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)'
2025-09-15 12:58:30,965 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` has no effect.} {description: `RANGE INDEX expired_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` already exists.} {position: None} for query: 'CREATE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)'
2025-09-15 12:58:30,966 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX relation_uuid FOR ()-[e:RELATES_TO]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)'
2025-09-15 12:58:30,966 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX episode_content IF NOT EXISTS FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` has no effect.} {description: `FULLTEXT INDEX episode_content FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX episode_content IF NOT EXISTS \n            FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]'
2025-09-15 12:58:30,966 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX community_uuid IF NOT EXISTS FOR (e:Community) ON (e.uuid)` has no effect.} {description: `RANGE INDEX community_uuid FOR (e:Community) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX community_uuid IF NOT EXISTS FOR (n:Community) ON (n.uuid)'
2025-09-15 12:58:30,967 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` has no effect.} {description: `RANGE INDEX invalid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` already exists.} {position: None} for query: 'CREATE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)'
2025-09-15 12:58:30,968 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` has no effect.} {description: `FULLTEXT INDEX node_name_and_summary FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS \n            FOR (n:Entity) ON EACH [n.name, n.summary, n.group_id]'
2025-09-15 12:58:30,968 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX community_name IF NOT EXISTS FOR (e:Community) ON EACH [e.name, e.group_id]` has no effect.} {description: `FULLTEXT INDEX community_name FOR (e:Community) ON EACH [e.name, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX community_name IF NOT EXISTS \n            FOR (n:Community) ON EACH [n.name, n.group_id]'
2025-09-15 12:58:30,968 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` has no effect.} {description: `FULLTEXT INDEX edge_name_and_fact FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS \n            FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]'
2025-09-15 12:58:30,969 - tenant_graphiti_client - INFO - TenantGraphitiClient initialized successfully with LLM: gemini-2.0-flash-thinking-exp-1219
2025-09-15 14:14:24,148 - __main__ - INFO - Starting Interactive Multi-Tenant RAG API on 127.0.0.1:8000
2025-09-15 14:14:24,167 - interactive_multi_tenant_api - INFO - Starting Multi-Tenant RAG API...
2025-09-15 14:14:24,167 - interactive_multi_tenant_api - INFO - Neo4j URI: neo4j://127.0.0.1:7687
2025-09-15 14:14:24,167 - interactive_multi_tenant_api - INFO - Neo4j User: neo4j
2025-09-15 14:14:24,167 - interactive_multi_tenant_api - INFO - Neo4j Password: ***
2025-09-15 14:14:24,167 - tenant_manager - INFO - TenantManager initialized with Graphiti client
2025-09-15 14:14:24,167 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-15 14:14:24,167 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-09-15 14:14:24,167 - multi_tenant_ingestion - INFO - Multi-tenant ingestion pipeline initialized
2025-09-15 14:14:24,167 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-09-15 14:14:24,167 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-09-15 14:14:24,167 - interactive_multi_tenant_api - INFO - Tenant manager initialized
2025-09-15 14:14:24,171 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-09-15 14:14:24,171 - interactive_multi_tenant_api - INFO - Tenant ingestion service initialized
2025-09-15 14:14:24,171 - auth_middleware - INFO - JWT Authenticator initialized
2025-09-15 14:14:24,171 - interactive_multi_tenant_api - INFO - JWT authenticator initialized
2025-09-15 14:14:24,171 - interactive_multi_tenant_api - INFO - 🎯 Multi-Tenant RAG API ready - all backend logs will appear in this terminal
2025-09-15 14:14:24,172 - interactive_multi_tenant_api - INFO - 📊 Backend activity from CLI and API operations will be shown below:
2025-09-15 14:14:24,172 - interactive_multi_tenant_api - INFO - Shutting down Multi-Tenant RAG API...
