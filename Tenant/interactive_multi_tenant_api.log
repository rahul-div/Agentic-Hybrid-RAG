2025-10-28 14:32:05,320 - __main__ - INFO - Starting Interactive Multi-Tenant RAG API on 127.0.0.1:8000
2025-10-28 14:32:05,340 - interactive_multi_tenant_api - INFO - Starting Multi-Tenant RAG API...
2025-10-28 14:32:05,340 - interactive_multi_tenant_api - INFO - Neo4j URI: neo4j://127.0.0.1:7687
2025-10-28 14:32:05,340 - interactive_multi_tenant_api - INFO - Neo4j User: neo4j
2025-10-28 14:32:05,340 - interactive_multi_tenant_api - INFO - Neo4j Password: ***
2025-10-28 14:32:05,340 - tenant_manager - INFO - TenantManager initialized with Graphiti client
2025-10-28 14:32:05,340 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-10-28 14:32:05,340 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-10-28 14:32:05,340 - multi_tenant_ingestion - INFO - Multi-tenant ingestion pipeline initialized
2025-10-28 14:32:05,340 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-10-28 14:32:05,340 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-10-28 14:32:05,340 - interactive_multi_tenant_api - INFO - Tenant manager initialized
2025-10-28 14:32:05,343 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-10-28 14:32:05,343 - interactive_multi_tenant_api - INFO - Tenant ingestion service initialized
2025-10-28 14:32:05,343 - auth_middleware - INFO - JWT Authenticator initialized
2025-10-28 14:32:05,343 - interactive_multi_tenant_api - INFO - JWT authenticator initialized
2025-10-28 14:32:05,343 - interactive_multi_tenant_api - INFO - 🎯 Multi-Tenant RAG API ready - all backend logs will appear in this terminal
2025-10-28 14:32:05,343 - interactive_multi_tenant_api - INFO - 📊 Backend activity from CLI and API operations will be shown below:
2025-10-28 14:32:13,692 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-10-28 14:32:13,869 - catalog_database - INFO - Catalog database connection test successful
2025-10-28 14:32:13,869 - tenant_graphiti_client - INFO - Applied Graphiti performance optimizations for faster processing
2025-10-28 14:32:13,870 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-28 14:32:13,915 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-28 14:32:13,940 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-28 14:32:14,017 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_group_id IF NOT EXISTS FOR (e:Entity) ON (e.group_id)` has no effect.} {description: `RANGE INDEX entity_group_id FOR (e:Entity) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX entity_group_id IF NOT EXISTS FOR (n:Entity) ON (n.group_id)'
2025-10-28 14:32:14,019 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_group_id IF NOT EXISTS FOR (e:Episodic) ON (e.group_id)` has no effect.} {description: `RANGE INDEX episode_group_id FOR (e:Episodic) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX episode_group_id IF NOT EXISTS FOR (n:Episodic) ON (n.group_id)'
2025-10-28 14:32:14,019 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_entity_index FOR (e:Entity) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.created_at)'
2025-10-28 14:32:14,019 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX has_member_uuid FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)'
2025-10-28 14:32:14,021 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.name)` has no effect.} {description: `RANGE INDEX name_entity_index FOR (e:Entity) ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.name)'
2025-10-28 14:32:14,021 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX mention_uuid FOR ()-[e:MENTIONS]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)'
2025-10-28 14:32:14,022 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_uuid IF NOT EXISTS FOR (e:Episodic) ON (e.uuid)` has no effect.} {description: `RANGE INDEX episode_uuid FOR (e:Episodic) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX episode_uuid IF NOT EXISTS FOR (n:Episodic) ON (n.uuid)'
2025-10-28 14:32:14,022 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX relation_uuid FOR ()-[e:RELATES_TO]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)'
2025-10-28 14:32:14,022 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_uuid IF NOT EXISTS FOR (e:Entity) ON (e.uuid)` has no effect.} {description: `RANGE INDEX entity_uuid FOR (e:Entity) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX entity_uuid IF NOT EXISTS FOR (n:Entity) ON (n.uuid)'
2025-10-28 14:32:14,022 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX mention_group_id FOR ()-[e:MENTIONS]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)'
2025-10-28 14:32:14,023 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX community_uuid IF NOT EXISTS FOR (e:Community) ON (e.uuid)` has no effect.} {description: `RANGE INDEX community_uuid FOR (e:Community) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX community_uuid IF NOT EXISTS FOR (n:Community) ON (n.uuid)'
2025-10-28 14:32:14,023 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX relation_group_id FOR ()-[e:RELATES_TO]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)'
2025-10-28 14:32:14,023 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_episodic_index FOR (e:Episodic) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.created_at)'
2025-10-28 14:32:14,025 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_episodic_index FOR (e:Episodic) ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.valid_at)'
2025-10-28 14:32:14,025 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)` has no effect.} {description: `RANGE INDEX name_edge_index FOR ()-[e:RELATES_TO]-() ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)'
2025-10-28 14:32:14,025 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` has no effect.} {description: `RANGE INDEX expired_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` already exists.} {position: None} for query: 'CREATE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)'
2025-10-28 14:32:14,026 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)'
2025-10-28 14:32:14,028 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)'
2025-10-28 14:32:14,029 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` has no effect.} {description: `RANGE INDEX invalid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` already exists.} {position: None} for query: 'CREATE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)'
2025-10-28 14:32:14,030 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX community_name IF NOT EXISTS FOR (e:Community) ON EACH [e.name, e.group_id]` has no effect.} {description: `FULLTEXT INDEX community_name FOR (e:Community) ON EACH [e.name, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX community_name IF NOT EXISTS \n            FOR (n:Community) ON EACH [n.name, n.group_id]'
2025-10-28 14:32:14,030 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` has no effect.} {description: `FULLTEXT INDEX node_name_and_summary FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS \n            FOR (n:Entity) ON EACH [n.name, n.summary, n.group_id]'
2025-10-28 14:32:14,030 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` has no effect.} {description: `FULLTEXT INDEX edge_name_and_fact FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS \n            FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]'
2025-10-28 14:32:14,030 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX episode_content IF NOT EXISTS FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` has no effect.} {description: `FULLTEXT INDEX episode_content FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX episode_content IF NOT EXISTS \n            FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]'
2025-10-28 14:32:14,031 - tenant_graphiti_client - INFO - TenantGraphitiClient initialized successfully with optimized LLM: gemini-2.5-flash
2025-10-28 14:32:24,833 - tenant_manager - INFO - Starting tenant creation for: x ()
2025-10-28 14:32:24,833 - tenant_manager - INFO - Creating Neon project for tenant: e9c2fadc-ba47-4503-8ad1-1ab1d5bf07f6
2025-10-28 14:32:24,834 - neon_project_manager - INFO - Creating Neon project for tenant: x -> tenant-x
2025-10-28 14:32:24,834 - neon_project_manager - INFO - Using confirmed organization ID: org-divine-leaf-04179575
2025-10-28 14:32:25,954 - httpx - INFO - HTTP Request: POST https://console.neon.tech/api/v2/projects "HTTP/1.1 201 Created"
2025-10-28 14:32:25,955 - neon_project_manager - INFO - Getting connection details for project tiny-tree-21454941...
2025-10-28 14:32:28,275 - httpx - INFO - HTTP Request: GET https://console.neon.tech/api/v2/projects/tiny-tree-21454941/branches "HTTP/1.1 200 OK"
2025-10-28 14:32:28,678 - httpx - INFO - HTTP Request: GET https://console.neon.tech/api/v2/projects/tiny-tree-21454941/connection_uri?branch_id=br-young-butterfly-adbxy525&role_name=neondb_owner&database_name=neondb "HTTP/1.1 200 OK"
2025-10-28 14:32:28,680 - neon_project_manager - INFO - Successfully created Neon project: tiny-tree-21454941 for tenant: x
2025-10-28 14:32:28,680 - tenant_manager - INFO - Initializing database schema for tenant: e9c2fadc-ba47-4503-8ad1-1ab1d5bf07f6
2025-10-28 14:32:28,680 - tenant_schema_initializer - INFO - Initializing tenant database schema
2025-10-28 14:32:32,708 - tenant_schema_initializer - INFO - Successfully initialized tenant database schema
2025-10-28 14:32:33,020 - tenant_manager - INFO - Storing tenant mapping in catalog for: e9c2fadc-ba47-4503-8ad1-1ab1d5bf07f6
2025-10-28 14:32:33,425 - catalog_database - INFO - Created tenant project mapping: ce9c61a5-8bba-49bb-9523-fb69ec0f4afc -> tiny-tree-21454941
2025-10-28 14:32:33,540 - tenant_manager - INFO - Initializing Graphiti namespace for tenant: e9c2fadc-ba47-4503-8ad1-1ab1d5bf07f6
2025-10-28 14:32:33,540 - tenant_manager - INFO - Initializing Graphiti namespace for tenant: ce9c61a5-8bba-49bb-9523-fb69ec0f4afc
2025-10-28 14:32:33,654 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 14:32:36,552 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 14:32:37,350 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 14:32:41,865 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 14:32:41,870 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 14:32:43,897 - graphiti_core.graphiti - INFO - Completed add_episode in 10356.303215026855 ms
2025-10-28 14:32:43,897 - tenant_graphiti_client - INFO - ✅ Added episode 'tenant_ce9c61a5-8bba-49bb-9523-fb69ec0f4afc_c6fafacd_1761642153' for tenant ce9c61a5-8bba-49bb-9523-fb69ec0f4afc (namespace: tenant_ce9c61a5-8bba-49bb-9523-fb69ec0f4afc)
2025-10-28 14:32:43,898 - tenant_manager - INFO - Successfully initialized Graphiti namespace for tenant: ce9c61a5-8bba-49bb-9523-fb69ec0f4afc
2025-10-28 14:32:43,898 - tenant_manager - INFO - Successfully created tenant: ce9c61a5-8bba-49bb-9523-fb69ec0f4afc with Neon project: tiny-tree-21454941
2025-10-28 14:33:11,647 - auth_middleware - INFO - Created access token for tenant ce9c61a5-8bba-49bb-9523-fb69ec0f4afc
2025-10-28 14:33:46,955 - interactive_multi_tenant_api - INFO - Document upload for tenant ce9c61a5-8bba-49bb-9523-fb69ec0f4afc: temporal_rag_test_story.md -> vector database + knowledge graph
2025-10-28 14:33:46,956 - tenant_data_ingestion_service - INFO - Starting document ingestion for tenant ce9c61a5-8bba-49bb-9523-fb69ec0f4afc: temporal_rag_test_story.md
2025-10-28 14:33:46,956 - tenant_data_ingestion_service - INFO - Ingestion options: vector database + knowledge graph
2025-10-28 14:33:49,815 - tenant_data_ingestion_service - INFO - Creating chunks for document: temporal_rag_test_story.md
2025-10-28 14:33:49,817 - tenant_data_ingestion_service - INFO - Generating embeddings for 4 chunks
2025-10-28 14:33:49,817 - ingestion.embedder - INFO - Generating embeddings for 4 chunks
2025-10-28 14:33:50,572 - ingestion.embedder - INFO - Processed batch 1/1
2025-10-28 14:33:50,572 - ingestion.embedder - INFO - Generated embeddings for 4 chunks (model: embedding-001, dimensions: 768)
2025-10-28 14:33:55,555 - tenant_data_ingestion_service - INFO - Created 4 chunks for document 7e731a86-a9e2-4ac1-aead-683037f67957 (4 with valid embeddings, 0 without)
2025-10-28 14:33:55,819 - tenant_data_ingestion_service - INFO - Vector ingestion: Created 4 chunks with embeddings
2025-10-28 14:33:55,820 - tenant_graphiti_client - INFO - Adding 4 chunks to tenant ce9c61a5-8bba-49bb-9523-fb69ec0f4afc graph namespace: tenant_ce9c61a5-8bba-49bb-9523-fb69ec0f4afc
2025-10-28 14:33:55,820 - tenant_graphiti_client - INFO - Starting batch processing of 2 episodes for tenant ce9c61a5-8bba-49bb-9523-fb69ec0f4afc
2025-10-28 14:33:55,820 - tenant_graphiti_client - INFO - Processing batch 1/1 (2 episodes)
2025-10-28 14:33:55,854 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 14:34:04,071 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 14:34:05,012 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 14:34:34,746 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 14:34:34,752 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 14:34:34,757 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 14:34:34,762 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 14:34:34,764 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 14:34:34,767 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 14:34:34,769 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 14:34:34,771 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 14:34:34,774 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 14:34:34,775 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 14:34:34,778 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 14:34:34,781 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 14:34:34,785 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 14:34:34,788 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 14:34:37,814 - graphiti_core.graphiti - INFO - Completed add_episode in 41993.42489242554 ms
2025-10-28 14:34:37,814 - tenant_graphiti_client - INFO - ✅ Added episode 'tenant_ce9c61a5-8bba-49bb-9523-fb69ec0f4afc_82e83ca9_1761642235' for tenant ce9c61a5-8bba-49bb-9523-fb69ec0f4afc (namespace: tenant_ce9c61a5-8bba-49bb-9523-fb69ec0f4afc)
2025-10-28 14:34:37,818 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 14:40:49,779 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-10-28 14:40:49,780 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n<TEXT>\nDocument: temporal_rag_test_story.md Section 1: Her Mumbai go-to place is **Blue Tokai, Bandra**. ### \ud83d\udcc5 January 2025 - Aanya switches to **Pixel 9 Pro** as she becomes interested in AI-first devices. - Apple is no longer her preferred brand\u2014she now leans toward **Google\u2019s ecosystem**. - She moves fully to **Hyderabad**. - She now prefers **Trello** for personal projects, while her teams still use Jira and Linear. - She mentors a group of interns, one of whom, **Rahul Mehta**, prefers **One UI over Pixel UI**. ### \ud83d\udcc5 July 2025 - Aanya joins **Cerebro AI** as **Chief Product Officer**. - She now oversees: - **Infra Team** (uses Jira) - **ML Research Team** (uses GitHub Projects) - **AI Product Team** (uses Notion again) - She reverts to **iPhone 16** due to better integration with her Mac. - Section 2: Her preferred coffee shop is now **Sonder Coffee, HSR Layout** when she\u2019s in Bangalore for board meetings. ---\n</TEXT>\n<ENTITY TYPES>\n[{'entity_type_id': 0, 'entity_type_name': 'Entity', 'entity_type_description': 'Default entity classification. Use this entity type if the entity is not one of the other listed types.'}]\n</ENTITY TYPES>\n\nGiven the above text, extract entities from the TEXT that are explicitly or implicitly mentioned.\nFor each entity extracted, also determine its entity type based on the provided ENTITY TYPES and their descriptions.\nIndicate the classified entity type by providing its entity_type_id.\n\n\n\nGuidelines:\n1. Extract significant entities, concepts, or actors mentioned in the conversation.\n2. Avoid creating nodes for relationships or actions.\n3. Avoid creating nodes for temporal information like dates, times or years (these will be added to edges later).\n4. Be as explicit as possible in your node names, using full names and avoiding abbreviations.\n"
      }
    ],
    "role": "user"
  }
]
Raw output: {"extracted_entities": [{"name": "Blue Tokai, Bandra", "entity_type_id": 0}, {"name": "Aanya", "entity_type_id": 0}, {"name": "Pixel 9 Pro", "entity_type_id": 0}, {"name": "Apple", "entity_type_id": 0}, {"name": "Google\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\... (truncated) ...n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\

2025-10-28 14:40:49,781 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Unterminated string starting at: line 1 column 213 (char 212)
2025-10-28 14:40:49,781 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-10-28 14:40:49,783 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 14:47:03,127 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-10-28 14:47:03,129 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n<TEXT>\nDocument: temporal_rag_test_story.md Section 1: Her Mumbai go-to place is **Blue Tokai, Bandra**. ### \ud83d\udcc5 January 2025 - Aanya switches to **Pixel 9 Pro** as she becomes interested in AI-first devices. - Apple is no longer her preferred brand\u2014she now leans toward **Google\u2019s ecosystem**. - She moves fully to **Hyderabad**. - She now prefers **Trello** for personal projects, while her teams still use Jira and Linear. - She mentors a group of interns, one of whom, **Rahul Mehta**, prefers **One UI over Pixel UI**. ### \ud83d\udcc5 July 2025 - Aanya joins **Cerebro AI** as **Chief Product Officer**. - She now oversees: - **Infra Team** (uses Jira) - **ML Research Team** (uses GitHub Projects) - **AI Product Team** (uses Notion again) - She reverts to **iPhone 16** due to better integration with her Mac. - Section 2: Her preferred coffee shop is now **Sonder Coffee, HSR Layout** when she\u2019s in Bangalore for board meetings. ---\n</TEXT>\n<ENTITY TYPES>\n[{'entity_type_id': 0, 'entity_type_name': 'Entity', 'entity_type_description': 'Default entity classification. Use this entity type if the entity is not one of the other listed types.'}]\n</ENTITY TYPES>\n\nGiven the above text, extract entities from the TEXT that are explicitly or implicitly mentioned.\nFor each entity extracted, also determine its entity type based on the provided ENTITY TYPES and their descriptions.\nIndicate the classified entity type by providing its entity_type_id.\n\n\n\nGuidelines:\n1. Extract significant entities, concepts, or actors mentioned in the conversation.\n2. Avoid creating nodes for relationships or actions.\n3. Avoid creating nodes for temporal information like dates, times or years (these will be added to edges later).\n4. Be as explicit as possible in your node names, using full names and avoiding abbreviations.\n"
      }
    ],
    "role": "user"
  },
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "The previous response attempt was invalid. Error type: Exception. Error details: . Please try again with a valid response, ensuring the output matches the expected format and constraints."
      }
    ],
    "role": "user"
  }
]
Raw output: {"extracted_entities": [{"name": "Blue Tokai, Bandra", "entity_type_id": 0}, {"name": "Aanya", "entity_type_id": 0}, {"name": "Pixel 9 Pro", "entity_type_id": 0}, {"name": "Apple", "entity_type_id": 0}, {"name": "Google\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\... (truncated) ...n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\

2025-10-28 14:47:03,130 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Unterminated string starting at: line 1 column 213 (char 212)
2025-10-28 14:47:03,130 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 2/2): 
2025-10-28 14:47:03,130 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed and retries are exhausted.
2025-10-28 14:47:03,131 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "role": "system",
    "content": "You are an AI assistant that extracts entity nodes from text. \n    Your primary task is to extract and classify the speaker and other significant entities mentioned in the provided text.\nDo not escape unicode characters.\n\n\nAny extracted information should be returned in the same language as it was written in."
  },
  {
    "role": "user",
    "content": "\n<TEXT>\nDocument: temporal_rag_test_story.md Section 1: Her Mumbai go-to place is **Blue Tokai, Bandra**. ### \ud83d\udcc5 January 2025 - Aanya switches to **Pixel 9 Pro** as she becomes interested in AI-first devices. - Apple is no longer her preferred brand\u2014she now leans toward **Google\u2019s ecosystem**. - She moves fully to **Hyderabad**. - She now prefers **Trello** for personal projects, while her teams still use Jira and Linear. - She mentors a group of interns, one of whom, **Rahul Mehta**, prefers **One UI over Pixel UI**. ### \ud83d\udcc5 July 2025 - Aanya joins **Cerebro AI** as **Chief Product Officer**. - She now oversees: - **Infra Team** (uses Jira) - **ML Research Team** (uses GitHub Projects) - **AI Product Team** (uses Notion again) - She reverts to **iPhone 16** due to better integration with her Mac. - Section 2: Her preferred coffee shop is now **Sonder Coffee, HSR Layout** when she\u2019s in Bangalore for board meetings. ---\n</TEXT>\n<ENTITY TYPES>\n[{'entity_type_id': 0, 'entity_type_name': 'Entity', 'entity_type_description': 'Default entity classification. Use this entity type if the entity is not one of the other listed types.'}]\n</ENTITY TYPES>\n\nGiven the above text, extract entities from the TEXT that are explicitly or implicitly mentioned.\nFor each entity extracted, also determine its entity type based on the provided ENTITY TYPES and their descriptions.\nIndicate the classified entity type by providing its entity_type_id.\n\n\n\nGuidelines:\n1. Extract significant entities, concepts, or actors mentioned in the conversation.\n2. Avoid creating nodes for relationships or actions.\n3. Avoid creating nodes for temporal information like dates, times or years (these will be added to edges later).\n4. Be as explicit as possible in your node names, using full names and avoiding abbreviations.\n"
  },
  {
    "role": "user",
    "content": "The previous response attempt was invalid. Error type: Exception. Error details: . Please try again with a valid response, ensuring the output matches the expected format and constraints."
  },
  {
    "role": "user",
    "content": "The previous response attempt was invalid. Error type: Exception. Error details: . Please try again with a valid response, ensuring the output matches the expected format and constraints."
  }
]
No raw output available
2025-10-28 14:47:03,131 - graphiti_core.llm_client.gemini_client - ERROR - Max retries (2) exceeded. Last error: 
2025-10-28 14:47:03,131 - tenant_graphiti_client - ERROR - ❌ Failed to add episode for tenant ce9c61a5-8bba-49bb-9523-fb69ec0f4afc: 
2025-10-28 14:47:03,131 - tenant_graphiti_client - INFO - Batch completed: 1/2 episodes for tenant ce9c61a5-8bba-49bb-9523-fb69ec0f4afc
2025-10-28 14:47:03,131 - tenant_data_ingestion_service - INFO - Successfully added 1 episodes to tenant ce9c61a5-8bba-49bb-9523-fb69ec0f4afc graph namespace
2025-10-28 14:47:03,131 - tenant_data_ingestion_service - INFO - Graph ingestion: Created episode 1
2025-10-28 14:47:03,131 - tenant_data_ingestion_service - INFO - Successfully ingested document 7e731a86-a9e2-4ac1-aead-683037f67957 for tenant ce9c61a5-8bba-49bb-9523-fb69ec0f4afc in 796175.07ms
