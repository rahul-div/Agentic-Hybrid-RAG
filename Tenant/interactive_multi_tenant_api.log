2025-10-28 15:58:56,879 - __main__ - INFO - Starting Interactive Multi-Tenant RAG API on 127.0.0.1:8000
2025-10-28 15:58:56,898 - interactive_multi_tenant_api - INFO - Starting Multi-Tenant RAG API...
2025-10-28 15:58:56,898 - interactive_multi_tenant_api - INFO - Neo4j URI: neo4j://127.0.0.1:7687
2025-10-28 15:58:56,899 - interactive_multi_tenant_api - INFO - Neo4j User: neo4j
2025-10-28 15:58:56,899 - interactive_multi_tenant_api - INFO - Neo4j Password: ***
2025-10-28 15:58:56,899 - tenant_manager - INFO - TenantManager initialized with Graphiti client
2025-10-28 15:58:56,899 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-10-28 15:58:56,899 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-10-28 15:58:56,899 - multi_tenant_ingestion - INFO - Multi-tenant ingestion pipeline initialized
2025-10-28 15:58:56,899 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-10-28 15:58:56,899 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-10-28 15:58:56,899 - interactive_multi_tenant_api - INFO - Tenant manager initialized
2025-10-28 15:58:56,902 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-10-28 15:58:56,903 - interactive_multi_tenant_api - INFO - Tenant ingestion service initialized
2025-10-28 15:58:56,903 - auth_middleware - INFO - JWT Authenticator initialized
2025-10-28 15:58:56,903 - interactive_multi_tenant_api - INFO - JWT authenticator initialized
2025-10-28 15:58:56,903 - interactive_multi_tenant_api - INFO - 🎯 Multi-Tenant RAG API ready - all backend logs will appear in this terminal
2025-10-28 15:58:56,903 - interactive_multi_tenant_api - INFO - 📊 Backend activity from CLI and API operations will be shown below:
2025-10-28 15:59:19,054 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-10-28 15:59:19,223 - catalog_database - INFO - Catalog database connection test successful
2025-10-28 15:59:19,224 - tenant_graphiti_client - INFO - Applied Graphiti performance optimizations for production reliability
2025-10-28 15:59:19,225 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-28 15:59:19,270 - robust_gemini_client - INFO - RobustGeminiClient initialized with temperature=0.0 for deterministic JSON output
2025-10-28 15:59:19,270 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-28 15:59:19,297 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-28 15:59:19,357 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_uuid IF NOT EXISTS FOR (e:Entity) ON (e.uuid)` has no effect.} {description: `RANGE INDEX entity_uuid FOR (e:Entity) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX entity_uuid IF NOT EXISTS FOR (n:Entity) ON (n.uuid)'
2025-10-28 15:59:19,360 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_uuid IF NOT EXISTS FOR (e:Episodic) ON (e.uuid)` has no effect.} {description: `RANGE INDEX episode_uuid FOR (e:Episodic) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX episode_uuid IF NOT EXISTS FOR (n:Episodic) ON (n.uuid)'
2025-10-28 15:59:19,361 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX relation_uuid FOR ()-[e:RELATES_TO]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)'
2025-10-28 15:59:19,362 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX community_uuid IF NOT EXISTS FOR (e:Community) ON (e.uuid)` has no effect.} {description: `RANGE INDEX community_uuid FOR (e:Community) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX community_uuid IF NOT EXISTS FOR (n:Community) ON (n.uuid)'
2025-10-28 15:59:19,363 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX mention_uuid FOR ()-[e:MENTIONS]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)'
2025-10-28 15:59:19,364 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX has_member_uuid FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)'
2025-10-28 15:59:19,378 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX relation_group_id FOR ()-[e:RELATES_TO]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)'
2025-10-28 15:59:19,378 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX episode_content IF NOT EXISTS FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` has no effect.} {description: `FULLTEXT INDEX episode_content FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX episode_content IF NOT EXISTS \n            FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]'
2025-10-28 15:59:19,379 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_group_id IF NOT EXISTS FOR (e:Entity) ON (e.group_id)` has no effect.} {description: `RANGE INDEX entity_group_id FOR (e:Entity) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX entity_group_id IF NOT EXISTS FOR (n:Entity) ON (n.group_id)'
2025-10-28 15:59:19,379 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX mention_group_id FOR ()-[e:MENTIONS]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)'
2025-10-28 15:59:19,379 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.name)` has no effect.} {description: `RANGE INDEX name_entity_index FOR (e:Entity) ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.name)'
2025-10-28 15:59:19,381 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` has no effect.} {description: `FULLTEXT INDEX edge_name_and_fact FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS \n            FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]'
2025-10-28 15:59:19,382 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX community_name IF NOT EXISTS FOR (e:Community) ON EACH [e.name, e.group_id]` has no effect.} {description: `FULLTEXT INDEX community_name FOR (e:Community) ON EACH [e.name, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX community_name IF NOT EXISTS \n            FOR (n:Community) ON EACH [n.name, n.group_id]'
2025-10-28 15:59:19,382 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_group_id IF NOT EXISTS FOR (e:Episodic) ON (e.group_id)` has no effect.} {description: `RANGE INDEX episode_group_id FOR (e:Episodic) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX episode_group_id IF NOT EXISTS FOR (n:Episodic) ON (n.group_id)'
2025-10-28 15:59:19,386 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_episodic_index FOR (e:Episodic) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.created_at)'
2025-10-28 15:59:19,388 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_entity_index FOR (e:Entity) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.created_at)'
2025-10-28 15:59:19,388 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)` has no effect.} {description: `RANGE INDEX name_edge_index FOR ()-[e:RELATES_TO]-() ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)'
2025-10-28 15:59:19,389 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` has no effect.} {description: `RANGE INDEX invalid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` already exists.} {position: None} for query: 'CREATE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)'
2025-10-28 15:59:19,389 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_episodic_index FOR (e:Episodic) ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.valid_at)'
2025-10-28 15:59:19,389 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)'
2025-10-28 15:59:19,390 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` has no effect.} {description: `RANGE INDEX expired_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` already exists.} {position: None} for query: 'CREATE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)'
2025-10-28 15:59:19,390 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)'
2025-10-28 15:59:19,390 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` has no effect.} {description: `FULLTEXT INDEX node_name_and_summary FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS \n            FOR (n:Entity) ON EACH [n.name, n.summary, n.group_id]'
2025-10-28 15:59:19,391 - graphiti_ingestion_manager - INFO - GraphitiIngestionManager initialized for reliable episode ingestion
2025-10-28 15:59:19,391 - tenant_graphiti_client - INFO - TenantGraphitiClient initialized successfully with robust LLM: gemini-2.0-flash-thinking-exp-01-21
2025-10-28 15:59:19,391 - tenant_graphiti_client - INFO - ✅ Knowledge graph ingestion is now deterministic and reliable
2025-10-28 15:59:29,205 - auth_middleware - INFO - Created access token for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80
2025-10-28 15:59:50,593 - multi_tenant_agent - INFO - Using comprehensive system prompt for intelligent tool routing
2025-10-28 15:59:50,600 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-28 15:59:50,618 - multi_tenant_agent - INFO - Created multi-tenant agent with model: gemini-2.0-flash-thinking-exp-01-21
2025-10-28 15:59:50,624 - multi_tenant_agent - INFO - Successfully registered tenant-aware tools
2025-10-28 15:59:50,624 - multi_tenant_agent - INFO - 🧠 Starting chat processing for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80
2025-10-28 15:59:50,624 - multi_tenant_agent - INFO - 📝 User query: Hi! Who does Aanya manage right now?
2025-10-28 15:59:50,624 - multi_tenant_agent - INFO - 🤖 Running agent with model gemini-2.0-flash-thinking-exp-1219
2025-10-28 15:59:50,625 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 15:59:52,373 - multi_tenant_agent - INFO - 🔍 Local dual search for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: Who does Aanya manage right now?
2025-10-28 15:59:52,373 - multi_tenant_agent - INFO - 🔍 Vector search for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: Who does Aanya manage right now?
2025-10-28 15:59:57,676 - multi_tenant_agent - INFO - ✅ Vector search returned 4 results for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80
2025-10-28 15:59:57,676 - multi_tenant_agent - INFO - 🔍 Graph search for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: Who does Aanya manage right now?
2025-10-28 15:59:58,376 - tenant_graphiti_client - INFO - Graph search for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80 (namespace: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80) returned 10 results
2025-10-28 15:59:58,377 - multi_tenant_agent - INFO - ✅ Graph search returned 10 results for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80
2025-10-28 15:59:58,377 - multi_tenant_agent - INFO - ✅ Local dual search returned 9 combined results
2025-10-28 15:59:58,378 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:00:00,956 - multi_tenant_agent - INFO - ✅ Agent completed processing for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80
2025-10-28 16:00:00,956 - multi_tenant_agent - INFO - 🔍 Extracting tool usage from agent messages
2025-10-28 16:00:00,957 - multi_tenant_agent - INFO - Found 4 messages to analyze
2025-10-28 16:00:00,957 - multi_tenant_agent - INFO - Message 0: <class 'pydantic_ai.messages.ModelRequest'>, attributes: ['instructions', 'kind', 'parts', 'user_text_prompt']
2025-10-28 16:00:00,957 - multi_tenant_agent - INFO - Message 1: <class 'pydantic_ai.messages.ModelResponse'>, attributes: ['kind', 'model_name', 'otel_events', 'parts', 'timestamp', 'usage', 'vendor_details', 'vendor_id']
2025-10-28 16:00:00,957 - multi_tenant_agent - INFO - Message 2: <class 'pydantic_ai.messages.ModelRequest'>, attributes: ['instructions', 'kind', 'parts', 'user_text_prompt']
2025-10-28 16:00:00,957 - multi_tenant_agent - INFO - Message 3: <class 'pydantic_ai.messages.ModelResponse'>, attributes: ['kind', 'model_name', 'otel_events', 'parts', 'timestamp', 'usage', 'vendor_details', 'vendor_id']
2025-10-28 16:00:00,957 - multi_tenant_agent - INFO - 📊 Extracted 0 tools and 0 sources
2025-10-28 16:00:00,957 - multi_tenant_agent - INFO - 📊 Using tracked tools: ['Vector Search', 'Knowledge Graph Search', 'Dual Storage Search']
2025-10-28 16:00:00,958 - multi_tenant_agent - INFO - 📊 Using tracked sources: 5 sources
2025-10-28 16:00:00,958 - multi_tenant_agent - INFO - 📊 Final result: 3 tools, 2 unique sources
2025-10-28 16:06:40,010 - interactive_multi_tenant_api - INFO - Shutting down Multi-Tenant RAG API...
2025-10-28 16:06:54,652 - __main__ - INFO - Starting Interactive Multi-Tenant RAG API on 127.0.0.1:8000
2025-10-28 16:06:54,671 - interactive_multi_tenant_api - INFO - Starting Multi-Tenant RAG API...
2025-10-28 16:06:54,671 - interactive_multi_tenant_api - INFO - Neo4j URI: neo4j://127.0.0.1:7687
2025-10-28 16:06:54,671 - interactive_multi_tenant_api - INFO - Neo4j User: neo4j
2025-10-28 16:06:54,671 - interactive_multi_tenant_api - INFO - Neo4j Password: ***
2025-10-28 16:06:54,671 - tenant_manager - INFO - TenantManager initialized with Graphiti client
2025-10-28 16:06:54,671 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-10-28 16:06:54,671 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-10-28 16:06:54,671 - multi_tenant_ingestion - INFO - Multi-tenant ingestion pipeline initialized
2025-10-28 16:06:54,671 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-10-28 16:06:54,671 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-10-28 16:06:54,671 - interactive_multi_tenant_api - INFO - Tenant manager initialized
2025-10-28 16:06:54,674 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-10-28 16:06:54,674 - interactive_multi_tenant_api - INFO - Tenant ingestion service initialized
2025-10-28 16:06:54,674 - auth_middleware - INFO - JWT Authenticator initialized
2025-10-28 16:06:54,674 - interactive_multi_tenant_api - INFO - JWT authenticator initialized
2025-10-28 16:06:54,675 - interactive_multi_tenant_api - INFO - 🎯 Multi-Tenant RAG API ready - all backend logs will appear in this terminal
2025-10-28 16:06:54,675 - interactive_multi_tenant_api - INFO - 📊 Backend activity from CLI and API operations will be shown below:
2025-10-28 16:08:10,019 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-10-28 16:08:10,182 - catalog_database - INFO - Catalog database connection test successful
2025-10-28 16:08:10,182 - tenant_graphiti_client - INFO - Applied Graphiti performance optimizations for production reliability
2025-10-28 16:08:10,183 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-28 16:08:10,228 - robust_gemini_client - INFO - RobustGeminiClient initialized with temperature=0.0 for deterministic JSON output
2025-10-28 16:08:10,228 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-28 16:08:10,254 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-28 16:08:10,324 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_uuid IF NOT EXISTS FOR (e:Entity) ON (e.uuid)` has no effect.} {description: `RANGE INDEX entity_uuid FOR (e:Entity) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX entity_uuid IF NOT EXISTS FOR (n:Entity) ON (n.uuid)'
2025-10-28 16:08:10,327 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_uuid IF NOT EXISTS FOR (e:Episodic) ON (e.uuid)` has no effect.} {description: `RANGE INDEX episode_uuid FOR (e:Episodic) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX episode_uuid IF NOT EXISTS FOR (n:Episodic) ON (n.uuid)'
2025-10-28 16:08:10,327 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX community_uuid IF NOT EXISTS FOR (e:Community) ON (e.uuid)` has no effect.} {description: `RANGE INDEX community_uuid FOR (e:Community) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX community_uuid IF NOT EXISTS FOR (n:Community) ON (n.uuid)'
2025-10-28 16:08:10,329 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX relation_uuid FOR ()-[e:RELATES_TO]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)'
2025-10-28 16:08:10,329 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX mention_uuid FOR ()-[e:MENTIONS]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)'
2025-10-28 16:08:10,330 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX has_member_uuid FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)'
2025-10-28 16:08:10,331 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_group_id IF NOT EXISTS FOR (e:Entity) ON (e.group_id)` has no effect.} {description: `RANGE INDEX entity_group_id FOR (e:Entity) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX entity_group_id IF NOT EXISTS FOR (n:Entity) ON (n.group_id)'
2025-10-28 16:08:10,332 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)'
2025-10-28 16:08:10,334 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_group_id IF NOT EXISTS FOR (e:Episodic) ON (e.group_id)` has no effect.} {description: `RANGE INDEX episode_group_id FOR (e:Episodic) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX episode_group_id IF NOT EXISTS FOR (n:Episodic) ON (n.group_id)'
2025-10-28 16:08:10,334 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX relation_group_id FOR ()-[e:RELATES_TO]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)'
2025-10-28 16:08:10,335 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX episode_content IF NOT EXISTS FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` has no effect.} {description: `FULLTEXT INDEX episode_content FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX episode_content IF NOT EXISTS \n            FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]'
2025-10-28 16:08:10,335 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX mention_group_id FOR ()-[e:MENTIONS]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)'
2025-10-28 16:08:10,341 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.name)` has no effect.} {description: `RANGE INDEX name_entity_index FOR (e:Entity) ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.name)'
2025-10-28 16:08:10,343 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_entity_index FOR (e:Entity) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.created_at)'
2025-10-28 16:08:10,344 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` has no effect.} {description: `FULLTEXT INDEX node_name_and_summary FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS \n            FOR (n:Entity) ON EACH [n.name, n.summary, n.group_id]'
2025-10-28 16:08:10,344 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_episodic_index FOR (e:Episodic) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.created_at)'
2025-10-28 16:08:10,345 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_episodic_index FOR (e:Episodic) ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.valid_at)'
2025-10-28 16:08:10,345 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX community_name IF NOT EXISTS FOR (e:Community) ON EACH [e.name, e.group_id]` has no effect.} {description: `FULLTEXT INDEX community_name FOR (e:Community) ON EACH [e.name, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX community_name IF NOT EXISTS \n            FOR (n:Community) ON EACH [n.name, n.group_id]'
2025-10-28 16:08:10,346 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)` has no effect.} {description: `RANGE INDEX name_edge_index FOR ()-[e:RELATES_TO]-() ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)'
2025-10-28 16:08:10,346 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` has no effect.} {description: `FULLTEXT INDEX edge_name_and_fact FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS \n            FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]'
2025-10-28 16:08:10,347 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)'
2025-10-28 16:08:10,347 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` has no effect.} {description: `RANGE INDEX expired_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` already exists.} {position: None} for query: 'CREATE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)'
2025-10-28 16:08:10,348 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` has no effect.} {description: `RANGE INDEX invalid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` already exists.} {position: None} for query: 'CREATE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)'
2025-10-28 16:08:10,349 - graphiti_ingestion_manager - INFO - GraphitiIngestionManager initialized for reliable episode ingestion
2025-10-28 16:08:10,349 - tenant_graphiti_client - INFO - TenantGraphitiClient initialized successfully with robust LLM: gemini-2.0-flash-thinking-exp-01-21
2025-10-28 16:08:10,349 - tenant_graphiti_client - INFO - ✅ Knowledge graph ingestion is now deterministic and reliable
2025-10-28 16:08:23,541 - tenant_manager - ERROR - Invalid tenant_id format: 2025-10-28 15:59:50,624 - multi_tenant_agent - INFO - 🤖, error: badly formed hexadecimal UUID string
2025-10-28 16:08:44,597 - auth_middleware - INFO - Created access token for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80
2025-10-28 16:09:00,982 - multi_tenant_agent - INFO - Using comprehensive system prompt for intelligent tool routing
2025-10-28 16:09:01,002 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-28 16:09:01,061 - multi_tenant_agent - INFO - Created multi-tenant agent with model: gemini-2.0-flash-thinking-exp-01-21
2025-10-28 16:09:01,067 - multi_tenant_agent - INFO - Successfully registered tenant-aware tools
2025-10-28 16:09:01,067 - multi_tenant_agent - INFO - 🧠 Starting chat processing for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80
2025-10-28 16:09:01,067 - multi_tenant_agent - INFO - 📝 User query: Hi! Who does Aanya manage right now?
2025-10-28 16:09:01,067 - multi_tenant_agent - INFO - 🤖 Running agent with model gemini-2.0-flash-thinking-exp-01-21
2025-10-28 16:09:01,069 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:09:02,735 - multi_tenant_agent - INFO - 🔍 Local dual search for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: Who does Aanya manage right now?
2025-10-28 16:09:02,735 - multi_tenant_agent - INFO - 🔍 Vector search for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: Who does Aanya manage right now?
2025-10-28 16:09:08,033 - multi_tenant_agent - INFO - ✅ Vector search returned 4 results for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80
2025-10-28 16:09:08,034 - multi_tenant_agent - INFO - 🔍 Graph search for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: Who does Aanya manage right now?
2025-10-28 16:09:08,676 - tenant_graphiti_client - INFO - Graph search for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80 (namespace: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80) returned 10 results
2025-10-28 16:09:08,676 - multi_tenant_agent - INFO - ✅ Graph search returned 10 results for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80
2025-10-28 16:09:08,676 - multi_tenant_agent - INFO - ✅ Local dual search returned 9 combined results
2025-10-28 16:09:08,677 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:09:12,100 - multi_tenant_agent - INFO - ✅ Agent completed processing for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80
2025-10-28 16:09:12,100 - multi_tenant_agent - INFO - 🔍 Extracting tool usage from agent messages
2025-10-28 16:09:12,100 - multi_tenant_agent - INFO - Found 4 messages to analyze
2025-10-28 16:09:12,100 - multi_tenant_agent - INFO - Message 0: <class 'pydantic_ai.messages.ModelRequest'>, attributes: ['instructions', 'kind', 'parts', 'user_text_prompt']
2025-10-28 16:09:12,100 - multi_tenant_agent - INFO - Message 1: <class 'pydantic_ai.messages.ModelResponse'>, attributes: ['kind', 'model_name', 'otel_events', 'parts', 'timestamp', 'usage', 'vendor_details', 'vendor_id']
2025-10-28 16:09:12,100 - multi_tenant_agent - INFO - Message 2: <class 'pydantic_ai.messages.ModelRequest'>, attributes: ['instructions', 'kind', 'parts', 'user_text_prompt']
2025-10-28 16:09:12,100 - multi_tenant_agent - INFO - Message 3: <class 'pydantic_ai.messages.ModelResponse'>, attributes: ['kind', 'model_name', 'otel_events', 'parts', 'timestamp', 'usage', 'vendor_details', 'vendor_id']
2025-10-28 16:09:12,100 - multi_tenant_agent - INFO - 📊 Extracted 0 tools and 0 sources
2025-10-28 16:09:12,100 - multi_tenant_agent - INFO - 📊 Using tracked tools: ['Vector Search', 'Knowledge Graph Search', 'Dual Storage Search']
2025-10-28 16:09:12,100 - multi_tenant_agent - INFO - 📊 Using tracked sources: 5 sources
2025-10-28 16:09:12,100 - multi_tenant_agent - INFO - 📊 Final result: 3 tools, 2 unique sources
2025-10-28 16:09:42,384 - multi_tenant_agent - INFO - Using comprehensive system prompt for intelligent tool routing
2025-10-28 16:09:42,384 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-28 16:09:42,427 - multi_tenant_agent - INFO - Created multi-tenant agent with model: gemini-2.0-flash-thinking-exp-01-21
2025-10-28 16:09:42,430 - multi_tenant_agent - INFO - Successfully registered tenant-aware tools
2025-10-28 16:09:42,430 - multi_tenant_agent - INFO - 🧠 Starting chat processing for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80
2025-10-28 16:09:42,430 - multi_tenant_agent - INFO - 📝 User query: What phone was she using in January 2025 vs July 2025?
2025-10-28 16:09:42,430 - multi_tenant_agent - INFO - 🤖 Running agent with model gemini-2.0-flash-thinking-exp-01-21
2025-10-28 16:09:42,432 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:09:44,147 - multi_tenant_agent - INFO - 🔍 Local dual search for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: What phone was she using in January 2025 vs July 2025?
2025-10-28 16:09:44,147 - multi_tenant_agent - INFO - 🔍 Vector search for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: What phone was she using in January 2025 vs July 2025?
2025-10-28 16:09:49,039 - multi_tenant_agent - INFO - ✅ Vector search returned 4 results for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80
2025-10-28 16:09:49,040 - multi_tenant_agent - INFO - 🔍 Graph search for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: What phone was she using in January 2025 vs July 2025?
2025-10-28 16:09:49,748 - tenant_graphiti_client - INFO - Graph search for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80 (namespace: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80) returned 10 results
2025-10-28 16:09:49,748 - multi_tenant_agent - INFO - ✅ Graph search returned 10 results for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80
2025-10-28 16:09:49,748 - multi_tenant_agent - INFO - ✅ Local dual search returned 9 combined results
2025-10-28 16:09:49,749 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:09:52,190 - multi_tenant_agent - INFO - ✅ Agent completed processing for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80
2025-10-28 16:09:52,190 - multi_tenant_agent - INFO - 🔍 Extracting tool usage from agent messages
2025-10-28 16:09:52,191 - multi_tenant_agent - INFO - Found 4 messages to analyze
2025-10-28 16:09:52,191 - multi_tenant_agent - INFO - Message 0: <class 'pydantic_ai.messages.ModelRequest'>, attributes: ['instructions', 'kind', 'parts', 'user_text_prompt']
2025-10-28 16:09:52,191 - multi_tenant_agent - INFO - Message 1: <class 'pydantic_ai.messages.ModelResponse'>, attributes: ['kind', 'model_name', 'otel_events', 'parts', 'timestamp', 'usage', 'vendor_details', 'vendor_id']
2025-10-28 16:09:52,191 - multi_tenant_agent - INFO - Message 2: <class 'pydantic_ai.messages.ModelRequest'>, attributes: ['instructions', 'kind', 'parts', 'user_text_prompt']
2025-10-28 16:09:52,191 - multi_tenant_agent - INFO - Message 3: <class 'pydantic_ai.messages.ModelResponse'>, attributes: ['kind', 'model_name', 'otel_events', 'parts', 'timestamp', 'usage', 'vendor_details', 'vendor_id']
2025-10-28 16:09:52,191 - multi_tenant_agent - INFO - 📊 Extracted 0 tools and 0 sources
2025-10-28 16:09:52,191 - multi_tenant_agent - INFO - 📊 Using tracked tools: ['Vector Search', 'Knowledge Graph Search', 'Dual Storage Search']
2025-10-28 16:09:52,191 - multi_tenant_agent - INFO - 📊 Using tracked sources: 5 sources
2025-10-28 16:09:52,191 - multi_tenant_agent - INFO - 📊 Final result: 3 tools, 2 unique sources
2025-10-28 16:13:02,777 - multi_tenant_agent - INFO - Using comprehensive system prompt for intelligent tool routing
2025-10-28 16:13:02,779 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-28 16:13:02,824 - multi_tenant_agent - INFO - Created multi-tenant agent with model: gemini-2.0-flash-thinking-exp-01-21
2025-10-28 16:13:02,829 - multi_tenant_agent - INFO - Successfully registered tenant-aware tools
2025-10-28 16:13:02,829 - multi_tenant_agent - INFO - 🧠 Starting chat processing for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80
2025-10-28 16:13:02,829 - multi_tenant_agent - INFO - 📝 User query: So, when aanya got curious about AI, which phone did she started using to get experience of AI, and ...
2025-10-28 16:13:02,829 - multi_tenant_agent - INFO - 🤖 Running agent with model gemini-2.0-flash-thinking-exp-01-21
2025-10-28 16:13:02,830 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:13:05,215 - multi_tenant_agent - INFO - 🔍 Local dual search for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: When Aanya got curious about AI, which phone did she start using to get experience of AI, and what ecosystem did she start preferring due to AI influence?
2025-10-28 16:13:05,215 - multi_tenant_agent - INFO - 🔍 Vector search for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: When Aanya got curious about AI, which phone did she start using to get experience of AI, and what ecosystem did she start preferring due to AI influence?
2025-10-28 16:13:10,007 - multi_tenant_agent - INFO - ✅ Vector search returned 4 results for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80
2025-10-28 16:13:10,008 - multi_tenant_agent - INFO - 🔍 Graph search for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: When Aanya got curious about AI, which phone did she start using to get experience of AI, and what ecosystem did she start preferring due to AI influence?
2025-10-28 16:13:10,582 - tenant_graphiti_client - INFO - Graph search for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80 (namespace: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80) returned 10 results
2025-10-28 16:13:10,582 - multi_tenant_agent - INFO - ✅ Graph search returned 10 results for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80
2025-10-28 16:13:10,582 - multi_tenant_agent - INFO - ✅ Local dual search returned 9 combined results
2025-10-28 16:13:10,583 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:13:11,912 - multi_tenant_agent - INFO - ✅ Agent completed processing for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80
2025-10-28 16:13:11,913 - multi_tenant_agent - INFO - 🔍 Extracting tool usage from agent messages
2025-10-28 16:13:11,913 - multi_tenant_agent - INFO - Found 4 messages to analyze
2025-10-28 16:13:11,913 - multi_tenant_agent - INFO - Message 0: <class 'pydantic_ai.messages.ModelRequest'>, attributes: ['instructions', 'kind', 'parts', 'user_text_prompt']
2025-10-28 16:13:11,913 - multi_tenant_agent - INFO - Message 1: <class 'pydantic_ai.messages.ModelResponse'>, attributes: ['kind', 'model_name', 'otel_events', 'parts', 'timestamp', 'usage', 'vendor_details', 'vendor_id']
2025-10-28 16:13:11,913 - multi_tenant_agent - INFO - Message 2: <class 'pydantic_ai.messages.ModelRequest'>, attributes: ['instructions', 'kind', 'parts', 'user_text_prompt']
2025-10-28 16:13:11,913 - multi_tenant_agent - INFO - Message 3: <class 'pydantic_ai.messages.ModelResponse'>, attributes: ['kind', 'model_name', 'otel_events', 'parts', 'timestamp', 'usage', 'vendor_details', 'vendor_id']
2025-10-28 16:13:11,913 - multi_tenant_agent - INFO - 📊 Extracted 0 tools and 0 sources
2025-10-28 16:13:11,913 - multi_tenant_agent - INFO - 📊 Using tracked tools: ['Vector Search', 'Knowledge Graph Search', 'Dual Storage Search']
2025-10-28 16:13:11,913 - multi_tenant_agent - INFO - 📊 Using tracked sources: 5 sources
2025-10-28 16:13:11,913 - multi_tenant_agent - INFO - 📊 Final result: 3 tools, 2 unique sources
2025-10-28 16:14:21,505 - interactive_multi_tenant_api - INFO - Document upload for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: README.md -> vector database + knowledge graph
2025-10-28 16:14:21,507 - tenant_data_ingestion_service - INFO - Starting document ingestion for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: README.md
2025-10-28 16:14:21,507 - tenant_data_ingestion_service - INFO - Ingestion options: vector database + knowledge graph
2025-10-28 16:14:24,371 - tenant_data_ingestion_service - INFO - Creating chunks for document: README.md
2025-10-28 16:14:24,381 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-28 16:14:24,421 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:14:52,470 - tenant_data_ingestion_service - INFO - Generating embeddings for 31 chunks
2025-10-28 16:14:52,470 - ingestion.embedder - INFO - Generating embeddings for 31 chunks
2025-10-28 16:14:54,212 - ingestion.embedder - INFO - Processed batch 1/1
2025-10-28 16:14:54,212 - ingestion.embedder - INFO - Generated embeddings for 31 chunks (model: embedding-001, dimensions: 768)
2025-10-28 16:15:06,806 - tenant_data_ingestion_service - INFO - Created 31 chunks for document 86402f12-1aa5-4567-a0aa-58b104521f84 (31 with valid embeddings, 0 without)
2025-10-28 16:15:07,077 - tenant_data_ingestion_service - INFO - Vector ingestion: Created 31 chunks with embeddings
2025-10-28 16:15:07,080 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-28 16:15:07,101 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:15:44,197 - tenant_data_ingestion_service - INFO - Adding 31 chunks to tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80 graph namespace: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80
2025-10-28 16:15:44,198 - tenant_graphiti_client - INFO - 🚀 Starting production KG ingestion for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: 31 chunks from 'README.md'
2025-10-28 16:15:44,198 - graphiti_ingestion_manager - INFO - Starting KG ingestion for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: 31 chunks from document 'README.md'
2025-10-28 16:15:44,255 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:15:46,817 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:15:47,548 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:08,631 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:08,633 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:08,635 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:08,637 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:08,640 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:08,642 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:08,644 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:08,646 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:10,120 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:10,122 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:10,124 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:12,668 - graphiti_core.graphiti - INFO - Completed add_episode in 28469.161987304688 ms
2025-10-28 16:16:12,669 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_185616ae_1761648344
2025-10-28 16:16:12,677 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:14,922 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:15,641 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:30,882 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:30,888 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:30,895 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:30,900 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:30,905 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:30,909 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:30,913 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:30,917 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:30,921 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:30,924 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:31,675 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:31,677 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:31,679 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:34,979 - graphiti_core.graphiti - INFO - Completed add_episode in 22309.86976623535 ms
2025-10-28 16:16:34,980 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_8ee29424_1761648344
2025-10-28 16:16:34,983 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:38,518 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:39,695 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:54,569 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:54,575 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:54,580 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:54,586 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:54,590 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:54,595 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:54,599 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:54,602 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:54,606 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:54,610 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:55,328 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:55,330 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:55,332 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:55,333 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:55,336 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:55,337 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:55,339 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:55,341 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:16:59,825 - graphiti_core.graphiti - INFO - Completed add_episode in 24845.097303390503 ms
2025-10-28 16:16:59,825 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_e8db377d_1761648344
2025-10-28 16:16:59,830 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:02,888 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:03,739 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:15,267 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:15,273 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:15,279 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:15,284 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:15,289 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:15,293 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:15,296 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:15,299 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:15,998 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:16,000 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:16,002 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:16,005 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:16,007 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:16,009 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:20,087 - graphiti_core.graphiti - INFO - Completed add_episode in 20261.894941329956 ms
2025-10-28 16:17:20,087 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_bc965c6e_1761648344
2025-10-28 16:17:20,093 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:24,182 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:25,305 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:49,294 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:49,299 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:49,307 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:49,313 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:49,316 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:49,321 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:49,325 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:49,328 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:49,334 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:49,337 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:49,341 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:49,344 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:49,348 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:49,350 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:49,353 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:49,356 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:49,358 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:49,360 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:50,244 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:50,246 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:50,247 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:50,249 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:50,250 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:50,253 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:50,254 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:50,256 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:50,258 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:50,260 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:50,262 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:50,264 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:50,265 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:55,249 - graphiti_core.graphiti - INFO - Completed add_episode in 35161.68808937073 ms
2025-10-28 16:17:55,250 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_b51902df_1761648344
2025-10-28 16:17:55,253 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:57,841 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:17:58,715 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:05,975 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:05,981 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:05,987 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:05,992 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:05,996 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:06,000 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:06,012 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:06,016 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:06,649 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:06,652 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:09,641 - graphiti_core.graphiti - INFO - Completed add_episode in 14391.571044921875 ms
2025-10-28 16:18:09,641 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_d8190e7d_1761648344
2025-10-28 16:18:09,648 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:12,322 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:13,242 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:29,582 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:29,585 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:29,587 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:29,590 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:29,592 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:29,594 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:29,597 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:29,599 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:29,602 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:29,604 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:29,606 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:29,608 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:29,610 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:29,612 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:29,614 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:29,616 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:29,618 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:30,354 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:30,356 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:30,357 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:30,359 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:30,361 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:35,889 - graphiti_core.graphiti - INFO - Completed add_episode in 26246.850967407227 ms
2025-10-28 16:18:35,889 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_6f00547e_1761648344
2025-10-28 16:18:35,895 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:38,840 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:39,814 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:59,021 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:59,028 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:59,034 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:59,038 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:59,043 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:59,047 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:59,050 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:59,054 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:59,057 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:59,060 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:59,064 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:59,067 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:59,070 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:59,073 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:59,075 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:59,078 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:59,824 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:59,827 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:59,829 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:59,832 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:59,834 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:18:59,836 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:19:06,284 - graphiti_core.graphiti - INFO - Completed add_episode in 30394.74105834961 ms
2025-10-28 16:19:06,284 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_992d72d2_1761648344
2025-10-28 16:19:06,289 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:19:09,577 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:19:11,169 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:19:59,643 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:19:59,649 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:19:59,654 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:19:59,659 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:19:59,662 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:19:59,665 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:19:59,667 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:19:59,670 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:19:59,672 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:19:59,674 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:19:59,676 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:19:59,678 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:19:59,681 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:19:59,685 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:19:59,731 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:19:59,733 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:19:59,735 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:19:59,737 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:19:59,739 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:19:59,741 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:00,719 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:01,112 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:01,126 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:01,128 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:01,130 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:07,564 - graphiti_core.graphiti - INFO - Completed add_episode in 61280.097007751465 ms
2025-10-28 16:20:07,565 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_744682e8_1761648344
2025-10-28 16:20:07,569 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:11,196 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:12,284 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:48,789 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:48,796 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:48,801 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:48,806 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:48,810 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:48,814 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:48,816 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:48,821 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:48,824 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:48,827 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:48,830 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:48,834 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:48,837 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:48,839 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:48,842 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:48,844 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:48,847 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:48,849 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:48,852 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:48,855 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:49,900 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:49,902 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:49,903 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:49,905 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:49,907 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:49,910 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:51,548 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-10-28 16:20:51,549 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Document: temporal_rag_test_story.md\\nSection 4:\\nHer preferred coffee shop is now Sonder Coffee, HSR Layout when shes in Bangalore for board meetings.\\n---\",\n  \"Document: README.md\\nSection 1:\\nMulti-Tenant RAG System with Interactive CLI & FastAPI\\nOverview\\nA production-ready, multi-tenant Retrieval-Augmented Generation (RAG) system with complete data isolation, featuring both FastAPI server and interactive CLI client. Combines Neon PostgreSQL + pgvector for vector/hybrid search and Neo4j + Graphiti for knowledge graph capabilities.\\nBuilt following official Neon and Graphiti best practices with project-per-tenant database isolation and namespace-based graph isolation. Features a comprehensive Pydantic AI agent with intelligent tool routing and tenant-aware operations.\\nKey Features\\nComplete Tenant Isolation: Project-per-tenant databases + namespace isolation\\n-\",\n  \"Document: README.md\\nSection 2:\\nDual Interface: FastAPI server + Interactive CLI client\\nAI-Powered: Enhanced Pydantic AI agent with 10+ tenant-aware tools\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search\\nJWT Authentication: Secure tenant context with middleware validation\\nProduction Ready: Supervisor process management + Nginx reverse proxy\\nAWS EC2 Optimized: Complete deployment guides for cloud infrastructure\\nFully Tested: Comprehensive verification and testing scripts\\nLive Integration: Real-time Neon PostgreSQL + Neo4j Desktop connectivity\\n Architecture\",\n  \"Document: README.md\\nSection 3:\\nAmazon EC2 / Local Deployment \\n \\n  FastAPI + Interactive CLI Stack \\n    \\n   FastAPI   Interactive CLI  \\n   Multi-Tenant  HTTP Client  \\n   API Server   (Rich Console)  \\n   (Port 8000)\",\n  \"Document: README.md\\nSection 4:\\nEnhanced Pydantic AI Agent  \\n    Multi-Modal Search  Tenant Context Injection  \\n    10+ AI Tools  Graph + Vector Integration  \\n    JWT Authentication  Intelligent Tool Routing\",\n  \"Document: README.md\\nSection 5:\\nNeon PostgreSQL   Neo4j Desktop \\n (Cloud)   (Local/Remote) \\n  Project-per-Tenant    Graphiti Integration \\n  Vector Search (pgvector)    Namespace Isolation \\n  Hybrid Search (BM25)    Group ID Separation \\n  Catalog Database    Knowledge Graph \\n  Complete Isolation    Entity Relationships\",\n  \"Document: README.md\\nSection 6:\\nFile Structure\\n```\\nTenant/\\n README.md This comprehensive guide\\n requirements.txt Python dependencies\\n requirementsec2complete.txt Complete EC2 deployment dependencies\\n .env Environment configuration (create from template)\\n\\nCore Application Files\",\n  \"Document: README.md\\nSection 7:\\ninteractivemultitenantapi.py FastAPI server with tenant isolation\\n interactivemultitenantclihttp.py Rich CLI client with HTTP communication\\n multitenantagent.py Enhanced Pydantic AI agent\\n tenantmanager.py Neon project management & tenant lifecycle\\n tenantdataingestionservice.py Multi-modal search services\\n tenantgraphiticlient.py Neo4j + Graphiti with namespacing\\n authmiddleware.py JWT authentication & tenant context\\n\\nDeployment & Operations\",\n  \"Document: README.md\\nSection 8:\\nstartapi.sh API server startup script\\n startcli.sh CLI client startup script\\n EC2DEPLOYMENTGUIDE.md Complete AWS EC2 deployment guide\\n EC2DEPLOYMENTCHECKLIST.md Pre/post deployment verification\\n ec2quicksetup.sh Automated EC2 setup script\\n verifydeployment.sh Deployment verification script\\n\\nConfiguration & Schema\\n catalogschema.sql Catalog database schema for tenant metadata\\n deployment_guide.md Original deployment instructions\\n``\\nQuick Start\\nInstallation\\n``bash\\nClone and navigate to Tenant directory\\ncd Tenant/\\nCreate virtual environment\",\n  \"Document: README.md\\nSection 9:\\npython3 -m venv venv\\nsource venv/bin/activate On Windows: venv\\\\Scripts\\\\activate\\nInstall dependencies\\npip install -r requirements.txt\\n``\\nEnvironment Setup\\nCreate .env file:\\n``bash\\nNeon PostgreSQL Configuration (Project-per-Tenant)\\nNEONAPIKEY=yourneonapikeyhere\\nCATALOGDBURL=postgresql://username:password@ep-catalog.us-east-2.aws.neon.tech/neondb?sslmode=require\\nPOSTGRESURL=postgresql://username:password@ep-catalog.us-east-2.aws.neon.tech/neondb?sslmode=require\\nNeo4j Configuration (Local Desktop or Remote)\\nNEO4JURI=neo4j://localhost:7687\\nNEO4JURL=neo4j://localhost:7687\\nNEO4JUSERNAME=neo4j\\nNEO4JUSER=neo4j\\nNEO4JPASSWORD=yourneo4jpassword\\nNEO4JAUTH=neo4j/yourneo4j_password\\nAuthentication\"\n]\n        \"Document: README.md\\nSection 10:\\nJWTSECRETKEY=your-super-secret-jwt-key-change-in-production\\nJWTALGORITHM=HS256\\nAI Providers\\nOPENAIAPIKEY=youropenaiapikey\\nGOOGLEAPIKEY=yourgoogleapikey Optional\\nANTHROPICAPIKEY=youranthropicapikey Optional\\nApplication Configuration\\nAPPENV=development\\nAPPHOST=127.0.0.1\\nAPPPORT=8000\\nLOGLEVEL=info\\n``\\nDatabase Setup\\n`bash\\nSetup catalog database (control plane) - if needed\\npsql \\\"$CATALOGDBURL\\\" -f catalogschema.sql\\n`\\nStart the System\\n`bash\\nMethod 1: Direct startup\\npython3 interactivemultitenantapi.py\\nMethod 2: Using startup scripts\\nchmod +x startapi.sh startcli.sh\\n./startapi.sh\\nIn another terminal for CLI\\n./startcli.sh\\n`\\nVerify Installation\\n``bash\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'README.md', 'summary': \"This document describes a production-ready, multi-tenant Retrieval-Augmented Generation (RAG) system. It features a FastAPI server and an interactive CLI client, with complete data isolation achieved through Neon PostgreSQL and pgvector for vector/hybrid search, and Neo4j and Graphiti for knowledge graph capabilities. Key features include project-per-tenant database isolation, namespace-based graph isolation, a Pydantic AI agent with intelligent tool routing, dual interfaces (FastAPI and CLI), JWT authentication, and optimization for AWS EC2 deployment. It also supports multi-modal search (vector, graph, hybrid) and includes comprehensive testing scripts. The system is designed for production use, with features like Supervisor process management, Nginx reverse proxy, and real-time connectivity to Neon PostgreSQL and Neo4j Desktop. The AI agent is enhanced with over 10 tenant-aware tools and supports intelligent tool routing. The file structure includes a 'Tenant/' directory with configuration files like `requirements.txt` and `.env`. The core application files include `interactivemultitenantapi.py` for the FastAPI server, `interactivemultitenantclihttp.py` for the CLI client, `multitenantagent.py` for the AI agent, `tenantmanager.py` for Neon project management, `tenantdataingestionservice.py` for search services, `tenantgraphiticlient.py` for Neo4j integration, and `authmiddleware.py` for authentication. Deployment scripts like `startapi.sh` and `startcli.sh` are provided, along with EC2 deployment guides and a quick start installation guide. The document also details installation steps, including virtual environment setup and dependency installation using `pip install -r requirements.txt`. Environment setup involves configuring `.env` file with Neon PostgreSQL and Neo4j connection details.\", 'entity_types': ['Entity'], 'attributes': {'labels': ['Entity']}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{
  "summary": "This document describes a production-ready, multi-tenant Retrieval-Augmented Generation (RAG) system. It features a FastAPI server and an interactive CLI client, with complete data isolation achieved through Neon PostgreSQL and pgvector for vector/hybrid search, and Neo4j and Graphiti for knowledge graph capabilities. Key features include project-per-tenant database isolation, namespace-based graph isolation, a Pydantic AI agent with intelligent tool routing, dual interfaces (FastAPI and CLI), JWT authentication, and optimization for AWS EC2 deployment. It also supports multi-modal search (vector, graph, hybrid) and includes comprehensive testing scripts. The system is designed for production use, with features like Supervisor process management, Nginx reverse proxy, and real-time connectivity to Neon PostgreSQL and Neo4j Desktop. The AI agent is enhanced with over 10 tenant-aware tools and supports intelligent tool routing. The file structure includes a 'Tenant/' directory with configuration files like `requirements.txt` and `.env`. The core application files include `interactivemultitenantapi.py` for the FastAPI server, `interactivemultitenantclihttp.py` for the CLI client, `multitenantagent.py` for the AI agent, `tenantmanager.py` for Neon project management, `tenantdataingestionservice.py` for search services, `tenantgraphiticlient.py` for Neo4j integration, and `authmiddleware.py` for authentication. Deployment scripts like `startapi.sh` and `startcli.sh` are provided, along with EC2 deployment guides and a quick start installation guide. The document also details installation steps, including virtual environment setup and dependency installation using `pip install -r requirements.txt`. Environment setup involves configuring `.env` file with Neon PostgreSQL and Neo4j connection details, as well as JWT and AI provider API keys. The system can be started directly or using startup scripts, and installation can be verified using provided scripts."
}
```

2025-10-28 16:20:51,550 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-10-28 16:20:51,550 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-10-28 16:20:51,553 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:20:58,576 - graphiti_core.graphiti - INFO - Completed add_episode in 51011.220932006836 ms
2025-10-28 16:20:58,576 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_5fa86b10_1761648344
2025-10-28 16:20:58,594 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:21:01,887 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:21:02,635 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:21:23,916 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:21:23,922 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:21:23,929 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:21:23,934 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:21:23,938 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:21:23,942 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:21:23,946 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:21:23,948 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:21:23,951 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:21:28,506 - graphiti_core.graphiti - INFO - Completed add_episode in 29929.336071014404 ms
2025-10-28 16:21:28,506 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_33aeb3e9_1761648344
2025-10-28 16:21:28,511 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:21:33,230 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:21:34,423 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:21:50,858 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:21:50,864 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:21:50,870 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:21:50,876 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:21:50,880 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:21:50,884 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:21:50,889 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:21:50,892 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:21:50,896 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:21:50,901 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:21:51,658 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:21:51,661 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:21:51,664 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:21:51,666 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:21:51,669 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:21:56,979 - graphiti_core.graphiti - INFO - Completed add_episode in 28472.412109375 ms
2025-10-28 16:21:56,979 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_505cdb18_1761648344
2025-10-28 16:21:56,984 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:21:59,882 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:22:01,144 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:22:26,382 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:22:26,388 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:22:26,394 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:22:26,399 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:22:26,404 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:22:26,407 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:22:26,411 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:22:26,415 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:22:26,419 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:22:27,156 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:22:27,159 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:22:32,181 - graphiti_core.graphiti - INFO - Completed add_episode in 35201.78461074829 ms
2025-10-28 16:22:32,181 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_171959f1_1761648344
2025-10-28 16:22:32,187 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:22:36,415 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:22:37,257 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:22:53,281 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:22:53,289 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:22:53,294 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:22:53,299 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:22:53,303 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:22:53,309 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:22:53,313 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:22:53,318 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:22:54,170 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:22:54,173 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:22:54,175 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:22:54,177 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:22:54,179 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:23:00,175 - graphiti_core.graphiti - INFO - Completed add_episode in 27993.176698684692 ms
2025-10-28 16:23:00,175 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_b0269e4a_1761648344
2025-10-28 16:23:00,181 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:23:07,645 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:23:09,354 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:23:31,370 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:23:31,374 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:23:31,377 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:23:31,380 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:23:31,383 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:23:31,386 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:23:31,389 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:23:31,391 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:23:31,395 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:23:31,398 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:23:31,400 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:23:31,404 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:23:31,408 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:23:31,411 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:23:31,415 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:23:31,418 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:23:31,421 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:23:31,424 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:23:31,427 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:23:31,430 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:23:32,729 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:23:32,871 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:23:32,874 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:23:37,689 - graphiti_core.graphiti - INFO - Completed add_episode in 37513.18621635437 ms
2025-10-28 16:23:37,689 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_e4a20b31_1761648344
2025-10-28 16:23:37,693 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:23:42,556 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:23:44,549 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:04,327 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:04,333 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:04,340 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:04,345 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:04,349 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:04,354 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:04,358 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:04,362 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:04,365 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:04,369 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:04,372 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:04,376 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:04,379 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:04,382 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:04,385 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:04,387 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:04,390 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:04,392 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:04,395 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:04,397 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:05,691 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:05,693 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:05,696 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:05,699 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:05,701 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:05,703 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:05,705 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:05,708 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:05,710 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:05,712 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:05,713 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:05,716 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:05,718 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:05,722 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:05,828 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:06,014 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:06,022 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:06,029 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:06,097 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:06,180 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:06,195 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:15,569 - graphiti_core.graphiti - INFO - Completed add_episode in 37880.37300109863 ms
2025-10-28 16:24:15,570 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_d6b8bb54_1761648344
2025-10-28 16:24:15,574 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:19,116 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:20,095 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:32,642 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:32,648 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:32,654 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:32,659 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:32,663 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:32,665 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:32,668 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:32,672 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:32,676 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:32,680 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:32,683 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:32,687 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:32,690 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:32,692 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:33,429 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:33,432 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:33,434 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:33,437 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:33,440 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:40,323 - graphiti_core.graphiti - INFO - Completed add_episode in 24752.60090827942 ms
2025-10-28 16:24:40,323 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_bea5a79d_1761648344
2025-10-28 16:24:40,328 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:43,136 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:24:44,037 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:07,047 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:07,054 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:07,060 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:07,066 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:07,071 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:07,076 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:07,079 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:07,083 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:07,087 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:07,091 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:07,094 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:07,097 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:07,101 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:08,132 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:08,134 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:08,135 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:08,137 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:08,139 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:14,854 - graphiti_core.graphiti - INFO - Completed add_episode in 34531.399965286255 ms
2025-10-28 16:25:14,855 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_e617d26f_1761648344
2025-10-28 16:25:14,860 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:18,300 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:19,397 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:48,932 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:48,939 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:48,946 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:48,951 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:48,955 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:48,959 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:48,963 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:48,967 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:48,971 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:48,984 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:49,023 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:49,026 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:49,029 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:49,036 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:49,039 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:49,044 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:49,047 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:49,049 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:49,826 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:49,828 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:49,830 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:49,832 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:49,834 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:25:59,910 - graphiti_core.graphiti - INFO - Completed add_episode in 45054.96382713318 ms
2025-10-28 16:25:59,910 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_b4bb8741_1761648344
2025-10-28 16:25:59,916 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:26:03,198 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:26:04,137 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:26:19,641 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:26:19,649 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:26:19,654 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:26:19,660 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:26:19,664 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:26:19,670 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:26:19,674 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:26:19,678 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:26:23,440 - graphiti_core.graphiti - INFO - Completed add_episode in 23529.11376953125 ms
2025-10-28 16:26:23,440 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_d4f24c54_1761648344
2025-10-28 16:26:23,445 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:26:29,978 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:26:32,503 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:21,750 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:21,756 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:21,762 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:21,767 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:21,772 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:21,775 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:21,779 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:21,784 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:21,787 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:21,790 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:21,793 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:21,796 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:21,800 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:21,803 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:21,805 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:21,808 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:21,810 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:21,813 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:21,815 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:21,818 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:23,136 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:23,303 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:23,308 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:23,310 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:23,420 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:23,553 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:23,594 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:23,597 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:23,602 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:23,603 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:23,605 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:23,607 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:23,609 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:23,611 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:23,616 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:23,619 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:23,621 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:23,623 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:23,624 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:23,626 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:23,627 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:23,629 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:23,631 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:23,633 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:23,635 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:23,636 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:23,638 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:23,640 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:23,648 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:23,654 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:23,661 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:23,915 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:24,357 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:24,436 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:24,440 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:24,442 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:24,445 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:24,531 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:24,533 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:24,620 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:24,621 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:44,391 - graphiti_core.graphiti - INFO - Completed add_episode in 80951.40194892883 ms
2025-10-28 16:27:44,392 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_2eb90408_1761648344
2025-10-28 16:27:44,397 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:49,896 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:27:51,726 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:16,822 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:16,828 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:16,833 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:16,837 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:16,842 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:16,846 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:16,850 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:16,854 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:16,857 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:16,860 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:16,863 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:16,866 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:16,869 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:16,872 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:16,875 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:16,877 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:16,880 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:16,882 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:16,884 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:16,886 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:18,123 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:18,181 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:18,332 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:18,357 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:18,409 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:18,410 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:18,412 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:18,414 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:18,415 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:18,417 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:18,418 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:18,420 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:18,443 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:18,702 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:18,714 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:18,794 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:18,801 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:18,806 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:19,404 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-10-28 16:28:19,404 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Document: README.md\\nSection 12:\\ncurl -X POST \\\"http://localhost:8000/auth/login\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"tenantid\\\": \\\"TENANTIDFROMABOVE\\\",\\n\\\"apikey\\\": \\\"yourapikey\\\",\\n\\\"userid\\\": \\\"johndoe\\\"\\n}'\\nSave the JWT token from response\\n``\\nUpload Document\\n`bash\\nUpload document for ingestion\\ncurl -X POST \\\"http://localhost:8000/documents\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWT_TOKEN\\\" \\\\\\n-F \\\"file=@document.pdf\\\"\\nDocuments are automatically processed for vector and graph search\\n`\\nMulti-Modal Search\\n``bash\\n4a. Vector Search (Semantic similarity)\",\n  \"Document: README.md\\nSection 13:\\ncurl -X POST \\\"http://localhost:8000/search\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWTTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"query\\\": \\\"What are the company vacation policies?\\\",\\n\\\"searchtype\\\": \\\"vector\\\",\\n\\\"limit\\\": 10\\n}'\\n4b. Graph Search (Knowledge relationships)\\ncurl -X POST \\\"http://localhost:8000/search\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWTTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"query\\\": \\\"employee benefits structure\\\",\\n\\\"searchtype\\\": \\\"graph\\\",\\n\\\"limit\\\": 10\\n}'\\n4c. Hybrid Search (Vector + BM25 text search)\",\n  \"Document: README.md\\nSection 14:\\ncurl -X POST \\\"http://localhost:8000/search\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWTTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"query\\\": \\\"vacation policy details\\\",\\n\\\"searchtype\\\": \\\"hybrid\\\",\\n\\\"limit\\\": 10,\\n\\\"textweight\\\": 0.3\\n}'\\n4d. Comprehensive Search (All methods combined)\\ncurl -X POST \\\"http://localhost:8000/search\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWTTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"query\\\": \\\"comprehensive company policy information\\\",\\n\\\"search_type\\\": \\\"comprehensive\\\",\\n\\\"limit\\\": 10\\n}'\\n``\\nInteractive Chat\\n``bash\\nChat with AI agent\",\n  \"Document: README.md\\nSection 15:\\ncurl -X POST \\\"http://localhost:8000/chat\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWTTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"message\\\": \\\"Can you explain our remote work policy and its benefits?\\\",\\n\\\"sessionid\\\": \\\"optionalsessionid\\\"\\n}'\\n``\\n Interactive CLI Usage\\n``bash\\nStart the interactive CLI\\n./startcli.sh\\nOr with custom API URL\\n./start_cli.sh --api-url http://your-server:8000\\nCLI Features:\\nAuthenticate - Login with tenant credentials\\nCreate New Tenant - Set up new tenant\\n Show Tenant Info - View tenant details\\nUpload Document - Upload files for processing\\nAdvanced Search (Technical) - Multi-modal search options\\nChat Mode - Interactive AI conversation\",\n  \"Document: README.md\\nSection 16:\\nAPI Health Check - System status\\nExit - Close application\\n``\\nCore Components\\nTenantManager (tenantmanager.py)\\nNeon Project Management: Automated project creation and lifecycle management via Neon API\\nDatabase Routing: Dynamic connection management to tenant-specific databases\\nCatalog Operations: Centralized tenant metadata and configuration management\\nIsolation Guarantees: Complete project-level separation ensuring zero cross-tenant access\\nTenantDataIngestionService (tenantdataingestionservice.py`)\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search capabilities\\nVector Search: Semantic similarity using pgvector in tenant databases\\n-\",\n  \"Document: README.md\\nSection 17:\\nHybrid Search: Combined vector + BM25 text search with configurable weights\\nGraph Integration: Seamless integration with Graphiti for knowledge relationships\\nTenantGraphitiClient (tenantgraphiticlient.py)\\nNamespace Isolation: Complete tenant separation using groupid namespacing\\nKnowledge Graph: Entity and relationship extraction with temporal tracking\\nGraph Analytics: Advanced queries and relationship discovery within tenant boundaries\\nEpisode Management: Document ingestion with automatic knowledge graph updates\\nMultiTenantRAGAgent (multitenant_agent.py)\\nEnhanced Pydantic AI: 10+ specialized tools with tenant context injection\\n-\",\n  \"Document: README.md\\nSection 18:\\nIntelligent Routing: Automatic tool selection based on query complexity\\nDual Storage: Seamlessly combines vector and graph search results\\nContext Preservation: Maintains tenant isolation across all agent operations\\nAuthentication & Security (authmiddleware.py)\\nJWT Authentication: Secure token-based authentication with tenant claims\\nContext Injection: Automatic tenant context validation and routing\\nPermission Management: Fine-grained access control and audit logging\\nCross-Tenant Prevention: Multiple layers of isolation validation\\nInteractive CLI (interactivemultitenantcli_http.py)\\nRich Console Interface: Beautiful CLI with progress indicators and tables\\n-\",\n  \"Document: README.md\\nSection 19:\\nHTTP Communication: Seamless integration with FastAPI server\\nMulti-Modal Operations: Full access to all search types and chat functionality\\nSession Management: Persistent authentication and context handling\\nFastAPI Application (interactivemultitenant_api.py)\\nTenant-Aware Routing: Automatic request routing to correct tenant resources\\nComprehensive Endpoints: Full REST API with authentication and documentation\\nReal-Time Processing: Async operations with proper connection pooling\\nProduction Ready: Health checks, monitoring, and error handling\\nSecurity Guarantees\\nDatabase Level\\nComplete project-level isolation (one Neon project per tenant)\\n-\",\n  \"Document: README.md\\nSection 20:\\nNo cross-tenant data access possible (physical separation)\\nIndependent scaling and performance per tenant\\nBuilt-in backup and recovery per tenant\\nGraph Level\\nNamespace isolation using group_id\\nTenant-tagged entities and relationships\\nNamespace-scoped search and analytics\\nPrevent cross-tenant data access\\nApplication Level\\nJWT tokens with tenant claims\\nMiddleware-level tenant validation\\nPermission-based access control\\nComprehensive audit logging\\nAPI Endpoints\\nTenant Management\\nPOST /tenants - Create new tenant with automatic Neon project setup\\nGET /tenants/info - Get current tenant information and status\\n-\",\n  \"Document: README.md\\nSection 21:\\nGET /health - System health check and tenant count\\nAuthentication\\nPOST /auth/login - JWT authentication with tenant context\\nAutomatic token validation and tenant routing\\nDocument Management\\nPOST /documents - Upload files with automatic vector + graph ingestion\\nMulti-format support (PDF, TXT, DOCX, etc.)\\nMulti-Modal Search\\nPOST /search - Unified search endpoint with multiple types:\\nsearchtype: \\\"vector\\\" - Semantic similarity search\\nsearchtype: \\\"graph\\\" - Knowledge graph search\\nsearchtype: \\\"hybrid\\\" - Vector + BM25 text search\\nsearchtype: \\\"comprehensive\\\" - All methods combined\\nInteractive Chat\\nPOST /chat - Conversational AI with context awareness\\n-\"\n]\n        \"Document: README.md\\nSection 22:\\nSession management and source attribution\\nFull integration with search capabilities\\nMonitoring & Analytics\\nGET /health - System health and database connectivity\\nComprehensive logging and audit trails\\nReal-time performance metrics\\nTesting & Verification\\nDeployment Verification\\n``bash\\nRun comprehensive verification script\\nchmod +x verifydeployment.sh\\n./verifydeployment.sh\\nThis tests:\\nPython environment and dependencies\\nDatabase connectivity (Neon + Neo4j)\\nApplication integrity\\nSecurity configuration\\nAPI functionality\\n`\\nManual Testing\\n``bash\\nTest API health\\ncurl http://localhost:8000/health\\nTest authentication flow\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'README.md', 'summary': 'This document outlines a multi-tenant RAG system featuring a FastAPI server (`interactivemultitenantapi.py`) and a Rich CLI client (`interactivemultitenantcli_http.py`). It utilizes Neon PostgreSQL for tenant isolation, with project-per-tenant management handled by `tenantmanager.py`. Data ingestion and multi-modal search (vector, graph, hybrid, comprehensive) are managed by `tenantdataingestionservice.py`. Knowledge graph integration is provided by `tenantgraphiticlient.py` using Neo4j and Graphiti with namespace isolation. An enhanced Pydantic AI agent (`multitenant_agent.py`) with over 10 specialized tools is included. Authentication is handled via JWT middleware (`authmiddleware.py`). The document provides detailed installation instructions, including environment setup for Neon PostgreSQL, Neo4j, JWT, and AI providers (OpenAI, Google, Anthropic) via a `.env` file. Usage examples cover tenant creation, authentication, document upload, and various search methods. The system can be started directly or via startup scripts (`startapi.sh`, `startcli.sh`). Interactive API documentation is available at `/docs`. The system guarantees database-level isolation with one Neon project per tenant and provides tenant-aware routing, comprehensive endpoints, and real-time processing. Security is enforced at the database, graph, and application levels, with features like namespace isolation, JWT authentication, and audit logging. API endpoints for tenant management (POST /tenants, GET /tenants/info), authentication (POST /auth/login), document management (POST /documents), multi-modal search (POST /search), and interactive chat (POST /chat) are detailed. The system also includes API health checks (GET /health).', 'entity_types': ['Entity'], 'attributes': {'labels': ['Entity']}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{
  "summary": "This document outlines a multi-tenant RAG system featuring a FastAPI server (`interactivemultitenantapi.py`) and a Rich CLI client (`interactivemultitenantcli_http.py`). It utilizes Neon PostgreSQL for tenant isolation, with project-per-tenant management handled by `tenantmanager.py`. Data ingestion and multi-modal search (vector, graph, hybrid, comprehensive) are managed by `tenantdataingestionservice.py`. Knowledge graph integration is provided by `tenantgraphiticlient.py` using Neo4j and Graphiti with namespace isolation. An enhanced Pydantic AI agent (`multitenant_agent.py`) with over 10 specialized tools is included. Authentication is handled via JWT middleware (`authmiddleware.py`). The document provides detailed installation instructions, including environment setup for Neon PostgreSQL, Neo4j, JWT, and AI providers (OpenAI, Google, Anthropic) via a `.env` file. Usage examples cover tenant creation, authentication, document upload, and various search methods. The system can be started directly or via startup scripts (`startapi.sh`, `startcli.sh`). Interactive API documentation is available at `/docs`. The system guarantees database-level isolation with one Neon project per tenant and provides tenant-aware routing, comprehensive endpoints, and real-time processing. Security is enforced at the database, graph, and application levels, with features like namespace isolation, JWT authentication, and audit logging. API endpoints for tenant management (POST /tenants, GET /tenants/info), authentication (POST /auth/login), document management (POST /documents), multi-modal search (POST /search), and interactive chat (POST /chat) are detailed. The system also includes API health checks (GET /health). The document also details API endpoints for tenant management, authentication, document management, multi-modal search, and interactive chat, along with system health checks. It also includes instructions for deployment verification and manual testing of API endpoints."
}
```

2025-10-28 16:28:19,405 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-10-28 16:28:19,405 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-10-28 16:28:19,408 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:27,826 - graphiti_core.graphiti - INFO - Completed add_episode in 43434.36408042908 ms
2025-10-28 16:28:27,827 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_4a92424e_1761648344
2025-10-28 16:28:27,832 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:32,594 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:33,565 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:57,684 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:57,691 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:57,696 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:57,700 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:57,705 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:57,709 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:57,713 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:57,718 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:57,721 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:57,725 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:57,728 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:57,731 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:57,734 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:57,737 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:57,740 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:58,637 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:58,638 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:58,640 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:58,641 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:58,643 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:58,644 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:58,646 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:58,647 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:28:59,327 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-10-28 16:28:59,328 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Document: README.md\\nSection 13:\\ncurl -X POST \\\"http://localhost:8000/search\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWTTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"query\\\": \\\"What are the company vacation policies?\\\",\\n\\\"searchtype\\\": \\\"vector\\\",\\n\\\"limit\\\": 10\\n}'\\n4b. Graph Search (Knowledge relationships)\\ncurl -X POST \\\"http://localhost:8000/search\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWTTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"query\\\": \\\"employee benefits structure\\\",\\n\\\"searchtype\\\": \\\"graph\\\",\\n\\\"limit\\\": 10\\n}'\\n4c. Hybrid Search (Vector + BM25 text search)\",\n  \"Document: README.md\\nSection 14:\\ncurl -X POST \\\"http://localhost:8000/search\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWTTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"query\\\": \\\"vacation policy details\\\",\\n\\\"searchtype\\\": \\\"hybrid\\\",\\n\\\"limit\\\": 10,\\n\\\"textweight\\\": 0.3\\n}'\\n4d. Comprehensive Search (All methods combined)\\ncurl -X POST \\\"http://localhost:8000/search\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWTTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"query\\\": \\\"comprehensive company policy information\\\",\\n\\\"search_type\\\": \\\"comprehensive\\\",\\n\\\"limit\\\": 10\\n}'\\n``\\nInteractive Chat\\n``bash\\nChat with AI agent\",\n  \"Document: README.md\\nSection 15:\\ncurl -X POST \\\"http://localhost:8000/chat\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWTTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"message\\\": \\\"Can you explain our remote work policy and its benefits?\\\",\\n\\\"sessionid\\\": \\\"optionalsessionid\\\"\\n}'\\n``\\n Interactive CLI Usage\\n``bash\\nStart the interactive CLI\\n./startcli.sh\\nOr with custom API URL\\n./start_cli.sh --api-url http://your-server:8000\\nCLI Features:\\nAuthenticate - Login with tenant credentials\\nCreate New Tenant - Set up new tenant\\n Show Tenant Info - View tenant details\\nUpload Document - Upload files for processing\\nAdvanced Search (Technical) - Multi-modal search options\\nChat Mode - Interactive AI conversation\",\n  \"Document: README.md\\nSection 16:\\nAPI Health Check - System status\\nExit - Close application\\n``\\nCore Components\\nTenantManager (tenantmanager.py)\\nNeon Project Management: Automated project creation and lifecycle management via Neon API\\nDatabase Routing: Dynamic connection management to tenant-specific databases\\nCatalog Operations: Centralized tenant metadata and configuration management\\nIsolation Guarantees: Complete project-level separation ensuring zero cross-tenant access\\nTenantDataIngestionService (tenantdataingestionservice.py`)\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search capabilities\\nVector Search: Semantic similarity using pgvector in tenant databases\\n-\",\n  \"Document: README.md\\nSection 17:\\nHybrid Search: Combined vector + BM25 text search with configurable weights\\nGraph Integration: Seamless integration with Graphiti for knowledge relationships\\nTenantGraphitiClient (tenantgraphiticlient.py)\\nNamespace Isolation: Complete tenant separation using groupid namespacing\\nKnowledge Graph: Entity and relationship extraction with temporal tracking\\nGraph Analytics: Advanced queries and relationship discovery within tenant boundaries\\nEpisode Management: Document ingestion with automatic knowledge graph updates\\nMultiTenantRAGAgent (multitenant_agent.py)\\nEnhanced Pydantic AI: 10+ specialized tools with tenant context injection\\n-\",\n  \"Document: README.md\\nSection 18:\\nIntelligent Routing: Automatic tool selection based on query complexity\\nDual Storage: Seamlessly combines vector and graph search results\\nContext Preservation: Maintains tenant isolation across all agent operations\\nAuthentication & Security (authmiddleware.py)\\nJWT Authentication: Secure token-based authentication with tenant claims\\nContext Injection: Automatic tenant context validation and routing\\nPermission Management: Fine-grained access control and audit logging\\nCross-Tenant Prevention: Multiple layers of isolation validation\\nInteractive CLI (interactivemultitenantcli_http.py)\\nRich Console Interface: Beautiful CLI with progress indicators and tables\\n-\",\n  \"Document: README.md\\nSection 19:\\nHTTP Communication: Seamless integration with FastAPI server\\nMulti-Modal Operations: Full access to all search types and chat functionality\\nSession Management: Persistent authentication and context handling\\nFastAPI Application (interactivemultitenant_api.py)\\nTenant-Aware Routing: Automatic request routing to correct tenant resources\\nComprehensive Endpoints: Full REST API with authentication and documentation\\nReal-Time Processing: Async operations with proper connection pooling\\nProduction Ready: Health checks, monitoring, and error handling\\nSecurity Guarantees\\nDatabase Level\\nComplete project-level isolation (one Neon project per tenant)\\n-\",\n  \"Document: README.md\\nSection 20:\\nNo cross-tenant data access possible (physical separation)\\nIndependent scaling and performance per tenant\\nBuilt-in backup and recovery per tenant\\nGraph Level\\nNamespace isolation using group_id\\nTenant-tagged entities and relationships\\nNamespace-scoped search and analytics\\nPrevent cross-tenant data access\\nApplication Level\\nJWT tokens with tenant claims\\nMiddleware-level tenant validation\\nPermission-based access control\\nComprehensive audit logging\\nAPI Endpoints\\nTenant Management\\nPOST /tenants - Create new tenant with automatic Neon project setup\\nGET /tenants/info - Get current tenant information and status\\n-\",\n  \"Document: README.md\\nSection 21:\\nGET /health - System health check and tenant count\\nAuthentication\\nPOST /auth/login - JWT authentication with tenant context\\nAutomatic token validation and tenant routing\\nDocument Management\\nPOST /documents - Upload files with automatic vector + graph ingestion\\nMulti-format support (PDF, TXT, DOCX, etc.)\\nMulti-Modal Search\\nPOST /search - Unified search endpoint with multiple types:\\nsearchtype: \\\"vector\\\" - Semantic similarity search\\nsearchtype: \\\"graph\\\" - Knowledge graph search\\nsearchtype: \\\"hybrid\\\" - Vector + BM25 text search\\nsearchtype: \\\"comprehensive\\\" - All methods combined\\nInteractive Chat\\nPOST /chat - Conversational AI with context awareness\\n-\",\n  \"Document: README.md\\nSection 22:\\nSession management and source attribution\\nFull integration with search capabilities\\nMonitoring & Analytics\\nGET /health - System health and database connectivity\\nComprehensive logging and audit trails\\nReal-time performance metrics\\nTesting & Verification\\nDeployment Verification\\n``bash\\nRun comprehensive verification script\\nchmod +x verifydeployment.sh\\n./verifydeployment.sh\\nThis tests:\\nPython environment and dependencies\\nDatabase connectivity (Neon + Neo4j)\\nApplication integrity\\nSecurity configuration\\nAPI functionality\\n`\\nManual Testing\\n``bash\\nTest API health\\ncurl http://localhost:8000/health\\nTest authentication flow\"\n]\n        \"Document: README.md\\nSection 23:\\ncurl -X POST \\\"http://localhost:8000/tenants\\\" -H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\\"name\\\": \\\"Test Corp\\\", \\\"email\\\": \\\"test@corp.com\\\"}'\\nTest search functionality\\ncurl -X POST \\\"http://localhost:8000/search\\\" -H \\\"Authorization: Bearer TOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\\"query\\\": \\\"test\\\", \\\"searchtype\\\": \\\"vector\\\"}'\\n``\\nCLI Testing\\n`bash\\nInteractive CLI testing\\n./startcli.sh --api-url http://localhost:8000\\nAutomated CLI testing\\npython3 interactivemultitenantclihttp.py --help\\n`\\nDeployment\\nLocal Development\\n`bash\\nDirect startup\\npython3 interactivemultitenantapi.py\\nUsing startup scripts\\n./startapi.sh\\n``\\nAWS EC2 Production Deployment\\nComplete deployment guides included:\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'localhost:8000', 'summary': 'The entity represents the local deployment of a FastAPI + Interactive CLI stack, accessible via HTTP Client on port 8000. It features an Enhanced Pydantic AI Agent with multi-modal search, tenant context injection, and intelligent tool routing, integrating with Neon PostgreSQL for vector search and Neo4j for graph capabilities. The file structure includes configuration files, startup scripts for the API and CLI, and deployment guides for EC2. Installation involves cloning the repository, setting up a virtual environment, installing dependencies, and configuring environment variables for Neon PostgreSQL, Neo4j, JWT authentication, and AI providers. The system can be started directly or via startup scripts. Verification includes checking API health and running deployment verification scripts. Usage examples demonstrate tenant creation, authentication via JWT, document upload for ingestion into vector and graph search, and multi-modal search queries (vector, graph, and hybrid).', 'entity_types': ['Entity'], 'attributes': {'labels': ['Entity']}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{
  "summary": "The entity represents the local deployment of a FastAPI + Interactive CLI stack, accessible via HTTP Client on port 8000. It features an Enhanced Pydantic AI Agent with multi-modal search (vector, graph, hybrid, comprehensive), tenant context injection, and intelligent tool routing, integrating with Neon PostgreSQL for vector search and Neo4j for graph capabilities. The file structure includes configuration files, startup scripts for the API and CLI, and deployment guides for EC2. Installation involves cloning the repository, setting up a virtual environment, installing dependencies, and configuring environment variables for Neon PostgreSQL, Neo4j, JWT authentication, and AI providers. The system can be started directly or via startup scripts. Verification includes checking API health and running deployment verification scripts. Usage examples demonstrate tenant creation, authentication via JWT, document upload for ingestion into vector and graph search, and multi-modal search queries. The API provides endpoints for tenant management, authentication, document management, multi-modal search, and interactive chat."
}
```

2025-10-28 16:28:59,328 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-10-28 16:28:59,329 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-10-28 16:28:59,331 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:29:07,604 - graphiti_core.graphiti - INFO - Completed add_episode in 39777.63319015503 ms
2025-10-28 16:29:07,605 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_1d65564c_1761648344
2025-10-28 16:29:07,610 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:29:11,163 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:29:12,171 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:29:31,769 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:29:31,775 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:29:31,781 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:29:31,786 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:29:31,790 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:29:31,795 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:29:31,800 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:29:31,805 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:29:31,808 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:29:31,812 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:29:31,815 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:29:31,818 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:29:31,821 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:29:31,824 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:29:31,827 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:29:31,830 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:29:31,832 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:29:31,835 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:29:31,837 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:29:32,651 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:29:32,654 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:29:39,355 - graphiti_core.graphiti - INFO - Completed add_episode in 31750.35071372986 ms
2025-10-28 16:29:39,356 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_800557dc_1761648344
2025-10-28 16:29:39,360 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:29:44,859 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:29:46,892 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:30,317 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:30,319 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:30,322 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:30,324 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:30,327 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:30,329 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:30,331 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:30,333 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:30,335 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:30,338 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:30,340 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:30,342 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:30,346 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:30,349 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:30,351 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:30,353 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:30,355 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:30,357 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:30,359 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:30,361 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:31,621 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:31,824 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:31,827 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:31,829 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:31,832 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:31,833 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:31,835 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:31,836 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:31,838 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:31,841 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:31,842 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:31,845 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:31,846 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:31,848 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:31,849 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:31,851 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:31,852 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:31,875 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:31,964 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:31,968 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:31,971 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:32,056 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:32,061 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:32,064 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:32,158 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:32,163 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:32,168 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:32,224 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:40,689 - graphiti_core.graphiti - INFO - Completed add_episode in 61332.6940536499 ms
2025-10-28 16:30:40,689 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_097c6b9b_1761648344
2025-10-28 16:30:40,693 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:46,725 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:30:48,781 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:37,430 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:37,436 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:37,442 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:37,446 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:37,451 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:37,455 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:37,459 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:37,462 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:37,464 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:37,466 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:37,468 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:37,470 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:37,473 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:37,477 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:37,481 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:37,484 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:37,486 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:37,489 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:37,492 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:37,495 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:38,824 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:38,832 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:38,910 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:38,995 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:39,000 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-10-28 16:31:39,001 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Document: README.md\\nSection 16:\\nAPI Health Check - System status\\nExit - Close application\\n``\\nCore Components\\nTenantManager (tenantmanager.py)\\nNeon Project Management: Automated project creation and lifecycle management via Neon API\\nDatabase Routing: Dynamic connection management to tenant-specific databases\\nCatalog Operations: Centralized tenant metadata and configuration management\\nIsolation Guarantees: Complete project-level separation ensuring zero cross-tenant access\\nTenantDataIngestionService (tenantdataingestionservice.py`)\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search capabilities\\nVector Search: Semantic similarity using pgvector in tenant databases\\n-\",\n  \"Document: README.md\\nSection 17:\\nHybrid Search: Combined vector + BM25 text search with configurable weights\\nGraph Integration: Seamless integration with Graphiti for knowledge relationships\\nTenantGraphitiClient (tenantgraphiticlient.py)\\nNamespace Isolation: Complete tenant separation using groupid namespacing\\nKnowledge Graph: Entity and relationship extraction with temporal tracking\\nGraph Analytics: Advanced queries and relationship discovery within tenant boundaries\\nEpisode Management: Document ingestion with automatic knowledge graph updates\\nMultiTenantRAGAgent (multitenant_agent.py)\\nEnhanced Pydantic AI: 10+ specialized tools with tenant context injection\\n-\",\n  \"Document: README.md\\nSection 18:\\nIntelligent Routing: Automatic tool selection based on query complexity\\nDual Storage: Seamlessly combines vector and graph search results\\nContext Preservation: Maintains tenant isolation across all agent operations\\nAuthentication & Security (authmiddleware.py)\\nJWT Authentication: Secure token-based authentication with tenant claims\\nContext Injection: Automatic tenant context validation and routing\\nPermission Management: Fine-grained access control and audit logging\\nCross-Tenant Prevention: Multiple layers of isolation validation\\nInteractive CLI (interactivemultitenantcli_http.py)\\nRich Console Interface: Beautiful CLI with progress indicators and tables\\n-\",\n  \"Document: README.md\\nSection 19:\\nHTTP Communication: Seamless integration with FastAPI server\\nMulti-Modal Operations: Full access to all search types and chat functionality\\nSession Management: Persistent authentication and context handling\\nFastAPI Application (interactivemultitenant_api.py)\\nTenant-Aware Routing: Automatic request routing to correct tenant resources\\nComprehensive Endpoints: Full REST API with authentication and documentation\\nReal-Time Processing: Async operations with proper connection pooling\\nProduction Ready: Health checks, monitoring, and error handling\\nSecurity Guarantees\\nDatabase Level\\nComplete project-level isolation (one Neon project per tenant)\\n-\",\n  \"Document: README.md\\nSection 20:\\nNo cross-tenant data access possible (physical separation)\\nIndependent scaling and performance per tenant\\nBuilt-in backup and recovery per tenant\\nGraph Level\\nNamespace isolation using group_id\\nTenant-tagged entities and relationships\\nNamespace-scoped search and analytics\\nPrevent cross-tenant data access\\nApplication Level\\nJWT tokens with tenant claims\\nMiddleware-level tenant validation\\nPermission-based access control\\nComprehensive audit logging\\nAPI Endpoints\\nTenant Management\\nPOST /tenants - Create new tenant with automatic Neon project setup\\nGET /tenants/info - Get current tenant information and status\\n-\",\n  \"Document: README.md\\nSection 21:\\nGET /health - System health check and tenant count\\nAuthentication\\nPOST /auth/login - JWT authentication with tenant context\\nAutomatic token validation and tenant routing\\nDocument Management\\nPOST /documents - Upload files with automatic vector + graph ingestion\\nMulti-format support (PDF, TXT, DOCX, etc.)\\nMulti-Modal Search\\nPOST /search - Unified search endpoint with multiple types:\\nsearchtype: \\\"vector\\\" - Semantic similarity search\\nsearchtype: \\\"graph\\\" - Knowledge graph search\\nsearchtype: \\\"hybrid\\\" - Vector + BM25 text search\\nsearchtype: \\\"comprehensive\\\" - All methods combined\\nInteractive Chat\\nPOST /chat - Conversational AI with context awareness\\n-\",\n  \"Document: README.md\\nSection 22:\\nSession management and source attribution\\nFull integration with search capabilities\\nMonitoring & Analytics\\nGET /health - System health and database connectivity\\nComprehensive logging and audit trails\\nReal-time performance metrics\\nTesting & Verification\\nDeployment Verification\\n``bash\\nRun comprehensive verification script\\nchmod +x verifydeployment.sh\\n./verifydeployment.sh\\nThis tests:\\nPython environment and dependencies\\nDatabase connectivity (Neon + Neo4j)\\nApplication integrity\\nSecurity configuration\\nAPI functionality\\n`\\nManual Testing\\n``bash\\nTest API health\\ncurl http://localhost:8000/health\\nTest authentication flow\",\n  \"Document: README.md\\nSection 23:\\ncurl -X POST \\\"http://localhost:8000/tenants\\\" -H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\\"name\\\": \\\"Test Corp\\\", \\\"email\\\": \\\"test@corp.com\\\"}'\\nTest search functionality\\ncurl -X POST \\\"http://localhost:8000/search\\\" -H \\\"Authorization: Bearer TOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\\"query\\\": \\\"test\\\", \\\"searchtype\\\": \\\"vector\\\"}'\\n``\\nCLI Testing\\n`bash\\nInteractive CLI testing\\n./startcli.sh --api-url http://localhost:8000\\nAutomated CLI testing\\npython3 interactivemultitenantclihttp.py --help\\n`\\nDeployment\\nLocal Development\\n`bash\\nDirect startup\\npython3 interactivemultitenantapi.py\\nUsing startup scripts\\n./startapi.sh\\n``\\nAWS EC2 Production Deployment\\nComplete deployment guides included:\",\n  \"Document: README.md\\nSection 24:\\n``bash\\nUpload to EC2 and run automated setup\\nscp -r Tenant/* ubuntu@your-ec2-ip:/tmp/Tenant/\\nssh ubuntu@your-ec2-ip\\ncd /tmp/Tenant && ./ec2quicksetup.sh\\nConfigure environment\\nnano /opt/multi-tenant-rag/.env\\nVerify deployment\\n/opt/multi-tenant-rag/verifydeployment.sh\\nStart services\\nsudo supervisorctl start multi-tenant-rag-api\\n`\\nSee comprehensive deployment guides:\\nEC2DEPLOYMENTGUIDE.md - Complete step-by-step instructions\\nEC2DEPLOYMENTCHECKLIST.md - Pre/post deployment verification\\nec2quick_setup.sh` - Automated setup script\\nPerformance & Scaling\\nOptimizations Included\\nAsync database operations with connection pooling\\nEfficient vector search with proper indexing\\n-\",\n  \"Document: README.md\\nSection 25:\\nRate limiting and request throttling\\nCaching strategies for frequently accessed data\\nScaling Considerations\\nHorizontal scaling with load balancers\\nDatabase read replicas for improved performance\\nRedis caching for session management\\nKubernetes deployment for orchestration\\n Configuration Options\\nEnvironment Variables\\nNEONCONNECTIONSTRING - PostgreSQL connection\\nNEO4JURI - Neo4j connection\\nJWTSECRETKEY - JWT signing key\\nOPENAIAPIKEY - AI model access\\nAPPENV - Environment (development/production)\\nLOGLEVEL - Logging verbosity\\nTenant Limits\\nmaxdocuments - Maximum documents per tenant\\nmaxstoragemb - Maximum storage per tenant\\n-\"\n]\n        \"Document: README.md\\nSection 26:\\nCustom quotas and rate limits per tenant\\nMonitoring & Observability\\nBuilt-in Monitoring\\nHealth check endpoints\\nPerformance metrics collection\\nError tracking and alerting\\nAudit logs for security events\\nRecommended Tools\\nPrometheus + Grafana for metrics\\nELK Stack for log aggregation\\nSentry for error tracking\\nDataDog for APM\\nContributing\\nFollow the Architecture: Maintain tenant isolation patterns\\nWrite Tests: All new features require comprehensive tests\\nSecurity First: Validate tenant boundaries in all operations\\nDocumentation: Update guides for any new features\\nPerformance: Consider scalability in all implementations\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'Sentry', 'summary': '', 'entity_types': ['Entity'], 'attributes': {}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{
  "summary": "Sentry is a recommended tool for error tracking and alerting within the system's monitoring and observability framework. It integrates with other tools like Prometheus, Grafana, and the ELK Stack to provide comprehensive insights into system performance and security events."
}
```

2025-10-28 16:31:39,002 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-10-28 16:31:39,002 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-10-28 16:31:39,005 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:39,017 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:39,024 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:39,077 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:39,088 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:39,248 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:39,250 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:39,255 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:39,265 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:39,271 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:39,342 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:39,343 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:39,345 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:39,346 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:39,348 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:39,350 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:39,352 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:39,359 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:48,163 - graphiti_core.graphiti - INFO - Completed add_episode in 67474.15471076965 ms
2025-10-28 16:31:48,163 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_a1b478f6_1761648344
2025-10-28 16:31:48,168 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:51,940 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:31:53,670 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:18,082 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:18,088 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:18,093 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:18,098 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:18,102 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:18,106 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:18,111 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:18,114 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:18,118 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:18,120 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:18,124 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:18,127 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:18,131 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:18,134 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:18,137 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:18,139 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:18,142 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:18,146 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:18,150 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:18,154 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:19,517 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:19,518 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:19,520 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:19,521 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:19,524 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:19,525 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:19,533 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:19,624 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:27,038 - graphiti_core.graphiti - INFO - Completed add_episode in 38874.1340637207 ms
2025-10-28 16:32:27,038 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_cf35e330_1761648344
2025-10-28 16:32:27,044 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:29,421 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:30,332 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:59,128 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:59,135 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:59,142 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:59,148 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:59,153 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:59,156 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:59,159 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:59,164 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:59,167 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:32:59,171 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:00,392 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:00,394 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:00,395 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:00,397 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:11,574 - graphiti_core.graphiti - INFO - Completed add_episode in 44536.10968589783 ms
2025-10-28 16:33:11,575 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_60b92df4_1761648344
2025-10-28 16:33:11,578 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:17,258 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:19,542 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:49,974 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:49,980 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:49,985 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:49,990 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:49,995 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:49,999 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:50,003 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:50,006 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:50,009 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:50,012 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:50,016 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:50,019 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:50,022 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:50,026 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:50,029 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:50,031 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:50,034 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:50,037 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:50,040 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:50,042 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:51,161 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:51,163 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:51,164 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:51,166 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:51,168 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:51,170 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:51,171 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:51,172 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:51,174 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:51,176 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:51,177 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:51,179 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:51,181 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:51,648 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:51,655 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:51,709 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:51,721 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:51,983 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:51,988 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:51,994 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:51,999 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:52,004 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:52,010 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:33:52,056 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:34:03,339 - graphiti_core.graphiti - INFO - Completed add_episode in 51764.01090621948 ms
2025-10-28 16:34:03,339 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_ed5853c5_1761648344
2025-10-28 16:34:03,344 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:34:06,699 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:34:07,695 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:34:35,961 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:34:35,969 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:34:35,975 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:34:35,980 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:34:35,984 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:34:35,989 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:34:35,991 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:34:35,996 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:34:36,000 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:34:36,003 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:34:36,007 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:34:36,010 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:34:36,013 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:34:36,016 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:34:36,655 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:34:36,658 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:34:36,660 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:34:48,236 - graphiti_core.graphiti - INFO - Completed add_episode in 44896.414041519165 ms
2025-10-28 16:34:48,236 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_294235d2_1761648344
2025-10-28 16:34:48,261 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:34:52,988 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:34:54,159 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:35:31,688 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:35:31,695 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:35:31,701 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:35:31,707 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:35:31,712 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:35:31,717 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:35:31,721 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:35:31,725 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:35:31,729 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:35:31,733 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:35:31,736 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:35:31,739 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:35:31,742 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:35:31,746 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:35:31,748 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:35:31,751 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:35:31,754 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:35:31,756 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:35:31,759 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:35:32,608 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:35:32,610 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:35:32,612 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:35:32,614 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:35:32,616 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:35:32,618 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 16:35:43,741 - graphiti_core.graphiti - INFO - Completed add_episode in 55504.63318824768 ms
2025-10-28 16:35:43,741 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_e476992f_1761648344
2025-10-28 16:35:43,741 - graphiti_ingestion_manager - INFO - KG ingestion completed for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: 31/31 episodes succeeded, 0 failed
2025-10-28 16:35:43,741 - tenant_graphiti_client - INFO - ✅ Perfect KG ingestion for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: 31/31 episodes succeeded
2025-10-28 16:35:43,741 - tenant_data_ingestion_service - INFO - ✅ Successfully added 31 episodes to tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80 graph namespace
2025-10-28 16:35:43,741 - tenant_data_ingestion_service - INFO - Graph ingestion: Created episode 31
2025-10-28 16:35:43,741 - tenant_data_ingestion_service - INFO - Successfully ingested document 86402f12-1aa5-4567-a0aa-58b104521f84 for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80 in 1282234.52ms
2025-10-28 17:46:28,092 - interactive_multi_tenant_api - INFO - Shutting down Multi-Tenant RAG API...
2025-10-28 17:46:40,294 - __main__ - INFO - Starting Interactive Multi-Tenant RAG API on 127.0.0.1:8000
2025-10-28 17:46:40,315 - interactive_multi_tenant_api - INFO - Starting Multi-Tenant RAG API...
2025-10-28 17:46:40,315 - interactive_multi_tenant_api - INFO - Neo4j URI: neo4j://127.0.0.1:7687
2025-10-28 17:46:40,315 - interactive_multi_tenant_api - INFO - Neo4j User: neo4j
2025-10-28 17:46:40,315 - interactive_multi_tenant_api - INFO - Neo4j Password: ***
2025-10-28 17:46:40,315 - tenant_manager - INFO - TenantManager initialized with Graphiti client
2025-10-28 17:46:40,315 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-10-28 17:46:40,315 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-10-28 17:46:40,315 - multi_tenant_ingestion - INFO - Multi-tenant ingestion pipeline initialized
2025-10-28 17:46:40,315 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-10-28 17:46:40,315 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-10-28 17:46:40,315 - interactive_multi_tenant_api - INFO - Tenant manager initialized
2025-10-28 17:46:40,318 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-10-28 17:46:40,318 - interactive_multi_tenant_api - INFO - Tenant ingestion service initialized
2025-10-28 17:46:40,319 - auth_middleware - INFO - JWT Authenticator initialized
2025-10-28 17:46:40,319 - interactive_multi_tenant_api - INFO - JWT authenticator initialized
2025-10-28 17:46:40,319 - interactive_multi_tenant_api - INFO - 🎯 Multi-Tenant RAG API ready - all backend logs will appear in this terminal
2025-10-28 17:46:40,319 - interactive_multi_tenant_api - INFO - 📊 Backend activity from CLI and API operations will be shown below:
2025-10-28 17:46:57,336 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-10-28 17:46:57,498 - catalog_database - INFO - Catalog database connection test successful
2025-10-28 17:46:57,498 - tenant_graphiti_client - INFO - Applied Graphiti performance optimizations for production reliability
2025-10-28 17:46:57,499 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-28 17:46:57,544 - robust_gemini_client - INFO - RobustGeminiClient initialized with temperature=0.0 for deterministic JSON output
2025-10-28 17:46:57,544 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-28 17:46:57,570 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-28 17:46:57,642 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_uuid IF NOT EXISTS FOR (e:Entity) ON (e.uuid)` has no effect.} {description: `RANGE INDEX entity_uuid FOR (e:Entity) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX entity_uuid IF NOT EXISTS FOR (n:Entity) ON (n.uuid)'
2025-10-28 17:46:57,643 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX has_member_uuid FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)'
2025-10-28 17:46:57,644 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_uuid IF NOT EXISTS FOR (e:Episodic) ON (e.uuid)` has no effect.} {description: `RANGE INDEX episode_uuid FOR (e:Episodic) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX episode_uuid IF NOT EXISTS FOR (n:Episodic) ON (n.uuid)'
2025-10-28 17:46:57,645 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX community_uuid IF NOT EXISTS FOR (e:Community) ON (e.uuid)` has no effect.} {description: `RANGE INDEX community_uuid FOR (e:Community) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX community_uuid IF NOT EXISTS FOR (n:Community) ON (n.uuid)'
2025-10-28 17:46:57,645 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX relation_uuid FOR ()-[e:RELATES_TO]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)'
2025-10-28 17:46:57,645 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX mention_uuid FOR ()-[e:MENTIONS]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)'
2025-10-28 17:46:57,646 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_group_id IF NOT EXISTS FOR (e:Entity) ON (e.group_id)` has no effect.} {description: `RANGE INDEX entity_group_id FOR (e:Entity) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX entity_group_id IF NOT EXISTS FOR (n:Entity) ON (n.group_id)'
2025-10-28 17:46:57,646 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_group_id IF NOT EXISTS FOR (e:Episodic) ON (e.group_id)` has no effect.} {description: `RANGE INDEX episode_group_id FOR (e:Episodic) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX episode_group_id IF NOT EXISTS FOR (n:Episodic) ON (n.group_id)'
2025-10-28 17:46:57,647 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX relation_group_id FOR ()-[e:RELATES_TO]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)'
2025-10-28 17:46:57,649 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX mention_group_id FOR ()-[e:MENTIONS]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)'
2025-10-28 17:46:57,650 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.name)` has no effect.} {description: `RANGE INDEX name_entity_index FOR (e:Entity) ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.name)'
2025-10-28 17:46:57,651 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` has no effect.} {description: `FULLTEXT INDEX node_name_and_summary FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS \n            FOR (n:Entity) ON EACH [n.name, n.summary, n.group_id]'
2025-10-28 17:46:57,652 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_episodic_index FOR (e:Episodic) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.created_at)'
2025-10-28 17:46:57,653 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX community_name IF NOT EXISTS FOR (e:Community) ON EACH [e.name, e.group_id]` has no effect.} {description: `FULLTEXT INDEX community_name FOR (e:Community) ON EACH [e.name, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX community_name IF NOT EXISTS \n            FOR (n:Community) ON EACH [n.name, n.group_id]'
2025-10-28 17:46:57,653 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` has no effect.} {description: `FULLTEXT INDEX edge_name_and_fact FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS \n            FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]'
2025-10-28 17:46:57,653 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_entity_index FOR (e:Entity) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.created_at)'
2025-10-28 17:46:57,654 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_episodic_index FOR (e:Episodic) ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.valid_at)'
2025-10-28 17:46:57,656 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)` has no effect.} {description: `RANGE INDEX name_edge_index FOR ()-[e:RELATES_TO]-() ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)'
2025-10-28 17:46:57,656 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` has no effect.} {description: `RANGE INDEX expired_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` already exists.} {position: None} for query: 'CREATE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)'
2025-10-28 17:46:57,656 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)'
2025-10-28 17:46:57,656 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` has no effect.} {description: `RANGE INDEX invalid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` already exists.} {position: None} for query: 'CREATE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)'
2025-10-28 17:46:57,657 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)'
2025-10-28 17:46:57,658 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX episode_content IF NOT EXISTS FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` has no effect.} {description: `FULLTEXT INDEX episode_content FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX episode_content IF NOT EXISTS \n            FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]'
2025-10-28 17:46:57,658 - graphiti_ingestion_manager - INFO - GraphitiIngestionManager initialized for reliable episode ingestion (max_concurrent=2)
2025-10-28 17:46:57,658 - tenant_graphiti_client - INFO - 🚀 Parallel ingestion enabled with max_concurrent=2 episodes
2025-10-28 17:46:57,658 - tenant_graphiti_client - INFO - TenantGraphitiClient initialized successfully with robust LLM: gemini-2.0-flash-thinking-exp-01-21
2025-10-28 17:46:57,658 - tenant_graphiti_client - INFO - ✅ Knowledge graph ingestion is now deterministic and reliable
2025-10-28 17:47:21,626 - auth_middleware - INFO - Created access token for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80
2025-10-28 17:47:38,938 - interactive_multi_tenant_api - INFO - Document upload for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: README.md -> vector database + knowledge graph
2025-10-28 17:47:38,938 - tenant_data_ingestion_service - INFO - Starting document ingestion for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: README.md
2025-10-28 17:47:38,939 - tenant_data_ingestion_service - INFO - Ingestion options: vector database + knowledge graph
2025-10-28 17:47:42,512 - tenant_data_ingestion_service - INFO - Creating chunks for document: README.md
2025-10-28 17:47:42,528 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-28 17:47:42,561 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:48:00,112 - tenant_data_ingestion_service - INFO - Generating embeddings for 30 chunks
2025-10-28 17:48:00,112 - ingestion.embedder - INFO - Generating embeddings for 30 chunks
2025-10-28 17:48:01,759 - ingestion.embedder - INFO - Processed batch 1/1
2025-10-28 17:48:01,759 - ingestion.embedder - INFO - Generated embeddings for 30 chunks (model: embedding-001, dimensions: 768)
2025-10-28 17:48:14,535 - tenant_data_ingestion_service - INFO - Created 30 chunks for document a6c1092a-86e2-4d58-ad7f-abecbea08706 (30 with valid embeddings, 0 without)
2025-10-28 17:48:14,845 - tenant_data_ingestion_service - INFO - Vector ingestion: Created 30 chunks with embeddings
2025-10-28 17:48:14,855 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-28 17:48:14,895 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:48:50,181 - tenant_data_ingestion_service - INFO - Adding 31 chunks to tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80 graph namespace: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80
2025-10-28 17:48:50,181 - tenant_graphiti_client - INFO - 🚀 Starting production KG ingestion for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: 31 chunks from 'README.md'
2025-10-28 17:48:50,181 - graphiti_ingestion_manager - INFO - Starting KG ingestion for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: 31 chunks from document 'README.md'
2025-10-28 17:48:50,181 - graphiti_ingestion_manager - INFO - Processing 31 episodes with max 2 concurrent operations
2025-10-28 17:48:50,196 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:48:50,198 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:48:52,847 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:48:53,252 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:48:53,729 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:48:54,302 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:23,540 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:23,546 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:23,552 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:23,556 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:23,561 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:23,566 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:23,569 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:23,573 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:24,577 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:24,578 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:24,581 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:24,583 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:24,585 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:24,586 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:24,588 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:24,590 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:24,592 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:24,594 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:24,595 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:30,285 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:30,288 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:30,291 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:30,294 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:30,295 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:30,298 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:30,300 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:30,302 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:30,305 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:30,308 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:30,311 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:30,313 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:30,315 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:30,318 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:30,320 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:31,025 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:31,027 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:31,029 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:32,612 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-10-28 17:49:32,613 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Document: README.md\\nSection 22:\\nSession management and source attribution\\nFull integration with search capabilities\\nMonitoring & Analytics\\nGET /health - System health and database connectivity\\nComprehensive logging and audit trails\\nReal-time performance metrics\\nTesting & Verification\\nDeployment Verification\\n``bash\\nRun comprehensive verification script\\nchmod +x verifydeployment.sh\\n./verifydeployment.sh\\nThis tests:\\nPython environment and dependencies\\nDatabase connectivity (Neon + Neo4j)\\nApplication integrity\\nSecurity configuration\\nAPI functionality\\n`\\nManual Testing\\n``bash\\nTest API health\\ncurl http://localhost:8000/health\\nTest authentication flow\",\n  \"Document: README.md\\nSection 23:\\ncurl -X POST \\\"http://localhost:8000/tenants\\\" -H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\\"name\\\": \\\"Test Corp\\\", \\\"email\\\": \\\"test@corp.com\\\"}'\\nTest search functionality\\ncurl -X POST \\\"http://localhost:8000/search\\\" -H \\\"Authorization: Bearer TOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\\"query\\\": \\\"test\\\", \\\"searchtype\\\": \\\"vector\\\"}'\\n``\\nCLI Testing\\n`bash\\nInteractive CLI testing\\n./startcli.sh --api-url http://localhost:8000\\nAutomated CLI testing\\npython3 interactivemultitenantclihttp.py --help\\n`\\nDeployment\\nLocal Development\\n`bash\\nDirect startup\\npython3 interactivemultitenantapi.py\\nUsing startup scripts\\n./startapi.sh\\n``\\nAWS EC2 Production Deployment\\nComplete deployment guides included:\",\n  \"Document: README.md\\nSection 24:\\n``bash\\nUpload to EC2 and run automated setup\\nscp -r Tenant/* ubuntu@your-ec2-ip:/tmp/Tenant/\\nssh ubuntu@your-ec2-ip\\ncd /tmp/Tenant && ./ec2quicksetup.sh\\nConfigure environment\\nnano /opt/multi-tenant-rag/.env\\nVerify deployment\\n/opt/multi-tenant-rag/verifydeployment.sh\\nStart services\\nsudo supervisorctl start multi-tenant-rag-api\\n`\\nSee comprehensive deployment guides:\\nEC2DEPLOYMENTGUIDE.md - Complete step-by-step instructions\\nEC2DEPLOYMENTCHECKLIST.md - Pre/post deployment verification\\nec2quick_setup.sh` - Automated setup script\\nPerformance & Scaling\\nOptimizations Included\\nAsync database operations with connection pooling\\nEfficient vector search with proper indexing\\n-\",\n  \"Document: README.md\\nSection 25:\\nRate limiting and request throttling\\nCaching strategies for frequently accessed data\\nScaling Considerations\\nHorizontal scaling with load balancers\\nDatabase read replicas for improved performance\\nRedis caching for session management\\nKubernetes deployment for orchestration\\n Configuration Options\\nEnvironment Variables\\nNEONCONNECTIONSTRING - PostgreSQL connection\\nNEO4JURI - Neo4j connection\\nJWTSECRETKEY - JWT signing key\\nOPENAIAPIKEY - AI model access\\nAPPENV - Environment (development/production)\\nLOGLEVEL - Logging verbosity\\nTenant Limits\\nmaxdocuments - Maximum documents per tenant\\nmaxstoragemb - Maximum storage per tenant\\n-\",\n  \"Document: README.md\\nSection 26:\\nCustom quotas and rate limits per tenant\\nMonitoring & Observability\\nBuilt-in Monitoring\\nHealth check endpoints\\nPerformance metrics collection\\nError tracking and alerting\\nAudit logs for security events\\nRecommended Tools\\nPrometheus + Grafana for metrics\\nELK Stack for log aggregation\\nSentry for error tracking\\nDataDog for APM\\nContributing\\nFollow the Architecture: Maintain tenant isolation patterns\\nWrite Tests: All new features require comprehensive tests\\nSecurity First: Validate tenant boundaries in all operations\\nDocumentation: Update guides for any new features\\nPerformance: Consider scalability in all implementations\",\n  \"Document: README.md\\nSection 27:\\nLicense\\nMIT License - see LICENSE file for details.\\nSupport & Troubleshooting\\nCommon Issues\\nDatabase Connection: Verify connection strings and SSL settings\\nAuthentication Failures: Check JWT secret keys and token expiration\\nPerformance Issues: Monitor connection pools and query performance\\nDebug Commands\\n``bash\\nTest database connectivity\\npython -c \\\"import asyncpg; print('Database connection test')\\\"\\nValidate JWT tokens\\npython -c \\\"from jose import jwt; print('JWT validation test')\\\"\\nCheck application logs\\ntail -f multitenantrag.log\\n`\\nGetting Help\\nCheck the deploymentguide.md for setup issues\\nReview testingguide.md` for validation procedures\\n-\",\n  \"Document: README.md\\nSection 28:\\nExamine logs for detailed error information\\nWhat Makes This System Special\\nComplete Tenant Isolation\\nDatabase Level: Project-per-tenant with Neon PostgreSQL (zero cross-tenant data access)\\nGraph Level: Namespace isolation using Graphiti group_id (tenant-tagged entities)\\nApplication Level: JWT context injection with middleware validation\\nInfrastructure Level: Independent scaling and performance per tenant\\nAdvanced AI Integration\\nEnhanced Pydantic AI Agent: 10+ specialized tools with intelligent routing\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search modes\\nReal-Time Processing: Async operations with proper connection pooling\\n-\",\n  \"Document: README.md\\nSection 29:\\nContext Preservation: Maintains tenant boundaries across all AI operations\\nProduction-Ready Architecture\\nDual Interface: FastAPI server + Rich interactive CLI\\nAWS EC2 Optimized: Complete deployment automation and guides\\nProcess Management: Supervisor + Nginx for production reliability\\nMonitoring: Health checks, logging, and verification scripts\\nProven Performance\\nScalable Design: Linear scaling with tenant growth\\nCost Efficient: Scale-to-zero for inactive tenants\\nHigh Availability: Multi-layer redundancy and error handling\\nSecurity First: Multiple isolation layers and audit trails\\n Developer Experience\",\n  \"Document: README.md\\nSection 30:\\nComprehensive Documentation: Step-by-step guides for all scenarios\\nAutomated Setup: One-command deployment with verification\\nRich CLI Interface: Beautiful console with progress indicators\\nTesting Suite: Complete verification and validation tools\\nPerfect for SaaS companies, enterprise applications, and multi-client AI systems requiring complete data separation with shared infrastructure efficiency.\\n---\\nQuick Command Reference\\n```bash\\nGet Started\\n./startapi.sh Start FastAPI server\\n./startcli.sh Start interactive CLI\\n./verify_deployment.sh Verify installation\\nDevelopment\",\n  \"Document: README.md\\nSection 31:\\npython3 interactivemultitenantapi.py Direct API startup\\ncurl http://localhost:8000/health Health check\\ncurl http://localhost:8000/docs API documentation\\nProduction Deployment\\n./ec2quick_setup.sh Automated EC2 setup\\nsudo supervisorctl status Check services\\nsudo tail -f /var/log/multi-tenant-rag-api.log View logs\\nTesting\\ncurl -X POST \\\"http://localhost:8000/tenants\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\\"name\\\": \\\"Test Corp\\\", \\\"email\\\": \\\"test@corp.com\\\"}'\\n```\\nStart building your secure, scalable, multi-tenant RAG system today!\"\n]\n        \"Document: README.md\\nSection 2:\\nDual Interface: FastAPI server + Interactive CLI client\\nAI-Powered: Enhanced Pydantic AI agent with 10+ tenant-aware tools\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search\\nJWT Authentication: Secure tenant context with middleware validation\\nProduction Ready: Supervisor process management + Nginx reverse proxy\\nAWS EC2 Optimized: Complete deployment guides for cloud infrastructure\\nFully Tested: Comprehensive verification and testing scripts\\nLive Integration: Real-time Neon PostgreSQL + Neo4j Desktop connectivity\\n Architecture\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'Neon PostgreSQL', 'summary': \"Neon PostgreSQL is a database solution used in a multi-tenant RAG system, emphasizing complete data isolation with a project-per-tenant strategy and namespace-based graph isolation, adhering to Neon best practices. The system integrates with a FastAPI server and an interactive CLI, featuring an AI-powered Pydantic agent with tenant-aware tools and multi-modal search (vector, graph, hybrid). It utilizes JWT authentication and is optimized for AWS EC2 deployment. Neon PostgreSQL supports project-per-tenant isolation, vector search via pgvector, and hybrid search (BM25), with a catalog database ensuring full isolation. The system also includes features like intelligent routing for tool selection, dual storage for combining vector and graph search results, context preservation with tenant isolation, JWT authentication with tenant claims, context injection for validation, and permission management. It offers comprehensive API endpoints for tenant management, authentication, document management, multi-modal search, and interactive chat, with robust security guarantees at the database, graph, and application levels. Deployment is supported locally and on AWS EC2, with detailed guides and automated setup scripts. Configuration options include environment variables for database connections, JWT secrets, and API keys, along with tenant-specific limits for documents and storage. The system provides built-in monitoring, observability tools, and follows a contributing guide focused on architecture, testing, security, documentation, and performance. It also offers support and troubleshooting resources, including debug commands and common issue resolutions. The system's unique selling points are complete tenant isolation across multiple levels, advanced AI integration with specialized tools and multi-modal search, and real-time processing capabilities.\", 'entity_types': ['Entity'], 'attributes': {'labels': ['Entity']}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{
  "summary": "Neon PostgreSQL is a database solution integrated into a multi-tenant RAG system, ensuring complete data isolation through a project-per-tenant strategy at the database level and namespace isolation within Neo4j. It supports advanced features like vector search (using pgvector), hybrid search (BM25), and combines vector and graph search results. The system leverages JWT authentication for tenant context and is optimized for AWS EC2 deployment with automated setup scripts. Neon PostgreSQL is configured via environment variables and supports tenant-specific limits on documents and storage. It is part of a production-ready architecture featuring a FastAPI server, interactive CLI, and Supervisor process management. The system emphasizes security, scalability, and developer experience with comprehensive documentation and testing."
}
```

2025-10-28 17:49:32,613 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-10-28 17:49:32,614 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-10-28 17:49:32,615 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:33,681 - graphiti_core.graphiti - INFO - Completed add_episode in 43498.17705154419 ms
2025-10-28 17:49:33,681 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_b0a0f8b7_1761653930
2025-10-28 17:49:33,681 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_b0a0f8b7_1761653930
2025-10-28 17:49:33,685 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:34,275 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-10-28 17:49:34,276 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Document: README.md\\nSection 22:\\nSession management and source attribution\\nFull integration with search capabilities\\nMonitoring & Analytics\\nGET /health - System health and database connectivity\\nComprehensive logging and audit trails\\nReal-time performance metrics\\nTesting & Verification\\nDeployment Verification\\n``bash\\nRun comprehensive verification script\\nchmod +x verifydeployment.sh\\n./verifydeployment.sh\\nThis tests:\\nPython environment and dependencies\\nDatabase connectivity (Neon + Neo4j)\\nApplication integrity\\nSecurity configuration\\nAPI functionality\\n`\\nManual Testing\\n``bash\\nTest API health\\ncurl http://localhost:8000/health\\nTest authentication flow\",\n  \"Document: README.md\\nSection 23:\\ncurl -X POST \\\"http://localhost:8000/tenants\\\" -H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\\"name\\\": \\\"Test Corp\\\", \\\"email\\\": \\\"test@corp.com\\\"}'\\nTest search functionality\\ncurl -X POST \\\"http://localhost:8000/search\\\" -H \\\"Authorization: Bearer TOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\\"query\\\": \\\"test\\\", \\\"searchtype\\\": \\\"vector\\\"}'\\n``\\nCLI Testing\\n`bash\\nInteractive CLI testing\\n./startcli.sh --api-url http://localhost:8000\\nAutomated CLI testing\\npython3 interactivemultitenantclihttp.py --help\\n`\\nDeployment\\nLocal Development\\n`bash\\nDirect startup\\npython3 interactivemultitenantapi.py\\nUsing startup scripts\\n./startapi.sh\\n``\\nAWS EC2 Production Deployment\\nComplete deployment guides included:\",\n  \"Document: README.md\\nSection 24:\\n``bash\\nUpload to EC2 and run automated setup\\nscp -r Tenant/* ubuntu@your-ec2-ip:/tmp/Tenant/\\nssh ubuntu@your-ec2-ip\\ncd /tmp/Tenant && ./ec2quicksetup.sh\\nConfigure environment\\nnano /opt/multi-tenant-rag/.env\\nVerify deployment\\n/opt/multi-tenant-rag/verifydeployment.sh\\nStart services\\nsudo supervisorctl start multi-tenant-rag-api\\n`\\nSee comprehensive deployment guides:\\nEC2DEPLOYMENTGUIDE.md - Complete step-by-step instructions\\nEC2DEPLOYMENTCHECKLIST.md - Pre/post deployment verification\\nec2quick_setup.sh` - Automated setup script\\nPerformance & Scaling\\nOptimizations Included\\nAsync database operations with connection pooling\\nEfficient vector search with proper indexing\\n-\",\n  \"Document: README.md\\nSection 25:\\nRate limiting and request throttling\\nCaching strategies for frequently accessed data\\nScaling Considerations\\nHorizontal scaling with load balancers\\nDatabase read replicas for improved performance\\nRedis caching for session management\\nKubernetes deployment for orchestration\\n Configuration Options\\nEnvironment Variables\\nNEONCONNECTIONSTRING - PostgreSQL connection\\nNEO4JURI - Neo4j connection\\nJWTSECRETKEY - JWT signing key\\nOPENAIAPIKEY - AI model access\\nAPPENV - Environment (development/production)\\nLOGLEVEL - Logging verbosity\\nTenant Limits\\nmaxdocuments - Maximum documents per tenant\\nmaxstoragemb - Maximum storage per tenant\\n-\",\n  \"Document: README.md\\nSection 26:\\nCustom quotas and rate limits per tenant\\nMonitoring & Observability\\nBuilt-in Monitoring\\nHealth check endpoints\\nPerformance metrics collection\\nError tracking and alerting\\nAudit logs for security events\\nRecommended Tools\\nPrometheus + Grafana for metrics\\nELK Stack for log aggregation\\nSentry for error tracking\\nDataDog for APM\\nContributing\\nFollow the Architecture: Maintain tenant isolation patterns\\nWrite Tests: All new features require comprehensive tests\\nSecurity First: Validate tenant boundaries in all operations\\nDocumentation: Update guides for any new features\\nPerformance: Consider scalability in all implementations\",\n  \"Document: README.md\\nSection 27:\\nLicense\\nMIT License - see LICENSE file for details.\\nSupport & Troubleshooting\\nCommon Issues\\nDatabase Connection: Verify connection strings and SSL settings\\nAuthentication Failures: Check JWT secret keys and token expiration\\nPerformance Issues: Monitor connection pools and query performance\\nDebug Commands\\n``bash\\nTest database connectivity\\npython -c \\\"import asyncpg; print('Database connection test')\\\"\\nValidate JWT tokens\\npython -c \\\"from jose import jwt; print('JWT validation test')\\\"\\nCheck application logs\\ntail -f multitenantrag.log\\n`\\nGetting Help\\nCheck the deploymentguide.md for setup issues\\nReview testingguide.md` for validation procedures\\n-\",\n  \"Document: README.md\\nSection 28:\\nExamine logs for detailed error information\\nWhat Makes This System Special\\nComplete Tenant Isolation\\nDatabase Level: Project-per-tenant with Neon PostgreSQL (zero cross-tenant data access)\\nGraph Level: Namespace isolation using Graphiti group_id (tenant-tagged entities)\\nApplication Level: JWT context injection with middleware validation\\nInfrastructure Level: Independent scaling and performance per tenant\\nAdvanced AI Integration\\nEnhanced Pydantic AI Agent: 10+ specialized tools with intelligent routing\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search modes\\nReal-Time Processing: Async operations with proper connection pooling\\n-\",\n  \"Document: README.md\\nSection 29:\\nContext Preservation: Maintains tenant boundaries across all AI operations\\nProduction-Ready Architecture\\nDual Interface: FastAPI server + Rich interactive CLI\\nAWS EC2 Optimized: Complete deployment automation and guides\\nProcess Management: Supervisor + Nginx for production reliability\\nMonitoring: Health checks, logging, and verification scripts\\nProven Performance\\nScalable Design: Linear scaling with tenant growth\\nCost Efficient: Scale-to-zero for inactive tenants\\nHigh Availability: Multi-layer redundancy and error handling\\nSecurity First: Multiple isolation layers and audit trails\\n Developer Experience\",\n  \"Document: README.md\\nSection 30:\\nComprehensive Documentation: Step-by-step guides for all scenarios\\nAutomated Setup: One-command deployment with verification\\nRich CLI Interface: Beautiful console with progress indicators\\nTesting Suite: Complete verification and validation tools\\nPerfect for SaaS companies, enterprise applications, and multi-client AI systems requiring complete data separation with shared infrastructure efficiency.\\n---\\nQuick Command Reference\\n```bash\\nGet Started\\n./startapi.sh Start FastAPI server\\n./startcli.sh Start interactive CLI\\n./verify_deployment.sh Verify installation\\nDevelopment\",\n  \"Document: README.md\\nSection 31:\\npython3 interactivemultitenantapi.py Direct API startup\\ncurl http://localhost:8000/health Health check\\ncurl http://localhost:8000/docs API documentation\\nProduction Deployment\\n./ec2quick_setup.sh Automated EC2 setup\\nsudo supervisorctl status Check services\\nsudo tail -f /var/log/multi-tenant-rag-api.log View logs\\nTesting\\ncurl -X POST \\\"http://localhost:8000/tenants\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\\"name\\\": \\\"Test Corp\\\", \\\"email\\\": \\\"test@corp.com\\\"}'\\n```\\nStart building your secure, scalable, multi-tenant RAG system today!\"\n]\n        \"Document: README.md\\nSection 2:\\nDual Interface: FastAPI server + Interactive CLI client\\nAI-Powered: Enhanced Pydantic AI agent with 10+ tenant-aware tools\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search\\nJWT Authentication: Secure tenant context with middleware validation\\nProduction Ready: Supervisor process management + Nginx reverse proxy\\nAWS EC2 Optimized: Complete deployment guides for cloud infrastructure\\nFully Tested: Comprehensive verification and testing scripts\\nLive Integration: Real-time Neon PostgreSQL + Neo4j Desktop connectivity\\n Architecture\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'README.md', 'summary': 'This document outlines a multi-tenant RAG system featuring a FastAPI server and a Rich CLI client. It utilizes Neon PostgreSQL for tenant isolation, with project-per-tenant management. Data ingestion and multi-modal search (vector, graph, hybrid, comprehensive) are managed by `tenantdataingestionservice.py`. Knowledge graph integration is provided by `tenantgraphiticlient.py` using Neo4j and Graphiti with namespace isolation. An enhanced Pydantic AI agent with specialized tools is included. Authentication is handled via JWT middleware. The document provides detailed usage examples for tenant creation, authentication, document upload, and various search methods. API endpoints for tenant management, authentication, document management, multi-modal search, and interactive chat are detailed. The system also includes API health checks. Security is enforced at the database, graph, and application levels, with features like namespace isolation, JWT authentication, and audit logging. The document also details deployment steps for local development and AWS EC2 production, along with testing procedures for API and CLI functionalities. It also covers deployment verification scripts and performance optimizations like async operations and efficient indexing. Configuration options include environment variables for database connections, JWT secrets, and API keys, and tenant limits for documents and storage. Performance and scaling considerations involve async operations, connection pooling, efficient indexing, rate limiting, caching, horizontal scaling, and Kubernetes deployment. The system also includes monitoring and observability features with recommended tools like Prometheus, Grafana, ELK Stack, Sentry, and DataDog. Contribution guidelines emphasize maintaining tenant isolation, writing tests, prioritizing security, and documenting new features. The system supports hybrid search (vector + BM25), graph integration, namespace isolation, knowledge graph extraction with temporal tracking, graph analytics, and episode management. It also features intelligent routing, dual storage, context preservation, JWT authentication, permission management, cross-tenant prevention, and a rich console interface. API endpoints include tenant management, authentication, document management, multi-modal search, and interactive chat. Security is guaranteed at database, graph, and application levels. Deployment guides for EC2 and local development are provided, along with testing procedures and configuration options. Performance optimizations and scaling considerations are detailed, along with monitoring and observability features. License is MIT. The system offers intelligent routing for automatic tool selection based on query complexity, dual storage combining vector and graph search results, and context preservation with tenant isolation. Security features include JWT authentication with tenant claims, context injection for validation and routing, fine-grained permission management, and cross-tenant prevention. The interactive CLI provides a rich console interface with progress indicators and tables. The FastAPI application supports tenant-aware routing, comprehensive endpoints, and real-time processing. Security guarantees are provided at database, graph, and application levels, ensuring complete project-level isolation, no cross-tenant data access, independent scaling, and built-in backup/recovery per tenant. Graph-level security includes namespace isolation and tenant-tagged entities. Application-level security involves JWT tokens, middleware validation, and audit logging. API endpoints cover tenant management, authentication, document management, multi-modal search (vector, graph, hybrid, comprehensive), and interactive chat with context awareness and session management. Monitoring includes health checks, performance metrics, and audit trails. Testing procedures involve deployment verification scripts and manual API/CLI testing. Deployment options include local development and AWS EC2 production with quick setup scripts and comprehensive guides. Performance optimizations focus on async operations, efficient indexing, rate limiting, caching, and scaling considerations like horizontal scaling and Kubernetes deployment. Configuration options include environment variables for connections and secrets, and tenant limits for documents and storage. Monitoring and observability are supported by tools like Prometheus, Grafana, ELK Stack, Sentry, and DataDog. The system is ideal for SaaS, enterprise applications, and multi-client AI systems requiring data separation and shared infrastructure efficiency. It offers a quick command reference for starting the API, CLI, and verification scripts.', 'entity_types': ['Entity'], 'attributes': {'labels': ['Entity']}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{
  "summary": "This document outlines a multi-tenant RAG system featuring a FastAPI server and a Rich CLI client. It utilizes Neon PostgreSQL for tenant isolation, with project-per-tenant management. Data ingestion and multi-modal search (vector, graph, hybrid, comprehensive) are managed by `tenantdataingestionservice.py`. Knowledge graph integration is provided by `tenantgraphiticlient.py` using Neo4j and Graphiti with namespace isolation. An enhanced Pydantic AI agent with specialized tools is included. Authentication is handled via JWT middleware. The document provides detailed usage examples for tenant creation, authentication, document upload, and various search methods. API endpoints for tenant management, authentication, document management, multi-modal search, and interactive chat are detailed. The system also includes API health checks. Security is enforced at the database, graph, and application levels, with features like namespace isolation, JWT authentication, and audit logging. The document also details deployment steps for local development and AWS EC2 production, along with testing procedures for API and CLI functionalities. It also covers deployment verification scripts and performance optimizations like async operations and efficient indexing. Configuration options include environment variables for database connections, JWT secrets, and API keys, and tenant limits for documents and storage. Performance and scaling considerations involve async operations, connection pooling, efficient indexing, rate limiting, caching, horizontal scaling, and Kubernetes deployment. The system also includes monitoring and observability features with recommended tools like Prometheus, Grafana, ELK Stack, Sentry, and DataDog. Contribution guidelines emphasize maintaining tenant isolation, writing tests, prioritizing security, and documenting new features. The system supports hybrid search (vector + BM25), graph integration, namespace isolation, knowledge graph e... (truncated) ...lexity, dual storage combining vector and graph search results, and context preservation with tenant isolation. Security features include JWT authentication with tenant claims, context injection for validation and routing, fine-grained permission management, and cross-tenant prevention. The interactive CLI provides a rich console interface with progress indicators and tables. The FastAPI application supports tenant-aware routing, comprehensive endpoints, and real-time processing. Security guarantees are provided at database, graph, and application levels, ensuring complete project-level isolation, no cross-tenant data access, independent scaling, and built-in backup/recovery per tenant. Graph-level security includes namespace isolation and tenant-tagged entities. Application-level security involves JWT tokens, middleware validation, and audit logging. API endpoints cover tenant management, authentication, document management, multi-modal search (vector, graph, hybrid, comprehensive), and interactive chat with context awareness and session management. Monitoring includes health checks, performance metrics, and audit trails. Testing procedures involve deployment verification scripts and manual API/CLI testing. Deployment options include local development and AWS EC2 production with quick setup scripts and comprehensive guides. Performance optimizations focus on async operations, efficient indexing, rate limiting, caching, and scaling considerations like horizontal scaling and Kubernetes deployment. Configuration options include environment variables for connections and secrets, and tenant limits for documents and storage. Monitoring and observability are supported by tools like Prometheus, Grafana, ELK Stack, Sentry, and DataDog. The system is ideal for SaaS, enterprise applications, and multi-client AI systems requiring data separation and shared infrastructure efficiency. It offers a quick command reference for starting the API, CLI, and verification scripts."
}
```

2025-10-28 17:49:34,277 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-10-28 17:49:34,277 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-10-28 17:49:34,280 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:36,818 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:37,707 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:44,282 - graphiti_core.graphiti - INFO - Completed add_episode in 54094.21992301941 ms
2025-10-28 17:49:44,283 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_fcb787a9_1761653930
2025-10-28 17:49:44,283 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_fcb787a9_1761653930
2025-10-28 17:49:44,288 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:47,118 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:47,951 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:58,689 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:58,694 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:58,701 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:58,706 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:58,710 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:58,714 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:58,718 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:58,722 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:59,526 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:59,528 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:59,531 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:59,533 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:59,535 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:49:59,538 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:01,779 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:01,786 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:01,792 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:01,797 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:01,802 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:01,807 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:01,810 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:01,814 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:01,818 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:01,821 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:02,691 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:02,692 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:02,694 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:02,695 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:02,697 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:02,698 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:02,700 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:02,701 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:02,703 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:07,131 - graphiti_core.graphiti - INFO - Completed add_episode in 22847.57685661316 ms
2025-10-28 17:50:07,131 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_0933fc94_1761653930
2025-10-28 17:50:07,131 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_0933fc94_1761653930
2025-10-28 17:50:07,137 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:11,491 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:12,664 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:18,641 - graphiti_core.graphiti - INFO - Completed add_episode in 44959.00011062622 ms
2025-10-28 17:50:18,641 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_ddab7df4_1761653930
2025-10-28 17:50:18,641 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_ddab7df4_1761653930
2025-10-28 17:50:18,647 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:21,830 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:22,595 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:33,505 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:33,512 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:33,518 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:33,524 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:33,529 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:33,534 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:33,539 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:33,544 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:34,422 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:34,425 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:34,427 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:34,429 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:34,431 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:34,433 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:35,057 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:35,063 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:35,069 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:35,074 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:35,078 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:35,083 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:35,087 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:35,092 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:35,095 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:35,099 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:35,102 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:35,106 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:35,110 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:35,113 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:35,116 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:36,276 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:36,278 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:36,279 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:36,281 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:36,283 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:36,285 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:36,286 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:36,287 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:36,289 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:36,290 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:36,292 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:36,293 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:41,481 - graphiti_core.graphiti - INFO - Completed add_episode in 22839.289903640747 ms
2025-10-28 17:50:41,481 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_f256902a_1761653930
2025-10-28 17:50:41,481 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_f256902a_1761653930
2025-10-28 17:50:41,485 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:44,733 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:45,713 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:47,066 - graphiti_core.graphiti - INFO - Completed add_episode in 39935.14704704285 ms
2025-10-28 17:50:47,067 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_d0f6a608_1761653930
2025-10-28 17:50:47,067 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_d0f6a608_1761653930
2025-10-28 17:50:47,080 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:51,030 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:50:52,082 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:09,980 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:09,987 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:09,994 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:10,000 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:10,004 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:10,009 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:10,013 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:10,017 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:10,021 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:10,025 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:10,028 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:10,031 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:10,034 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:10,037 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:10,041 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:10,043 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:10,839 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:10,841 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:10,843 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:10,844 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:10,846 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:10,848 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:10,849 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:12,244 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-10-28 17:51:12,245 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Document: README.md\\nSection 28:\\nExamine logs for detailed error information\\nWhat Makes This System Special\\nComplete Tenant Isolation\\nDatabase Level: Project-per-tenant with Neon PostgreSQL (zero cross-tenant data access)\\nGraph Level: Namespace isolation using Graphiti group_id (tenant-tagged entities)\\nApplication Level: JWT context injection with middleware validation\\nInfrastructure Level: Independent scaling and performance per tenant\\nAdvanced AI Integration\\nEnhanced Pydantic AI Agent: 10+ specialized tools with intelligent routing\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search modes\\nReal-Time Processing: Async operations with proper connection pooling\\n-\",\n  \"Document: README.md\\nSection 29:\\nContext Preservation: Maintains tenant boundaries across all AI operations\\nProduction-Ready Architecture\\nDual Interface: FastAPI server + Rich interactive CLI\\nAWS EC2 Optimized: Complete deployment automation and guides\\nProcess Management: Supervisor + Nginx for production reliability\\nMonitoring: Health checks, logging, and verification scripts\\nProven Performance\\nScalable Design: Linear scaling with tenant growth\\nCost Efficient: Scale-to-zero for inactive tenants\\nHigh Availability: Multi-layer redundancy and error handling\\nSecurity First: Multiple isolation layers and audit trails\\n Developer Experience\",\n  \"Document: README.md\\nSection 30:\\nComprehensive Documentation: Step-by-step guides for all scenarios\\nAutomated Setup: One-command deployment with verification\\nRich CLI Interface: Beautiful console with progress indicators\\nTesting Suite: Complete verification and validation tools\\nPerfect for SaaS companies, enterprise applications, and multi-client AI systems requiring complete data separation with shared infrastructure efficiency.\\n---\\nQuick Command Reference\\n```bash\\nGet Started\\n./startapi.sh Start FastAPI server\\n./startcli.sh Start interactive CLI\\n./verify_deployment.sh Verify installation\\nDevelopment\",\n  \"Document: README.md\\nSection 31:\\npython3 interactivemultitenantapi.py Direct API startup\\ncurl http://localhost:8000/health Health check\\ncurl http://localhost:8000/docs API documentation\\nProduction Deployment\\n./ec2quick_setup.sh Automated EC2 setup\\nsudo supervisorctl status Check services\\nsudo tail -f /var/log/multi-tenant-rag-api.log View logs\\nTesting\\ncurl -X POST \\\"http://localhost:8000/tenants\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\\"name\\\": \\\"Test Corp\\\", \\\"email\\\": \\\"test@corp.com\\\"}'\\n```\\nStart building your secure, scalable, multi-tenant RAG system today!\",\n  \"Document: README.md\\nSection 1:\\nMulti-Tenant RAG System with Interactive CLI & FastAPI\\nOverview\\nA production-ready, multi-tenant Retrieval-Augmented Generation (RAG) system with complete data isolation, featuring both FastAPI server and interactive CLI client. Combines Neon PostgreSQL + pgvector for vector/hybrid search and Neo4j + Graphiti for knowledge graph capabilities.\\nBuilt following official Neon and Graphiti best practices with project-per-tenant database isolation and namespace-based graph isolation. Features a comprehensive Pydantic AI agent with intelligent tool routing and tenant-aware operations.\\nKey Features\\nComplete Tenant Isolation: Project-per-tenant databases + namespace isolation\\n-\",\n  \"Document: README.md\\nSection 2:\\nDual Interface: FastAPI server + Interactive CLI client\\nAI-Powered: Enhanced Pydantic AI agent with 10+ tenant-aware tools\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search\\nJWT Authentication: Secure tenant context with middleware validation\\nProduction Ready: Supervisor process management + Nginx reverse proxy\\nAWS EC2 Optimized: Complete deployment guides for cloud infrastructure\\nFully Tested: Comprehensive verification and testing scripts\\nLive Integration: Real-time Neon PostgreSQL + Neo4j Desktop connectivity\\n Architecture\",\n  \"Document: README.md\\nSection 3:\\nAmazon EC2 / Local Deployment \\n \\n  FastAPI + Interactive CLI Stack \\n    \\n   FastAPI   Interactive CLI  \\n   Multi-Tenant  HTTP Client  \\n   API Server   (Rich Console)  \\n   (Port 8000)\",\n  \"Document: README.md\\nSection 4:\\nEnhanced Pydantic AI Agent  \\n    Multi-Modal Search  Tenant Context Injection  \\n    10+ AI Tools  Graph + Vector Integration  \\n    JWT Authentication  Intelligent Tool Routing\",\n  \"Document: README.md\\nSection 5:\\nNeon PostgreSQL   Neo4j Desktop \\n (Cloud)   (Local/Remote) \\n  Project-per-Tenant    Graphiti Integration \\n  Vector Search (pgvector)    Namespace Isolation \\n  Hybrid Search (BM25)    Group ID Separation \\n  Catalog Database    Knowledge Graph \\n  Complete Isolation    Entity Relationships\",\n  \"Document: README.md\\nSection 6:\\nFile Structure\\n```\\nTenant/\\n README.md This comprehensive guide\\n requirements.txt Python dependencies\\n requirementsec2complete.txt Complete EC2 deployment dependencies\\n .env Environment configuration (create from template)\\n\\nCore Application Files\"\n]\n        \"Document: README.md\\nSection 8:\\nstartapi.sh API server startup script\\n startcli.sh CLI client startup script\\n EC2DEPLOYMENTGUIDE.md Complete AWS EC2 deployment guide\\n EC2DEPLOYMENTCHECKLIST.md Pre/post deployment verification\\n ec2quicksetup.sh Automated EC2 setup script\\n verifydeployment.sh Deployment verification script\\n\\nConfiguration & Schema\\n catalogschema.sql Catalog database schema for tenant metadata\\n deployment_guide.md Original deployment instructions\\n``\\nQuick Start\\nInstallation\\n``bash\\nClone and navigate to Tenant directory\\ncd Tenant/\\nCreate virtual environment\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'Tenant', 'summary': 'The Tenant entity is a fundamental part of the multi-tenant RAG system, responsible for managing isolated data, configurations, and resources for each tenant. It supports tenant creation through the API (POST /tenants) and allows retrieval of tenant information (GET /tenants/info) and system health checks (GET /health), which also indicate the total tenant count. Security is a paramount concern, enforced at multiple levels: database isolation ensures one Neon project per tenant, preventing cross-tenant data access and enabling independent scaling, performance, backup, and recovery. Graph-level isolation uses namespace separation (group_id) for tenant-tagged entities and relationships, with scoped search and analytics. Application-level security includes JWT authentication with tenant claims, middleware validation, permission-based access control, and comprehensive audit logging. The system facilitates multi-modal search (vector, graph, hybrid, comprehensive) and interactive chat, all while strictly maintaining tenant isolation. Configuration options include environment variables for database connections, JWT secrets, and AI model access, as well as tenant limits for documents and storage. Additional features include custom quotas and rate limits per tenant, built-in monitoring with health check endpoints, performance metrics, error tracking, and audit logs. Recommended tools for monitoring include Prometheus, Grafana, ELK Stack, Sentry, and DataDog. Contributions should adhere to the architecture, prioritize tests, security, and documentation.', 'entity_types': ['Entity'], 'attributes': {'labels': ['Entity']}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{
  "summary": "The Tenant entity is a core component of a production-ready, multi-tenant Retrieval-Augmented Generation (RAG) system. It ensures complete data isolation through project-per-tenant databases (Neon PostgreSQL with pgvector) and namespace isolation in the knowledge graph (Neo4j with Graphiti). The system offers a dual interface with a FastAPI server and an interactive CLI, featuring an advanced Pydantic AI agent with over 10 specialized tools and multi-modal search capabilities (vector, graph, hybrid). Security is enforced at multiple levels, including JWT authentication, middleware validation, and audit trails. The architecture is optimized for AWS EC2 with automated deployment scripts and production-ready process management using Supervisor and Nginx. Key features include tenant-aware AI operations, context preservation, scalable design, cost efficiency (scale-to-zero), high availability, and a strong focus on developer experience with comprehensive documentation and automated setup. It is ideal for SaaS companies, enterprise applications, and multi-client AI systems requiring strict data separation."
}
```

2025-10-28 17:51:12,246 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-10-28 17:51:12,246 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-10-28 17:51:12,248 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:12,438 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:12,444 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:12,450 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:12,455 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:12,460 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:12,464 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:12,468 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:12,472 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:12,476 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:12,479 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:12,482 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:12,485 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:12,488 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:12,491 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:12,494 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:12,496 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:12,499 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:13,344 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:13,346 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:13,347 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:13,349 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:13,350 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:13,352 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:13,354 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:13,356 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:26,906 - graphiti_core.graphiti - INFO - Completed add_episode in 39839.138984680176 ms
2025-10-28 17:51:26,907 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_5c62c95b_1761653930
2025-10-28 17:51:26,907 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_5c62c95b_1761653930
2025-10-28 17:51:26,912 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:31,574 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:33,214 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:58,501 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:58,508 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:58,522 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:58,528 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:58,530 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:58,538 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:58,545 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:58,549 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:58,552 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:58,554 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:58,557 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:58,560 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:58,562 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:58,564 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:58,567 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:58,569 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:58,572 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:58,574 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:58,576 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:58,579 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:59,547 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:59,549 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:59,550 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:59,552 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:59,554 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:59,555 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:59,557 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:59,558 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:59,559 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:59,561 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:59,563 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:59,564 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:59,566 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:59,567 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:59,672 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:51:59,681 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:14,546 - graphiti_core.graphiti - INFO - Completed add_episode in 47639.22691345215 ms
2025-10-28 17:52:14,547 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_f7f09926_1761653930
2025-10-28 17:52:14,547 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_f7f09926_1761653930
2025-10-28 17:52:14,553 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:18,164 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: 503 UNAVAILABLE. {'error': {'code': 503, 'message': 'The model is overloaded. Please try again later.', 'status': 'UNAVAILABLE'}}
2025-10-28 17:52:18,165 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-10-28 17:52:18,167 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:21,157 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:23,030 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:31,300 - graphiti_core.graphiti - INFO - Completed add_episode in 109818.49598884583 ms
2025-10-28 17:52:31,300 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_b95f08be_1761653930
2025-10-28 17:52:31,300 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_b95f08be_1761653930
2025-10-28 17:52:31,305 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:35,363 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:36,152 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:42,726 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:42,733 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:42,738 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:42,743 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:42,747 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:42,752 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:42,756 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:42,760 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:42,764 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:42,767 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:42,771 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:42,774 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:42,777 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:42,780 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:42,783 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:42,786 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:42,789 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:42,791 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:42,794 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:42,796 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:43,687 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:43,689 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:43,691 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:43,693 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:43,695 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:43,698 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:43,700 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:43,849 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:44,269 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:44,283 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:44,287 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:44,293 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:44,401 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:44,413 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:44,418 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:44,531 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:52:45,557 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-10-28 17:52:45,558 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Document: README.md\\nSection 30:\\nComprehensive Documentation: Step-by-step guides for all scenarios\\nAutomated Setup: One-command deployment with verification\\nRich CLI Interface: Beautiful console with progress indicators\\nTesting Suite: Complete verification and validation tools\\nPerfect for SaaS companies, enterprise applications, and multi-client AI systems requiring complete data separation with shared infrastructure efficiency.\\n---\\nQuick Command Reference\\n```bash\\nGet Started\\n./startapi.sh Start FastAPI server\\n./startcli.sh Start interactive CLI\\n./verify_deployment.sh Verify installation\\nDevelopment\",\n  \"Document: README.md\\nSection 31:\\npython3 interactivemultitenantapi.py Direct API startup\\ncurl http://localhost:8000/health Health check\\ncurl http://localhost:8000/docs API documentation\\nProduction Deployment\\n./ec2quick_setup.sh Automated EC2 setup\\nsudo supervisorctl status Check services\\nsudo tail -f /var/log/multi-tenant-rag-api.log View logs\\nTesting\\ncurl -X POST \\\"http://localhost:8000/tenants\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\\"name\\\": \\\"Test Corp\\\", \\\"email\\\": \\\"test@corp.com\\\"}'\\n```\\nStart building your secure, scalable, multi-tenant RAG system today!\",\n  \"Document: README.md\\nSection 1:\\nMulti-Tenant RAG System with Interactive CLI & FastAPI\\nOverview\\nA production-ready, multi-tenant Retrieval-Augmented Generation (RAG) system with complete data isolation, featuring both FastAPI server and interactive CLI client. Combines Neon PostgreSQL + pgvector for vector/hybrid search and Neo4j + Graphiti for knowledge graph capabilities.\\nBuilt following official Neon and Graphiti best practices with project-per-tenant database isolation and namespace-based graph isolation. Features a comprehensive Pydantic AI agent with intelligent tool routing and tenant-aware operations.\\nKey Features\\nComplete Tenant Isolation: Project-per-tenant databases + namespace isolation\\n-\",\n  \"Document: README.md\\nSection 2:\\nDual Interface: FastAPI server + Interactive CLI client\\nAI-Powered: Enhanced Pydantic AI agent with 10+ tenant-aware tools\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search\\nJWT Authentication: Secure tenant context with middleware validation\\nProduction Ready: Supervisor process management + Nginx reverse proxy\\nAWS EC2 Optimized: Complete deployment guides for cloud infrastructure\\nFully Tested: Comprehensive verification and testing scripts\\nLive Integration: Real-time Neon PostgreSQL + Neo4j Desktop connectivity\\n Architecture\",\n  \"Document: README.md\\nSection 3:\\nAmazon EC2 / Local Deployment \\n \\n  FastAPI + Interactive CLI Stack \\n    \\n   FastAPI   Interactive CLI  \\n   Multi-Tenant  HTTP Client  \\n   API Server   (Rich Console)  \\n   (Port 8000)\",\n  \"Document: README.md\\nSection 4:\\nEnhanced Pydantic AI Agent  \\n    Multi-Modal Search  Tenant Context Injection  \\n    10+ AI Tools  Graph + Vector Integration  \\n    JWT Authentication  Intelligent Tool Routing\",\n  \"Document: README.md\\nSection 5:\\nNeon PostgreSQL   Neo4j Desktop \\n (Cloud)   (Local/Remote) \\n  Project-per-Tenant    Graphiti Integration \\n  Vector Search (pgvector)    Namespace Isolation \\n  Hybrid Search (BM25)    Group ID Separation \\n  Catalog Database    Knowledge Graph \\n  Complete Isolation    Entity Relationships\",\n  \"Document: README.md\\nSection 6:\\nFile Structure\\n```\\nTenant/\\n README.md This comprehensive guide\\n requirements.txt Python dependencies\\n requirementsec2complete.txt Complete EC2 deployment dependencies\\n .env Environment configuration (create from template)\\n\\nCore Application Files\",\n  \"Document: README.md\\nSection 8:\\nstartapi.sh API server startup script\\n startcli.sh CLI client startup script\\n EC2DEPLOYMENTGUIDE.md Complete AWS EC2 deployment guide\\n EC2DEPLOYMENTCHECKLIST.md Pre/post deployment verification\\n ec2quicksetup.sh Automated EC2 setup script\\n verifydeployment.sh Deployment verification script\\n\\nConfiguration & Schema\\n catalogschema.sql Catalog database schema for tenant metadata\\n deployment_guide.md Original deployment instructions\\n``\\nQuick Start\\nInstallation\\n``bash\\nClone and navigate to Tenant directory\\ncd Tenant/\\nCreate virtual environment\",\n  \"Document: README.md\\nSection 9:\\npython3 -m venv venv\\nsource venv/bin/activate On Windows: venv\\\\Scripts\\\\activate\\nInstall dependencies\\npip install -r requirements.txt\\n``\\nEnvironment Setup\\nCreate .env file:\\n``bash\\nNeon PostgreSQL Configuration (Project-per-Tenant)\\nNEONAPIKEY=yourneonapikeyhere\\nCATALOGDBURL=postgresql://username:password@ep-catalog.us-east-2.aws.neon.tech/neondb?sslmode=require\\nPOSTGRESURL=postgresql://username:password@ep-catalog.us-east-2.aws.neon.tech/neondb?sslmode=require\\nNeo4j Configuration (Local Desktop or Remote)\\nNEO4JURI=neo4j://localhost:7687\\nNEO4JURL=neo4j://localhost:7687\\nNEO4JUSERNAME=neo4j\\nNEO4JUSER=neo4j\\nNEO4JPASSWORD=yourneo4jpassword\\nNEO4JAUTH=neo4j/yourneo4j_password\\nAuthentication\"\n]\n        \"Document: README.md\\nSection 10:\\nJWTSECRETKEY=your-super-secret-jwt-key-change-in-production\\nJWTALGORITHM=HS256\\nAI Providers\\nOPENAIAPIKEY=youropenaiapikey\\nGOOGLEAPIKEY=yourgoogleapikey Optional\\nANTHROPICAPIKEY=youranthropicapikey Optional\\nApplication Configuration\\nAPPENV=development\\nAPPHOST=127.0.0.1\\nAPPPORT=8000\\nLOGLEVEL=info\\n``\\nDatabase Setup\\n`bash\\nSetup catalog database (control plane) - if needed\\npsql \\\"$CATALOGDBURL\\\" -f catalogschema.sql\\n`\\nStart the System\\n`bash\\nMethod 1: Direct startup\\npython3 interactivemultitenantapi.py\\nMethod 2: Using startup scripts\\nchmod +x startapi.sh startcli.sh\\n./startapi.sh\\nIn another terminal for CLI\\n./startcli.sh\\n`\\nVerify Installation\\n``bash\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'README.md', 'summary': 'This document outlines a production-ready, multi-tenant Retrieval-Augmented Generation (RAG) system with complete data isolation, featuring both a FastAPI server and an interactive CLI client. It leverages Neon PostgreSQL with pgvector for vector/hybrid search and Neo4j with Graphiti for knowledge graph capabilities, ensuring project-per-tenant database isolation and namespace-based graph isolation. Key features include a comprehensive Pydantic AI agent with over 10 tenant-aware tools and intelligent routing, multi-modal search (vector, graph, hybrid, comprehensive), and JWT authentication for secure tenant context. The system is production-ready, optimized for AWS EC2, and includes Supervisor and Nginx for reliability. Configuration options include environment variables (e.g., connection strings, API keys) and tenant limits (e.g., max documents, storage). Monitoring and observability are supported with tools like Prometheus, Grafana, and the ELK stack. The system is ideal for SaaS companies and enterprise applications requiring robust data separation and shared infrastructure efficiency. It provides a dual interface (FastAPI server + CLI), advanced AI integration, context preservation, and a scalable, cost-efficient design with scale-to-zero capabilities for inactive tenants. Quick commands are provided for setup, API access, and log viewing. The system offers complete tenant isolation at database, graph, application, and infrastructure levels. It also features advanced AI integration with an enhanced Pydantic AI agent and multi-modal search capabilities. The architecture is production-ready, optimized for AWS EC2, and includes robust process management and monitoring. Developer experience is enhanced with comprehensive documentation and automated setup. The system supports dual interfaces (FastAPI server + Rich interactive CLI), production-ready architecture with Supervisor + Nginx, AWS EC2 optimization, and proven performance with scalable design and cost efficiency. Security is a priority with multiple isolation layers and audit trails. Documentation is comprehensive, setup is automated, and a rich CLI interface is provided. Quick command references for getting started, development, and production deployment are included.', 'entity_types': ['Entity'], 'attributes': {'labels': ['Entity']}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{
  "summary": "This document outlines a production-ready, multi-tenant Retrieval-Augmented Generation (RAG) system with complete data isolation, featuring both a FastAPI server and an interactive CLI client. It leverages Neon PostgreSQL with pgvector for vector/hybrid search and Neo4j with Graphiti for knowledge graph capabilities, ensuring project-per-tenant database isolation and namespace-based graph isolation. Key features include a comprehensive Pydantic AI agent with over 10 tenant-aware tools and intelligent routing, multi-modal search (vector, graph, hybrid, comprehensive), and JWT authentication for secure tenant context. The system is production-ready, optimized for AWS EC2, and includes Supervisor and Nginx for reliability. Configuration options include environment variables (e.g., connection strings, API keys) and tenant limits (e.g., max documents, storage). Monitoring and observability are supported with tools like Prometheus, Grafana, and the ELK stack. The system is ideal for SaaS companies and enterprise applications requiring robust data separation and shared infrastructure efficiency. It provides a dual interface (FastAPI server + CLI), advanced AI integration, context preservation, and a scalable, cost-efficient design with scale-to-zero capabilities for inactive tenants. Quick commands are provided for setup, API access, and log viewing. The system offers complete tenant isolation at database, graph, application, and infrastructure levels. It also features advanced AI integration with an enhanced Pydantic AI agent and multi-modal search capabilities. The architecture is production-ready, optimized for AWS EC2, and includes robust process management and monitoring. Developer experience is enhanced with comprehensive documentation and automated setup. The system supports dual interfaces (FastAPI server + Rich interactive CLI), production-ready architecture with Supervisor + Nginx, AWS EC2 optimization, and proven performance with scalable design and cost efficiency. Security is a priority with multiple isolation layers and audit trails. Documentation is comprehensive, setup is automated, and a rich CLI interface is provided. Quick command references for getting started, development, and production deployment are included."
}
```

2025-10-28 17:52:45,559 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-10-28 17:52:45,559 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-10-28 17:52:45,562 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:02,392 - graphiti_core.graphiti - INFO - Completed add_episode in 47844.89107131958 ms
2025-10-28 17:53:02,392 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_80f97ca2_1761653930
2025-10-28 17:53:02,392 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_80f97ca2_1761653930
2025-10-28 17:53:02,396 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:03,002 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:03,007 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:03,011 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:03,015 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:03,019 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:03,022 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:03,027 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:03,030 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:03,033 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:03,813 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:03,814 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:03,816 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:03,818 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:03,819 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:03,821 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:07,764 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:08,688 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:12,017 - graphiti_core.graphiti - INFO - Completed add_episode in 40716.3770198822 ms
2025-10-28 17:53:12,017 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_7017650c_1761653930
2025-10-28 17:53:12,017 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_7017650c_1761653930
2025-10-28 17:53:12,025 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:16,333 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:17,279 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:24,969 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:24,976 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:24,982 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:24,988 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:24,993 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:24,997 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:25,001 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:25,005 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:25,009 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:25,012 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:25,016 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:25,019 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:25,952 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:25,954 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:25,956 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:25,958 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:25,960 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:25,961 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:25,962 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:25,964 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:25,966 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:37,859 - graphiti_core.graphiti - INFO - Completed add_episode in 35466.14193916321 ms
2025-10-28 17:53:37,859 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_10431f2d_1761653930
2025-10-28 17:53:37,859 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_10431f2d_1761653930
2025-10-28 17:53:37,863 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:40,983 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:40,986 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:40,988 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:40,990 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:40,993 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:40,995 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:40,997 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:40,999 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:41,001 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:41,003 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:41,006 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:41,730 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:41,732 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:41,734 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:41,736 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:41,737 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:41,739 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:41,741 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:41,988 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:42,779 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:51,300 - graphiti_core.graphiti - INFO - Completed add_episode in 39281.77094459534 ms
2025-10-28 17:53:51,300 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_a923bcd3_1761653930
2025-10-28 17:53:51,300 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_a923bcd3_1761653930
2025-10-28 17:53:51,306 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:57,516 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:53:59,202 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:00,045 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:00,052 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:00,058 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:00,065 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:00,069 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:00,074 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:00,078 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:00,082 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:00,925 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:00,927 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:00,929 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:00,930 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:00,932 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:00,933 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:00,935 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:08,561 - graphiti_core.graphiti - INFO - Completed add_episode in 30702.093839645386 ms
2025-10-28 17:54:08,562 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_5eb053e9_1761653930
2025-10-28 17:54:08,562 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_5eb053e9_1761653930
2025-10-28 17:54:08,568 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:14,177 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:15,372 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:32,826 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:32,833 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:32,839 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:32,844 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:32,848 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:32,853 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:32,857 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:32,861 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:32,864 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:32,867 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:32,870 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:32,873 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:32,876 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:32,879 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:32,881 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:32,884 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:32,887 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:32,890 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:32,893 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:32,895 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:33,908 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:33,911 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:33,914 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:33,917 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:33,919 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:33,922 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:33,925 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:33,928 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:33,930 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:33,932 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:33,935 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:33,937 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:33,939 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:33,941 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:33,944 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:33,946 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:33,948 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:33,951 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:33,953 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:34,345 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:34,348 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:34,349 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:34,351 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:34,353 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:34,355 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:34,356 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:34,358 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:34,360 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:34,361 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:34,363 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:34,364 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:34,365 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:34,367 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:34,369 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:34,370 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:34,371 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:34,375 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:34,506 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:35,247 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:35,249 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:35,251 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:35,252 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:35,254 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:35,256 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:35,258 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:35,260 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:35,261 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:35,263 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:35,264 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:35,266 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:35,268 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:35,269 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:36,557 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-10-28 17:54:36,557 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Document: README.md\\nSection 5:\\nNeon PostgreSQL   Neo4j Desktop \\n (Cloud)   (Local/Remote) \\n  Project-per-Tenant    Graphiti Integration \\n  Vector Search (pgvector)    Namespace Isolation \\n  Hybrid Search (BM25)    Group ID Separation \\n  Catalog Database    Knowledge Graph \\n  Complete Isolation    Entity Relationships\",\n  \"Document: README.md\\nSection 6:\\nFile Structure\\n```\\nTenant/\\n README.md This comprehensive guide\\n requirements.txt Python dependencies\\n requirementsec2complete.txt Complete EC2 deployment dependencies\\n .env Environment configuration (create from template)\\n\\nCore Application Files\",\n  \"Document: README.md\\nSection 7:\\ninteractivemultitenantapi.py FastAPI server with tenant isolation\\n interactivemultitenantclihttp.py Rich CLI client with HTTP communication\\n multitenantagent.py Enhanced Pydantic AI agent\\n tenantmanager.py Neon project management & tenant lifecycle\\n tenantdataingestionservice.py Multi-modal search services\\n tenantgraphiticlient.py Neo4j + Graphiti with namespacing\\n authmiddleware.py JWT authentication & tenant context\\n\\nDeployment & Operations\",\n  \"Document: README.md\\nSection 8:\\nstartapi.sh API server startup script\\n startcli.sh CLI client startup script\\n EC2DEPLOYMENTGUIDE.md Complete AWS EC2 deployment guide\\n EC2DEPLOYMENTCHECKLIST.md Pre/post deployment verification\\n ec2quicksetup.sh Automated EC2 setup script\\n verifydeployment.sh Deployment verification script\\n\\nConfiguration & Schema\\n catalogschema.sql Catalog database schema for tenant metadata\\n deployment_guide.md Original deployment instructions\\n``\\nQuick Start\\nInstallation\\n``bash\\nClone and navigate to Tenant directory\\ncd Tenant/\\nCreate virtual environment\",\n  \"Document: README.md\\nSection 9:\\npython3 -m venv venv\\nsource venv/bin/activate On Windows: venv\\\\Scripts\\\\activate\\nInstall dependencies\\npip install -r requirements.txt\\n``\\nEnvironment Setup\\nCreate .env file:\\n``bash\\nNeon PostgreSQL Configuration (Project-per-Tenant)\\nNEONAPIKEY=yourneonapikeyhere\\nCATALOGDBURL=postgresql://username:password@ep-catalog.us-east-2.aws.neon.tech/neondb?sslmode=require\\nPOSTGRESURL=postgresql://username:password@ep-catalog.us-east-2.aws.neon.tech/neondb?sslmode=require\\nNeo4j Configuration (Local Desktop or Remote)\\nNEO4JURI=neo4j://localhost:7687\\nNEO4JURL=neo4j://localhost:7687\\nNEO4JUSERNAME=neo4j\\nNEO4JUSER=neo4j\\nNEO4JPASSWORD=yourneo4jpassword\\nNEO4JAUTH=neo4j/yourneo4j_password\\nAuthentication\",\n  \"Document: README.md\\nSection 10:\\nJWTSECRETKEY=your-super-secret-jwt-key-change-in-production\\nJWTALGORITHM=HS256\\nAI Providers\\nOPENAIAPIKEY=youropenaiapikey\\nGOOGLEAPIKEY=yourgoogleapikey Optional\\nANTHROPICAPIKEY=youranthropicapikey Optional\\nApplication Configuration\\nAPPENV=development\\nAPPHOST=127.0.0.1\\nAPPPORT=8000\\nLOGLEVEL=info\\n``\\nDatabase Setup\\n`bash\\nSetup catalog database (control plane) - if needed\\npsql \\\"$CATALOGDBURL\\\" -f catalogschema.sql\\n`\\nStart the System\\n`bash\\nMethod 1: Direct startup\\npython3 interactivemultitenantapi.py\\nMethod 2: Using startup scripts\\nchmod +x startapi.sh startcli.sh\\n./startapi.sh\\nIn another terminal for CLI\\n./startcli.sh\\n`\\nVerify Installation\\n``bash\",\n  \"Document: README.md\\nSection 11:\\nTest API health\\ncurl http://localhost:8000/health\\nRun deployment verification\\nchmod +x verifydeployment.sh\\n./verifydeployment.sh\\n``\\nVisit http://localhost:8000/docs for interactive API documentation.\\nUsage Examples\\nAuthentication & Setup\\n`bash\\nCreate a tenant\\ncurl -X POST \\\"http://localhost:8000/tenants\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"name\\\": \\\"Acme Corporation\\\",\\n\\\"email\\\": \\\"admin@acme.com\\\",\\n\\\"region\\\": \\\"aws-us-east-1\\\",\\n\\\"plan\\\": \\\"basic\\\"\\n}'\\nResponse includes tenant_id for authentication\\n`\\n Get Authentication Token\\n``bash\\nAuthenticate with tenant\",\n  \"Document: README.md\\nSection 12:\\ncurl -X POST \\\"http://localhost:8000/auth/login\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"tenantid\\\": \\\"TENANTIDFROMABOVE\\\",\\n\\\"apikey\\\": \\\"yourapikey\\\",\\n\\\"userid\\\": \\\"johndoe\\\"\\n}'\\nSave the JWT token from response\\n``\\nUpload Document\\n`bash\\nUpload document for ingestion\\ncurl -X POST \\\"http://localhost:8000/documents\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWT_TOKEN\\\" \\\\\\n-F \\\"file=@document.pdf\\\"\\nDocuments are automatically processed for vector and graph search\\n`\\nMulti-Modal Search\\n``bash\\n4a. Vector Search (Semantic similarity)\",\n  \"Document: README.md\\nSection 13:\\ncurl -X POST \\\"http://localhost:8000/search\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWTTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"query\\\": \\\"What are the company vacation policies?\\\",\\n\\\"searchtype\\\": \\\"vector\\\",\\n\\\"limit\\\": 10\\n}'\\n4b. Graph Search (Knowledge relationships)\\ncurl -X POST \\\"http://localhost:8000/search\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWTTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"query\\\": \\\"employee benefits structure\\\",\\n\\\"searchtype\\\": \\\"graph\\\",\\n\\\"limit\\\": 10\\n}'\\n4c. Hybrid Search (Vector + BM25 text search)\",\n  \"Document: README.md\\nSection 14:\\ncurl -X POST \\\"http://localhost:8000/search\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWTTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"query\\\": \\\"vacation policy details\\\",\\n\\\"searchtype\\\": \\\"hybrid\\\",\\n\\\"limit\\\": 10,\\n\\\"textweight\\\": 0.3\\n}'\\n4d. Comprehensive Search (All methods combined)\\ncurl -X POST \\\"http://localhost:8000/search\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWTTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"query\\\": \\\"comprehensive company policy information\\\",\\n\\\"search_type\\\": \\\"comprehensive\\\",\\n\\\"limit\\\": 10\\n}'\\n``\\nInteractive Chat\\n``bash\\nChat with AI agent\"\n]\n        \"Document: README.md\\nSection 16:\\nAPI Health Check - System status\\nExit - Close application\\n``\\nCore Components\\nTenantManager (tenantmanager.py)\\nNeon Project Management: Automated project creation and lifecycle management via Neon API\\nDatabase Routing: Dynamic connection management to tenant-specific databases\\nCatalog Operations: Centralized tenant metadata and configuration management\\nIsolation Guarantees: Complete project-level separation ensuring zero cross-tenant access\\nTenantDataIngestionService (tenantdataingestionservice.py`)\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search capabilities\\nVector Search: Semantic similarity using pgvector in tenant databases\\n-\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'README.md', 'summary': 'This document outlines a production-ready, multi-tenant Retrieval-Augmented Generation (RAG) system with complete data isolation, featuring both a FastAPI server and an interactive CLI client. It leverages Neon PostgreSQL with pgvector for vector/hybrid search and Neo4j with Graphiti for knowledge graph capabilities, ensuring project-per-tenant database isolation and namespace-based graph isolation. Key features include a comprehensive Pydantic AI agent with over 10 tenant-aware tools and intelligent routing, multi-modal search (vector, graph, hybrid, comprehensive), and JWT authentication for secure tenant context. The system is production-ready, optimized for AWS EC2, and includes Supervisor and Nginx for reliability. Configuration options include environment variables (e.g., connection strings, API keys) and tenant limits (e.g., max documents, storage). Monitoring and observability are supported with tools like Prometheus, Grafana, and the ELK stack. The system is ideal for SaaS companies and enterprise applications requiring robust data separation and shared infrastructure efficiency. It provides a dual interface (FastAPI server + CLI), advanced AI integration, context preservation, and a scalable, cost-efficient design with scale-to-zero capabilities for inactive tenants. Quick commands are provided for setup, API access, and log viewing. The system supports JWT authentication, multi-modal search (vector, graph, hybrid), and integrates with Neon PostgreSQL and Neo4j Desktop. Deployment guides for AWS EC2 and local setups are provided, along with scripts for startup and verification. The quick start guide includes installation, dependency management, and environment setup with example configurations for Neon, Neo4j, JWT, and AI providers.', 'entity_types': ['Entity'], 'attributes': {'labels': ['Entity']}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{
  "summary": "This document outlines a production-ready, multi-tenant Retrieval-Augmented Generation (RAG) system with complete data isolation, featuring both a FastAPI server and an interactive CLI client. It leverages Neon PostgreSQL with pgvector for vector/hybrid search and Neo4j with Graphiti for knowledge graph capabilities, ensuring project-per-tenant database isolation and namespace-based graph isolation. Key features include a comprehensive Pydantic AI agent with over 10 tenant-aware tools and intelligent routing, multi-modal search (vector, graph, hybrid, comprehensive), and JWT authentication for secure tenant context. The system is production-ready, optimized for AWS EC2, and includes Supervisor and Nginx for reliability. Configuration options include environment variables (e.g., connection strings, API keys) and tenant limits (e.g., max documents, storage). Monitoring and observability are supported with tools like Prometheus, Grafana, and the ELK stack. The system is ideal for SaaS companies and enterprise applications requiring robust data separation and shared infrastructure efficiency. It provides a dual interface (FastAPI server + CLI), advanced AI integration, context preservation, and a scalable, cost-efficient design with scale-to-zero capabilities for inactive tenants. Quick commands are provided for setup, API access, and log viewing. The system supports JWT authentication, multi-modal search (vector, graph, hybrid), and integrates with Neon PostgreSQL and Neo4j Desktop. Deployment guides for AWS EC2 and local setups are provided, along with scripts for startup and verification. The quick start guide includes installation, dependency management, and environment setup with example configurations for Neon, Neo4j, JWT, and AI providers. The file structure includes directories for tenant configurations, core application files, deployment scripts, and database schemas. The system supports various search types including vector, graph, hybrid, and comprehensive search, with options to adjust search parameters like text weight."
}
```

2025-10-28 17:54:36,558 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-10-28 17:54:36,558 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-10-28 17:54:36,560 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:49,199 - graphiti_core.graphiti - INFO - Completed add_episode in 57899.040937423706 ms
2025-10-28 17:54:49,200 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_5c63ecc8_1761653930
2025-10-28 17:54:49,200 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_5c63ecc8_1761653930
2025-10-28 17:54:49,210 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:51,621 - graphiti_core.graphiti - INFO - Completed add_episode in 43058.627128601074 ms
2025-10-28 17:54:51,621 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_c9436f91_1761653930
2025-10-28 17:54:51,621 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_c9436f91_1761653930
2025-10-28 17:54:51,626 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:52,884 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:53,812 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:55,556 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:54:56,484 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:06,226 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:06,233 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:06,238 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:06,245 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:06,250 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:06,254 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:06,259 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:06,263 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:06,266 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:06,269 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:06,273 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:06,276 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:06,279 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:06,282 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:07,029 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:07,030 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:07,032 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:07,034 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:07,036 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:12,237 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:12,244 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:12,250 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:12,257 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:12,262 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:12,267 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:12,271 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:12,276 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:12,280 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:12,283 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:12,287 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:12,290 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:12,293 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:13,207 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:13,209 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:13,210 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:13,212 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:13,213 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:13,215 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:13,217 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:18,295 - graphiti_core.graphiti - INFO - Completed add_episode in 29094.338178634644 ms
2025-10-28 17:55:18,295 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_b5049b9b_1761653930
2025-10-28 17:55:18,295 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_b5049b9b_1761653930
2025-10-28 17:55:18,300 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:22,511 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:23,596 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:24,202 - graphiti_core.graphiti - INFO - Completed add_episode in 32580.86895942688 ms
2025-10-28 17:55:24,203 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_3f2feda6_1761653930
2025-10-28 17:55:24,203 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_3f2feda6_1761653930
2025-10-28 17:55:24,208 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:27,875 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:28,771 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:29,108 - graphiti_ingestion_manager - ERROR - Failed to ingest episode tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_a2d6188f_1761653930: Rate limit exceeded. Please try again later. (body preview: Document: README.md
Section 20:
No cross-tenant data access possible (physical separation)
Independe...)
2025-10-28 17:55:29,108 - graphiti_ingestion_manager - ERROR - ❌ Episode ingest failed for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80 chunk_id=a2d6188f-4d77-49c6-a5bf-bc290f398298: Rate limit exceeded. Please try again later.
2025-10-28 17:55:29,124 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:29,347 - graphiti_ingestion_manager - ERROR - Failed to ingest episode tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_870b818f_1761653930: Rate limit exceeded. Please try again later. (body preview: Document: README.md
Section 21:
GET /health - System health check and tenant count
Authentication
PO...)
2025-10-28 17:55:29,348 - graphiti_ingestion_manager - ERROR - ❌ Episode ingest failed for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80 chunk_id=870b818f-dcaa-49e1-9b74-405ff8d370a5: Rate limit exceeded. Please try again later.
2025-10-28 17:55:29,362 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:29,597 - graphiti_ingestion_manager - ERROR - Failed to ingest episode tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_684f2ccb_1761653930: Rate limit exceeded. Please try again later. (body preview: Document: README.md
Section 22:
Session management and source attribution
Full integration with sear...)
2025-10-28 17:55:29,597 - graphiti_ingestion_manager - ERROR - ❌ Episode ingest failed for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80 chunk_id=684f2ccb-9a33-46b0-b804-0e3b8311f170: Rate limit exceeded. Please try again later.
2025-10-28 17:55:29,612 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:29,846 - graphiti_ingestion_manager - ERROR - Failed to ingest episode tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_75fc7ad1_1761653930: Rate limit exceeded. Please try again later. (body preview: Document: README.md
Section 23:
curl -X POST "http://localhost:8000/tenants" -H "Content-Type: appli...)
2025-10-28 17:55:29,846 - graphiti_ingestion_manager - ERROR - ❌ Episode ingest failed for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80 chunk_id=75fc7ad1-c99b-49fc-b11e-d7a8884f983d: Rate limit exceeded. Please try again later.
2025-10-28 17:55:29,861 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:30,086 - graphiti_ingestion_manager - ERROR - Failed to ingest episode tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_6e823be2_1761653930: Rate limit exceeded. Please try again later. (body preview: Document: README.md
Section 24:
``bash
Upload to EC2 and run automated setup
scp -r Tenant/* ubuntu@...)
2025-10-28 17:55:30,086 - graphiti_ingestion_manager - ERROR - ❌ Episode ingest failed for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80 chunk_id=6e823be2-f456-4128-8b4f-30bca168c691: Rate limit exceeded. Please try again later.
2025-10-28 17:55:30,101 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:30,316 - graphiti_ingestion_manager - ERROR - Failed to ingest episode tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_c1550e36_1761653930: Rate limit exceeded. Please try again later. (body preview: Document: README.md
Section 25:
Rate limiting and request throttling
Caching strategies for frequent...)
2025-10-28 17:55:30,316 - graphiti_ingestion_manager - ERROR - ❌ Episode ingest failed for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80 chunk_id=c1550e36-0449-43a4-92d8-431df0a60895: Rate limit exceeded. Please try again later.
2025-10-28 17:55:30,328 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:30,547 - graphiti_ingestion_manager - ERROR - Failed to ingest episode tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_659c81bc_1761653930: Rate limit exceeded. Please try again later. (body preview: Document: README.md
Section 26:
Custom quotas and rate limits per tenant
Monitoring & Observability
...)
2025-10-28 17:55:30,548 - graphiti_ingestion_manager - ERROR - ❌ Episode ingest failed for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80 chunk_id=659c81bc-55ac-4d4a-9387-02c350d5f165: Rate limit exceeded. Please try again later.
2025-10-28 17:55:30,561 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:30,791 - graphiti_ingestion_manager - ERROR - Failed to ingest episode tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_0086bc83_1761653930: Rate limit exceeded. Please try again later. (body preview: Document: README.md
Section 27:
License
MIT License - see LICENSE file for details.
Support & Troubl...)
2025-10-28 17:55:30,792 - graphiti_ingestion_manager - ERROR - ❌ Episode ingest failed for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80 chunk_id=0086bc83-702a-4ada-8727-50023fdea33b: Rate limit exceeded. Please try again later.
2025-10-28 17:55:30,808 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:31,041 - graphiti_ingestion_manager - ERROR - Failed to ingest episode tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_0e41437c_1761653930: Rate limit exceeded. Please try again later. (body preview: Document: README.md
Section 28:
Examine logs for detailed error information
What Makes This System S...)
2025-10-28 17:55:31,041 - graphiti_ingestion_manager - ERROR - ❌ Episode ingest failed for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80 chunk_id=0e41437c-927f-4cc3-a313-ca92466df538: Rate limit exceeded. Please try again later.
2025-10-28 17:55:31,055 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:36,097 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:36,402 - graphiti_ingestion_manager - ERROR - Failed to ingest episode tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_7ab16f9b_1761653930: Rate limit exceeded. Please try again later. (body preview: Document: README.md
Section 29:
Context Preservation: Maintains tenant boundaries across all AI oper...)
2025-10-28 17:55:36,402 - graphiti_ingestion_manager - ERROR - ❌ Episode ingest failed for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80 chunk_id=7ab16f9b-1ef4-44d1-8c67-363aff888a04: Rate limit exceeded. Please try again later.
2025-10-28 17:55:36,418 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:36,653 - graphiti_ingestion_manager - ERROR - Failed to ingest episode tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_294ee573_1761653930: Rate limit exceeded. Please try again later. (body preview: Document: README.md
Section 30:
Comprehensive Documentation: Step-by-step guides for all scenarios
A...)
2025-10-28 17:55:36,653 - graphiti_ingestion_manager - ERROR - ❌ Episode ingest failed for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80 chunk_id=294ee573-d5f5-4b87-a87b-651e381904ed: Rate limit exceeded. Please try again later.
2025-10-28 17:55:36,712 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:37,469 - graphiti_ingestion_manager - ERROR - Failed to ingest episode tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_e2c85f12_1761653930: Rate limit exceeded. Please try again later. (body preview: Document: README.md
Section 31:
python3 interactivemultitenantapi.py Direct API startup
curl http://...)
2025-10-28 17:55:37,469 - graphiti_ingestion_manager - ERROR - ❌ Episode ingest failed for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80 chunk_id=e2c85f12-1129-462d-86ea-998431e37af0: Rate limit exceeded. Please try again later.
2025-10-28 17:55:38,214 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:53,283 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:53,290 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:53,296 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:53,303 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:53,307 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:53,312 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:53,315 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:53,318 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:53,321 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:53,324 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:53,328 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:53,331 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:53,334 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:53,337 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:53,340 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:53,343 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:53,346 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:53,349 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:54,212 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:54,213 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:54,215 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:54,217 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:54,218 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:54,220 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:54,221 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:54,223 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:54,225 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:55:54,227 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-28 17:56:06,558 - graphiti_core.graphiti - INFO - Completed add_episode in 48262.70389556885 ms
2025-10-28 17:56:06,558 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_35c5b424_1761653930
2025-10-28 17:56:06,559 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_35c5b424_1761653930
2025-10-28 17:56:06,559 - graphiti_ingestion_manager - INFO - KG ingestion completed for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: 19/31 episodes succeeded, 12 failed
2025-10-28 17:56:06,559 - graphiti_ingestion_manager - WARNING - Tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80 has 12 failed episodes (12 retryable) that need attention
2025-10-28 17:56:06,559 - tenant_graphiti_client - WARNING - ⚠️ Partial KG ingestion for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: 19/31 episodes succeeded, 12 failed
2025-10-28 17:56:06,559 - tenant_graphiti_client - WARNING - Tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80 has 12 failed episodes (12 retryable) - consider retry
2025-10-28 17:56:06,559 - tenant_data_ingestion_service - INFO - ✅ Successfully added 19 episodes to tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80 graph namespace
2025-10-28 17:56:06,559 - tenant_data_ingestion_service - WARNING - ⚠️ Partial success: 12 episodes failed and may need retry
2025-10-28 17:56:06,559 - tenant_data_ingestion_service - INFO - Graph ingestion: Created episode 19
2025-10-28 17:56:06,559 - tenant_data_ingestion_service - INFO - Successfully ingested document a6c1092a-86e2-4d58-ad7f-abecbea08706 for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80 in 507621.07ms
2025-10-28 18:12:03,572 - interactive_multi_tenant_api - INFO - Shutting down Multi-Tenant RAG API...
2025-10-29 13:04:42,456 - __main__ - INFO - Starting Interactive Multi-Tenant RAG API on 127.0.0.1:8000
2025-10-29 13:04:42,475 - interactive_multi_tenant_api - INFO - Starting Multi-Tenant RAG API...
2025-10-29 13:04:42,475 - interactive_multi_tenant_api - INFO - Neo4j URI: neo4j://127.0.0.1:7687
2025-10-29 13:04:42,475 - interactive_multi_tenant_api - INFO - Neo4j User: neo4j
2025-10-29 13:04:42,475 - interactive_multi_tenant_api - INFO - Neo4j Password: ***
2025-10-29 13:04:42,476 - tenant_manager - INFO - TenantManager initialized with Graphiti client
2025-10-29 13:04:42,476 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-10-29 13:04:42,476 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-10-29 13:04:42,476 - multi_tenant_ingestion - INFO - Multi-tenant ingestion pipeline initialized
2025-10-29 13:04:42,476 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-10-29 13:04:42,476 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-10-29 13:04:42,476 - interactive_multi_tenant_api - INFO - Tenant manager initialized
2025-10-29 13:04:42,479 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-10-29 13:04:42,479 - interactive_multi_tenant_api - INFO - Tenant ingestion service initialized
2025-10-29 13:04:42,479 - auth_middleware - INFO - JWT Authenticator initialized
2025-10-29 13:04:42,479 - interactive_multi_tenant_api - INFO - JWT authenticator initialized
2025-10-29 13:04:42,479 - interactive_multi_tenant_api - INFO - 🎯 Multi-Tenant RAG API ready - all backend logs will appear in this terminal
2025-10-29 13:04:42,479 - interactive_multi_tenant_api - INFO - 📊 Backend activity from CLI and API operations will be shown below:
2025-10-29 13:05:55,379 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-10-29 13:05:55,557 - catalog_database - INFO - Catalog database connection test successful
2025-10-29 13:05:55,558 - tenant_graphiti_client - INFO - Applied Graphiti performance optimizations for production reliability
2025-10-29 13:05:55,558 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 13:05:55,599 - robust_gemini_client - INFO - RobustGeminiClient initialized with temperature=0.0 for deterministic JSON output
2025-10-29 13:05:55,599 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 13:05:55,623 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 13:05:55,693 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX relation_uuid FOR ()-[e:RELATES_TO]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)'
2025-10-29 13:05:55,694 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX community_uuid IF NOT EXISTS FOR (e:Community) ON (e.uuid)` has no effect.} {description: `RANGE INDEX community_uuid FOR (e:Community) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX community_uuid IF NOT EXISTS FOR (n:Community) ON (n.uuid)'
2025-10-29 13:05:55,695 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_uuid IF NOT EXISTS FOR (e:Entity) ON (e.uuid)` has no effect.} {description: `RANGE INDEX entity_uuid FOR (e:Entity) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX entity_uuid IF NOT EXISTS FOR (n:Entity) ON (n.uuid)'
2025-10-29 13:05:55,696 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_uuid IF NOT EXISTS FOR (e:Episodic) ON (e.uuid)` has no effect.} {description: `RANGE INDEX episode_uuid FOR (e:Episodic) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX episode_uuid IF NOT EXISTS FOR (n:Episodic) ON (n.uuid)'
2025-10-29 13:05:55,699 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX has_member_uuid FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)'
2025-10-29 13:05:55,699 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX mention_uuid FOR ()-[e:MENTIONS]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)'
2025-10-29 13:05:55,700 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_group_id IF NOT EXISTS FOR (e:Entity) ON (e.group_id)` has no effect.} {description: `RANGE INDEX entity_group_id FOR (e:Entity) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX entity_group_id IF NOT EXISTS FOR (n:Entity) ON (n.group_id)'
2025-10-29 13:05:55,701 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX episode_content IF NOT EXISTS FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` has no effect.} {description: `FULLTEXT INDEX episode_content FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX episode_content IF NOT EXISTS \n            FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]'
2025-10-29 13:05:55,702 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` has no effect.} {description: `FULLTEXT INDEX node_name_and_summary FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS \n            FOR (n:Entity) ON EACH [n.name, n.summary, n.group_id]'
2025-10-29 13:05:55,702 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_group_id IF NOT EXISTS FOR (e:Episodic) ON (e.group_id)` has no effect.} {description: `RANGE INDEX episode_group_id FOR (e:Episodic) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX episode_group_id IF NOT EXISTS FOR (n:Episodic) ON (n.group_id)'
2025-10-29 13:05:55,702 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX relation_group_id FOR ()-[e:RELATES_TO]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)'
2025-10-29 13:05:55,703 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` has no effect.} {description: `FULLTEXT INDEX edge_name_and_fact FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS \n            FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]'
2025-10-29 13:05:55,704 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX mention_group_id FOR ()-[e:MENTIONS]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)'
2025-10-29 13:05:55,705 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_entity_index FOR (e:Entity) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.created_at)'
2025-10-29 13:05:55,706 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.name)` has no effect.} {description: `RANGE INDEX name_entity_index FOR (e:Entity) ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.name)'
2025-10-29 13:05:55,707 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_episodic_index FOR (e:Episodic) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.created_at)'
2025-10-29 13:05:55,707 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_episodic_index FOR (e:Episodic) ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.valid_at)'
2025-10-29 13:05:55,708 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)'
2025-10-29 13:05:55,709 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)` has no effect.} {description: `RANGE INDEX name_edge_index FOR ()-[e:RELATES_TO]-() ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)'
2025-10-29 13:05:55,710 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` has no effect.} {description: `RANGE INDEX expired_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` already exists.} {position: None} for query: 'CREATE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)'
2025-10-29 13:05:55,710 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)'
2025-10-29 13:05:55,710 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` has no effect.} {description: `RANGE INDEX invalid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` already exists.} {position: None} for query: 'CREATE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)'
2025-10-29 13:05:55,711 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX community_name IF NOT EXISTS FOR (e:Community) ON EACH [e.name, e.group_id]` has no effect.} {description: `FULLTEXT INDEX community_name FOR (e:Community) ON EACH [e.name, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX community_name IF NOT EXISTS \n            FOR (n:Community) ON EACH [n.name, n.group_id]'
2025-10-29 13:05:55,712 - graphiti_ingestion_manager - INFO - GraphitiIngestionManager initialized for reliable episode ingestion
2025-10-29 13:05:55,712 - tenant_graphiti_client - INFO - TenantGraphitiClient initialized successfully with robust LLM: gemini-2.0-flash-thinking-exp-01-21
2025-10-29 13:05:55,712 - tenant_graphiti_client - INFO - ✅ Knowledge graph ingestion is now deterministic and reliable
2025-10-29 13:06:06,530 - auth_middleware - INFO - Created access token for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80
2025-10-29 13:06:33,425 - interactive_multi_tenant_api - INFO - Document upload for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: temporal_rag_test_story.md -> vector database + knowledge graph
2025-10-29 13:06:33,425 - tenant_data_ingestion_service - INFO - Starting document ingestion for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: temporal_rag_test_story.md
2025-10-29 13:06:33,426 - tenant_data_ingestion_service - INFO - Ingestion options: vector database + knowledge graph
2025-10-29 13:06:37,774 - tenant_data_ingestion_service - INFO - Creating chunks for document: temporal_rag_test_story.md
2025-10-29 13:06:37,776 - tenant_data_ingestion_service - INFO - Generating embeddings for 4 chunks
2025-10-29 13:06:37,776 - ingestion.embedder - INFO - Generating embeddings for 4 chunks
2025-10-29 13:06:39,328 - ingestion.embedder - INFO - Processed batch 1/1
2025-10-29 13:06:39,328 - ingestion.embedder - INFO - Generated embeddings for 4 chunks (model: embedding-001, dimensions: 768)
2025-10-29 13:06:51,015 - tenant_data_ingestion_service - INFO - Created 4 chunks for document 495f91ae-fa41-4f84-b90a-885d150f8052 (4 with valid embeddings, 0 without)
2025-10-29 13:06:51,462 - tenant_data_ingestion_service - INFO - Vector ingestion: Created 4 chunks with embeddings
2025-10-29 13:06:51,464 - tenant_data_ingestion_service - INFO - Adding 4 chunks to tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80 graph namespace: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80
2025-10-29 13:06:51,464 - tenant_graphiti_client - INFO - 🚀 Starting production KG ingestion for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: 4 chunks from 'temporal_rag_test_story.md'
2025-10-29 13:06:51,464 - graphiti_ingestion_manager - INFO - Starting KG ingestion for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: 4 chunks from document 'temporal_rag_test_story.md'
2025-10-29 13:06:51,584 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:06:56,121 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:06:57,739 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:07:25,368 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:07:25,375 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:07:25,380 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:07:25,385 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:07:25,390 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:07:25,394 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:07:25,398 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:07:25,403 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:07:25,407 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:07:25,410 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:07:25,414 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:07:25,417 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:07:26,731 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:07:26,733 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:07:26,736 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:07:26,738 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:07:26,740 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:07:26,741 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:07:26,743 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:07:26,744 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:07:26,746 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:07:26,748 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:07:26,749 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:07:26,751 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:07:41,643 - graphiti_core.graphiti - INFO - Completed add_episode in 50175.42791366577 ms
2025-10-29 13:07:41,643 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_7d7d9d18_1761723411
2025-10-29 13:07:41,647 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:07:46,366 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:07:48,016 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:47,788 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:47,795 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:47,801 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:47,806 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:47,811 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:47,816 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:47,820 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:47,824 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:47,828 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:47,832 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:47,835 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:47,839 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:47,842 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:47,845 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:47,847 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:47,850 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:47,853 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:47,855 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:47,858 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:50,232 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:50,233 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:50,235 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:50,237 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:50,238 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:50,240 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:50,241 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:50,243 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:50,244 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:50,246 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:50,247 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:50,249 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:50,251 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:50,252 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:50,256 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:50,258 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:50,259 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:50,260 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:08:50,262 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:09:12,250 - graphiti_core.graphiti - INFO - Completed add_episode in 90606.54520988464 ms
2025-10-29 13:09:12,251 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_06ae7386_1761723411
2025-10-29 13:09:12,256 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:09:16,827 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:09:19,453 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:29,924 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:29,932 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:29,959 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:29,965 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:29,969 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:29,972 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:29,975 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:29,977 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:29,980 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:29,983 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:29,985 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:29,988 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:29,991 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:29,993 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:29,996 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:29,998 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:30,000 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:30,002 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:30,004 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:30,006 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:31,224 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:31,310 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:31,576 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:31,580 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:31,929 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:31,930 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:31,932 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:31,933 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:31,935 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:31,937 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:31,938 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:31,940 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:31,941 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:31,943 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:31,944 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:31,946 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:31,947 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:31,948 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:31,950 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:31,951 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:31,953 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:31,954 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:31,956 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:31,957 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:33,142 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:33,396 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:33,402 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:33,476 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:33,479 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:33,483 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:10:59,903 - graphiti_core.graphiti - INFO - Completed add_episode in 107651.63612365723 ms
2025-10-29 13:10:59,903 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_8deeb12e_1761723411
2025-10-29 13:10:59,909 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:11:02,868 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:11:04,181 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:11:10,239 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:11:10,247 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:11:10,252 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:11:11,593 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:11:11,595 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:11:11,597 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:11:17,804 - graphiti_core.graphiti - INFO - Completed add_episode in 17900.336742401123 ms
2025-10-29 13:11:17,804 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_05593be9_1761723411
2025-10-29 13:11:17,805 - graphiti_ingestion_manager - INFO - KG ingestion completed for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: 4/4 episodes succeeded, 0 failed
2025-10-29 13:11:17,805 - tenant_graphiti_client - INFO - ✅ Perfect KG ingestion for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: 4/4 episodes succeeded
2025-10-29 13:11:17,805 - tenant_data_ingestion_service - INFO - ✅ Successfully added 4 episodes to tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80 graph namespace
2025-10-29 13:11:17,805 - tenant_data_ingestion_service - INFO - Graph ingestion: Created episode 4
2025-10-29 13:11:17,805 - tenant_data_ingestion_service - INFO - Successfully ingested document 495f91ae-fa41-4f84-b90a-885d150f8052 for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80 in 284379.55ms
2025-10-29 13:13:10,881 - interactive_multi_tenant_api - INFO - Document upload for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: README.md -> vector database + knowledge graph
2025-10-29 13:13:10,883 - tenant_data_ingestion_service - INFO - Starting document ingestion for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: README.md
2025-10-29 13:13:10,883 - tenant_data_ingestion_service - INFO - Ingestion options: vector database + knowledge graph
2025-10-29 13:13:14,028 - tenant_data_ingestion_service - INFO - Creating chunks for document: README.md
2025-10-29 13:13:14,041 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 13:13:14,070 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:13:30,948 - tenant_data_ingestion_service - INFO - Generating embeddings for 30 chunks
2025-10-29 13:13:30,948 - ingestion.embedder - INFO - Generating embeddings for 30 chunks
2025-10-29 13:13:32,903 - ingestion.embedder - INFO - Processed batch 1/1
2025-10-29 13:13:32,903 - ingestion.embedder - INFO - Generated embeddings for 30 chunks (model: embedding-001, dimensions: 768)
2025-10-29 13:13:43,737 - tenant_data_ingestion_service - INFO - Created 30 chunks for document 54a93cf0-d651-4b83-821f-4b3a8cb950f6 (30 with valid embeddings, 0 without)
2025-10-29 13:13:43,954 - tenant_data_ingestion_service - INFO - Vector ingestion: Created 30 chunks with embeddings
2025-10-29 13:13:43,964 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 13:13:44,000 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:14:05,352 - tenant_data_ingestion_service - INFO - Adding 30 chunks to tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80 graph namespace: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80
2025-10-29 13:14:05,352 - tenant_graphiti_client - INFO - 🚀 Starting production KG ingestion for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: 30 chunks from 'README.md'
2025-10-29 13:14:05,352 - graphiti_ingestion_manager - INFO - Starting KG ingestion for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: 30 chunks from document 'README.md'
2025-10-29 13:14:05,367 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:14:08,910 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:14:10,465 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:14:34,832 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:14:34,847 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:14:34,855 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:14:34,858 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:14:34,864 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:14:34,869 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:14:34,876 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:14:34,879 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:14:34,882 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:14:36,097 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:14:36,099 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:14:36,101 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:14:36,108 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:14:36,113 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:14:36,127 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:14:36,135 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:14:36,145 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:14:36,149 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:14:36,150 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:14:36,171 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:14:36,176 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:14:38,338 - graphiti_ingestion_manager - ERROR - Failed to ingest episode tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_727da811_1761723845: list index out of range (body preview: Document: README.md
Section 1:
Multi-Tenant RAG System with Interactive CLI & FastAPI
Overview
A pro...)
2025-10-29 13:14:38,339 - graphiti_ingestion_manager - ERROR - ❌ Episode ingest failed for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80 chunk_id=727da811-7292-4f12-80e9-e09a86aa185e: list index out of range
2025-10-29 13:14:38,346 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:14:42,202 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:14:43,787 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:15:09,040 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:15:09,048 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:15:09,054 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:15:09,059 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:15:09,063 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:15:09,069 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:15:09,073 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:15:09,077 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:15:09,081 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:15:09,085 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:15:09,088 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:15:09,091 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:15:09,094 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:15:09,097 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:15:09,100 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:15:10,114 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:15:10,116 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:15:10,117 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:15:10,850 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-10-29 13:15:10,850 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Document: README.md\\nSection 14:\\ncurl -X POST \\\"http://localhost:8000/search\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWTTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"query\\\": \\\"vacation policy details\\\",\\n\\\"searchtype\\\": \\\"hybrid\\\",\\n\\\"limit\\\": 10,\\n\\\"textweight\\\": 0.3\\n}'\\n4d. Comprehensive Search (All methods combined)\\ncurl -X POST \\\"http://localhost:8000/search\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWTTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"query\\\": \\\"comprehensive company policy information\\\",\\n\\\"search_type\\\": \\\"comprehensive\\\",\\n\\\"limit\\\": 10\\n}'\\n``\\nInteractive Chat\\n``bash\\nChat with AI agent\",\n  \"Document: README.md\\nSection 15:\\ncurl -X POST \\\"http://localhost:8000/chat\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWTTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"message\\\": \\\"Can you explain our remote work policy and its benefits?\\\",\\n\\\"sessionid\\\": \\\"optionalsessionid\\\"\\n}'\\n``\\n Interactive CLI Usage\\n``bash\\nStart the interactive CLI\\n./startcli.sh\\nOr with custom API URL\\n./start_cli.sh --api-url http://your-server:8000\\nCLI Features:\\nAuthenticate - Login with tenant credentials\\nCreate New Tenant - Set up new tenant\\n Show Tenant Info - View tenant details\\nUpload Document - Upload files for processing\\nAdvanced Search (Technical) - Multi-modal search options\\nChat Mode - Interactive AI conversation\",\n  \"Document: README.md\\nSection 16:\\nAPI Health Check - System status\\nExit - Close application\\n``\\nCore Components\\nTenantManager (tenantmanager.py)\\nNeon Project Management: Automated project creation and lifecycle management via Neon API\\nDatabase Routing: Dynamic connection management to tenant-specific databases\\nCatalog Operations: Centralized tenant metadata and configuration management\\nIsolation Guarantees: Complete project-level separation ensuring zero cross-tenant access\\nTenantDataIngestionService (tenantdataingestionservice.py`)\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search capabilities\\nVector Search: Semantic similarity using pgvector in tenant databases\\n-\",\n  \"Document: README.md\\nSection 17:\\nHybrid Search: Combined vector + BM25 text search with configurable weights\\nGraph Integration: Seamless integration with Graphiti for knowledge relationships\\nTenantGraphitiClient (tenantgraphiticlient.py)\\nNamespace Isolation: Complete tenant separation using groupid namespacing\\nKnowledge Graph: Entity and relationship extraction with temporal tracking\\nGraph Analytics: Advanced queries and relationship discovery within tenant boundaries\\nEpisode Management: Document ingestion with automatic knowledge graph updates\\nMultiTenantRAGAgent (multitenant_agent.py)\\nEnhanced Pydantic AI: 10+ specialized tools with tenant context injection\\n-\",\n  \"Document: README.md\\nSection 18:\\nIntelligent Routing: Automatic tool selection based on query complexity\\nDual Storage: Seamlessly combines vector and graph search results\\nContext Preservation: Maintains tenant isolation across all agent operations\\nAuthentication & Security (authmiddleware.py)\\nJWT Authentication: Secure token-based authentication with tenant claims\\nContext Injection: Automatic tenant context validation and routing\\nPermission Management: Fine-grained access control and audit logging\\nCross-Tenant Prevention: Multiple layers of isolation validation\\nInteractive CLI (interactivemultitenantcli_http.py)\\nRich Console Interface: Beautiful CLI with progress indicators and tables\\n-\",\n  \"Document: README.md\\nSection 19:\\nHTTP Communication: Seamless integration with FastAPI server\\nMulti-Modal Operations: Full access to all search types and chat functionality\\nSession Management: Persistent authentication and context handling\\nFastAPI Application (interactivemultitenant_api.py)\\nTenant-Aware Routing: Automatic request routing to correct tenant resources\\nComprehensive Endpoints: Full REST API with authentication and documentation\\nReal-Time Processing: Async operations with proper connection pooling\\nProduction Ready: Health checks, monitoring, and error handling\\nSecurity Guarantees\\nDatabase Level\\nComplete project-level isolation (one Neon project per tenant)\\n-\",\n  \"Document: temporal_rag_test_story.md\\nSection 1:\\nTemporal Knowledge Story for RAG Testing\\nStory: The Life and Choices of Aanya Sharma (2023-2025)\\nDecember 2023\\nAanya Sharma is a product manager at Zyphos Tech, living in Bangalore.\\nShe prefers Android phones. Her favorite phone is the OnePlus 11R.\\nShe is using Notion as her preferred note-taking app.\\nShe uses Slack for team collaboration.\\nHer favorite coffee shop is Third Wave Coffee, Indiranagar.\\nFebruary 2024\\nAanya moves to Hyderabad for a project.\\nShe discovers and starts preferring Samsung Galaxy Z Fold 5 over OnePlus.\\nShe starts using Obsidian instead of Notion due to better knowledge graphing.\\nHer favorite caf becomes Roastery Coffee House in Hyderabad.\\n-\",\n  \"Document: temporal_rag_test_story.md\\nSection 2:\\nSlack is replaced by Microsoft Teams in her organization.\\nJune 2024\\nAanya buys an iPhone 15 Pro Max after being influenced by her designer friends.\\nShe now prefers Apple devices.\\nShe starts using Apple Notes.\\nShe still uses Microsoft Teams.\\nHer favorite coffee shop is now Starbucks, Banjara Hills.\\nSeptember 2024\\nAanya is promoted to Director of Product.\\nShe starts managing two teams:\\nProduct Team A: Working on internal tools.\\nProduct Team B: Working on mobile consumer app.\\nProduct Team A uses Jira, while Team B uses Linear.\\nShe uses Miro heavily for brainstorming and workshops.\\nShe starts splitting her time between Hyderabad and Mumbai.\\n-\",\n  \"Document: temporal_rag_test_story.md\\nSection 3:\\nHer Mumbai go-to place is Blue Tokai, Bandra.\\nJanuary 2025\\nAanya switches to Pixel 9 Pro as she becomes interested in AI-first devices.\\nApple is no longer her preferred brand-she now leans toward Googles ecosystem.\\nShe moves fully to Hyderabad.\\nShe now prefers Trello for personal projects, while her teams still use Jira and Linear.\\nShe mentors a group of interns, one of whom, Rahul Mehta, prefers One UI over Pixel UI.\\nJuly 2025\\nAanya joins Cerebro AI as Chief Product Officer.\\nShe now oversees:\\nInfra Team (uses Jira)\\nML Research Team (uses GitHub Projects)\\nAI Product Team (uses Notion again)\\nShe reverts to iPhone 16 due to better integration with her Mac.\\n-\",\n  \"Document: temporal_rag_test_story.md\\nSection 4:\\nHer preferred coffee shop is now Sonder Coffee, HSR Layout when shes in Bangalore for board meetings.\\n---\"\n]\n        \"Document: README.md\\nSection 2:\\nDual Interface: FastAPI server + Interactive CLI client\\nAI-Powered: Enhanced Pydantic AI agent with 10+ tenant-aware tools\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search\\nJWT Authentication: Secure tenant context with middleware validation\\nProduction Ready: Supervisor process management + Nginx reverse proxy\\nAWS EC2 Optimized: Complete deployment guides for cloud infrastructure\\nFully Tested: Comprehensive verification and testing scripts\\nLive Integration: Real-time Neon PostgreSQL + Neo4j Desktop connectivity\\n Architecture\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'Architecture', 'summary': 'The architecture emphasizes robust security and tenant isolation through multiple layers: database, graph, and application. It utilizes Neon for project-level data separation, Graphiti with namespace isolation for knowledge graphs, and JWT authentication with tenant claims at the application level. Key components include TenantManager for project lifecycle, TenantDataIngestionService for multi-modal search (vector, graph, hybrid), TenantGraphitiClient for graph operations, MultiTenantRAGAgent for AI-powered interactions, and an Interactive CLI/FastAPI application for user interaction and API access. Security is paramount, with features like cross-tenant prevention, permission management, and audit logging. Deployment options range from local development to AWS EC2, with comprehensive verification and setup scripts provided. Performance is optimized through async operations, efficient indexing, and caching, with considerations for horizontal scaling and Kubernetes deployment. Configuration is managed via environment variables, and tenant-specific limits (documents, storage) can be customized. The system offers a dual interface (FastAPI server and interactive CLI), AI-powered tools, multi-modal search, JWT authentication, and is production-ready with Supervisor and Nginx. It is optimized for AWS EC2, fully tested, and integrates with Neon PostgreSQL and Neo4j Desktop.', 'entity_types': ['Entity'], 'attributes': {'labels': ['Entity']}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{
  "summary": "The architecture emphasizes robust security and tenant isolation through multiple layers: database, graph, and application. It utilizes Neon for project-level data separation, Graphiti with namespace isolation for knowledge graphs, and JWT authentication with tenant claims at the application level. Key components include TenantManager for project lifecycle, TenantDataIngestionService for multi-modal search (vector, graph, hybrid, comprehensive), TenantGraphitiClient for graph operations, MultiTenantRAGAgent for AI-powered interactions, and an Interactive CLI/FastAPI application for user interaction and API access. Security is paramount, with features like cross-tenant prevention, permission management, and audit logging. Deployment options range from local development to AWS EC2, with comprehensive verification and setup scripts provided. Performance is optimized through async operations, efficient indexing, and caching, with considerations for horizontal scaling and Kubernetes deployment. Configuration is managed via environment variables, and tenant-specific limits (documents, storage) can be customized. The system offers a dual interface (FastAPI server and interactive CLI), AI-powered tools, multi-modal search, JWT authentication, and is production-ready with Supervisor and Nginx. It is optimized for AWS EC2, fully tested, and integrates with Neon PostgreSQL and Neo4j Desktop."
}
```

2025-10-29 13:15:10,851 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-10-29 13:15:10,851 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-10-29 13:15:10,853 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:15:54,527 - graphiti_core.graphiti - INFO - Completed add_episode in 76187.72888183594 ms
2025-10-29 13:15:54,528 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_3ba46a60_1761723845
2025-10-29 13:15:54,534 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:16:00,020 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:16:01,707 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:16:26,749 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:16:26,753 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:16:26,757 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:16:26,762 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:16:26,766 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:16:26,769 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:16:26,772 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:16:26,775 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:16:26,778 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:16:26,782 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:16:26,785 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:16:26,787 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:16:26,790 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:16:26,793 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:16:26,795 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:16:28,315 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:16:28,317 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:16:28,319 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:16:28,320 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:16:28,321 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:16:28,324 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:16:28,325 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:16:28,327 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:16:28,329 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:16:28,331 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:16:28,333 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:16:28,334 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:16:28,336 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:16:55,451 - graphiti_core.graphiti - INFO - Completed add_episode in 60922.69515991211 ms
2025-10-29 13:16:55,451 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_55e614ed_1761723845
2025-10-29 13:16:55,456 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:16:59,213 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:00,477 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:20,517 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:20,524 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:20,532 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:20,538 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:20,557 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:20,560 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:20,565 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:20,572 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:20,575 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:20,581 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:20,586 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:20,590 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:20,594 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:20,599 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:20,603 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:20,608 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:20,611 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:21,956 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:21,958 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:21,959 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:21,961 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:21,962 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:21,965 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:21,966 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:21,968 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:21,969 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:21,971 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:21,972 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:21,974 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:21,975 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:21,977 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:35,646 - graphiti_core.graphiti - INFO - Completed add_episode in 40194.49591636658 ms
2025-10-29 13:17:35,646 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_0e5a9fb5_1761723845
2025-10-29 13:17:35,653 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:38,841 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:39,911 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:49,595 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:49,602 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:49,609 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:49,615 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:49,619 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:49,623 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:49,627 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:49,632 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:49,636 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:50,436 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:50,437 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:50,439 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:50,440 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:50,441 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:50,444 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:50,446 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:50,447 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:17:56,460 - graphiti_core.graphiti - INFO - Completed add_episode in 20813.09175491333 ms
2025-10-29 13:17:56,460 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_88107190_1761723845
2025-10-29 13:17:56,466 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:18:00,239 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:18:01,509 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:18:09,763 - interactive_multi_tenant_api - INFO - Shutting down Multi-Tenant RAG API...
2025-10-29 13:20:27,029 - __main__ - INFO - Starting Interactive Multi-Tenant RAG API on 127.0.0.1:8000
2025-10-29 13:20:27,057 - interactive_multi_tenant_api - INFO - Starting Multi-Tenant RAG API...
2025-10-29 13:20:27,057 - interactive_multi_tenant_api - INFO - Neo4j URI: neo4j://127.0.0.1:7687
2025-10-29 13:20:27,057 - interactive_multi_tenant_api - INFO - Neo4j User: neo4j
2025-10-29 13:20:27,057 - interactive_multi_tenant_api - INFO - Neo4j Password: ***
2025-10-29 13:20:27,057 - tenant_manager - INFO - TenantManager initialized with Graphiti client
2025-10-29 13:20:27,057 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-10-29 13:20:27,057 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-10-29 13:20:27,057 - multi_tenant_ingestion - INFO - Multi-tenant ingestion pipeline initialized
2025-10-29 13:20:27,057 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-10-29 13:20:27,057 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-10-29 13:20:27,057 - interactive_multi_tenant_api - INFO - Tenant manager initialized
2025-10-29 13:20:27,061 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-10-29 13:20:27,061 - interactive_multi_tenant_api - INFO - Tenant ingestion service initialized
2025-10-29 13:20:27,061 - auth_middleware - INFO - JWT Authenticator initialized
2025-10-29 13:20:27,061 - interactive_multi_tenant_api - INFO - JWT authenticator initialized
2025-10-29 13:20:27,061 - interactive_multi_tenant_api - INFO - 🎯 Multi-Tenant RAG API ready - all backend logs will appear in this terminal
2025-10-29 13:20:27,061 - interactive_multi_tenant_api - INFO - 📊 Backend activity from CLI and API operations will be shown below:
2025-10-29 13:20:46,811 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-10-29 13:20:47,006 - catalog_database - INFO - Catalog database connection test successful
2025-10-29 13:20:47,007 - tenant_graphiti_client - INFO - Applied Graphiti performance optimizations for production reliability
2025-10-29 13:20:47,007 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 13:20:47,053 - robust_gemini_client - INFO - RobustGeminiClient initialized with temperature=0.0 for deterministic JSON output
2025-10-29 13:20:47,053 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 13:20:47,078 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 13:20:47,141 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_uuid IF NOT EXISTS FOR (e:Entity) ON (e.uuid)` has no effect.} {description: `RANGE INDEX entity_uuid FOR (e:Entity) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX entity_uuid IF NOT EXISTS FOR (n:Entity) ON (n.uuid)'
2025-10-29 13:20:47,144 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_uuid IF NOT EXISTS FOR (e:Episodic) ON (e.uuid)` has no effect.} {description: `RANGE INDEX episode_uuid FOR (e:Episodic) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX episode_uuid IF NOT EXISTS FOR (n:Episodic) ON (n.uuid)'
2025-10-29 13:20:47,145 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX community_uuid IF NOT EXISTS FOR (e:Community) ON (e.uuid)` has no effect.} {description: `RANGE INDEX community_uuid FOR (e:Community) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX community_uuid IF NOT EXISTS FOR (n:Community) ON (n.uuid)'
2025-10-29 13:20:47,146 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX mention_uuid FOR ()-[e:MENTIONS]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)'
2025-10-29 13:20:47,146 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)'
2025-10-29 13:20:47,147 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX relation_uuid FOR ()-[e:RELATES_TO]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)'
2025-10-29 13:20:47,149 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX has_member_uuid FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)'
2025-10-29 13:20:47,150 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX relation_group_id FOR ()-[e:RELATES_TO]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)'
2025-10-29 13:20:47,151 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_group_id IF NOT EXISTS FOR (e:Episodic) ON (e.group_id)` has no effect.} {description: `RANGE INDEX episode_group_id FOR (e:Episodic) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX episode_group_id IF NOT EXISTS FOR (n:Episodic) ON (n.group_id)'
2025-10-29 13:20:47,151 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_group_id IF NOT EXISTS FOR (e:Entity) ON (e.group_id)` has no effect.} {description: `RANGE INDEX entity_group_id FOR (e:Entity) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX entity_group_id IF NOT EXISTS FOR (n:Entity) ON (n.group_id)'
2025-10-29 13:20:47,151 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX episode_content IF NOT EXISTS FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` has no effect.} {description: `FULLTEXT INDEX episode_content FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX episode_content IF NOT EXISTS \n            FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]'
2025-10-29 13:20:47,154 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX mention_group_id FOR ()-[e:MENTIONS]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)'
2025-10-29 13:20:47,155 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` has no effect.} {description: `FULLTEXT INDEX node_name_and_summary FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS \n            FOR (n:Entity) ON EACH [n.name, n.summary, n.group_id]'
2025-10-29 13:20:47,155 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_entity_index FOR (e:Entity) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.created_at)'
2025-10-29 13:20:47,155 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.name)` has no effect.} {description: `RANGE INDEX name_entity_index FOR (e:Entity) ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.name)'
2025-10-29 13:20:47,157 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX community_name IF NOT EXISTS FOR (e:Community) ON EACH [e.name, e.group_id]` has no effect.} {description: `FULLTEXT INDEX community_name FOR (e:Community) ON EACH [e.name, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX community_name IF NOT EXISTS \n            FOR (n:Community) ON EACH [n.name, n.group_id]'
2025-10-29 13:20:47,157 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_episodic_index FOR (e:Episodic) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.created_at)'
2025-10-29 13:20:47,157 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_episodic_index FOR (e:Episodic) ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.valid_at)'
2025-10-29 13:20:47,158 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)` has no effect.} {description: `RANGE INDEX name_edge_index FOR ()-[e:RELATES_TO]-() ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)'
2025-10-29 13:20:47,158 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` has no effect.} {description: `FULLTEXT INDEX edge_name_and_fact FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS \n            FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]'
2025-10-29 13:20:47,159 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` has no effect.} {description: `RANGE INDEX expired_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` already exists.} {position: None} for query: 'CREATE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)'
2025-10-29 13:20:47,160 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)'
2025-10-29 13:20:47,160 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` has no effect.} {description: `RANGE INDEX invalid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` already exists.} {position: None} for query: 'CREATE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)'
2025-10-29 13:20:47,161 - graphiti_ingestion_manager - INFO - GraphitiIngestionManager initialized for reliable episode ingestion
2025-10-29 13:20:47,161 - tenant_graphiti_client - INFO - TenantGraphitiClient initialized successfully with robust LLM: gemini-2.0-flash-thinking-exp-01-21
2025-10-29 13:20:47,161 - tenant_graphiti_client - INFO - ✅ Knowledge graph ingestion is now deterministic and reliable
2025-10-29 13:20:56,279 - auth_middleware - INFO - Created access token for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80
2025-10-29 13:21:14,901 - interactive_multi_tenant_api - INFO - Document upload for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: README.md -> vector database + knowledge graph
2025-10-29 13:21:14,902 - tenant_data_ingestion_service - INFO - Starting document ingestion for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: README.md
2025-10-29 13:21:14,902 - tenant_data_ingestion_service - INFO - Ingestion options: vector database + knowledge graph
2025-10-29 13:21:17,822 - tenant_data_ingestion_service - INFO - Creating chunks for document: README.md
2025-10-29 13:21:17,838 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 13:21:17,871 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:21:43,534 - tenant_data_ingestion_service - INFO - Generating embeddings for 32 chunks
2025-10-29 13:21:43,535 - ingestion.embedder - INFO - Generating embeddings for 32 chunks
2025-10-29 13:21:45,344 - ingestion.embedder - INFO - Processed batch 1/1
2025-10-29 13:21:45,344 - ingestion.embedder - INFO - Generated embeddings for 32 chunks (model: embedding-001, dimensions: 768)
2025-10-29 13:21:56,035 - tenant_data_ingestion_service - INFO - Created 32 chunks for document 0f495ab6-bf3f-42ae-93a2-bb6a169d5c2d (32 with valid embeddings, 0 without)
2025-10-29 13:21:56,253 - tenant_data_ingestion_service - INFO - Vector ingestion: Created 32 chunks with embeddings
2025-10-29 13:21:56,264 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 13:21:56,304 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:22:20,380 - tenant_data_ingestion_service - INFO - Adding 30 chunks to tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80 graph namespace: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80
2025-10-29 13:22:20,382 - tenant_graphiti_client - INFO - 🚀 Starting production KG ingestion for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: 30 chunks from 'README.md'
2025-10-29 13:22:20,382 - graphiti_ingestion_manager - INFO - Starting KG ingestion for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: 30 chunks from document 'README.md'
2025-10-29 13:22:20,401 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:22:24,119 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:22:25,537 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:22:39,581 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:22:39,586 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:22:39,589 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:22:39,593 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:22:39,596 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:22:39,599 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:22:39,602 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:22:39,606 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:22:40,720 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:22:40,722 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:22:40,723 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:22:40,725 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:22:40,726 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:22:40,728 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:22:40,730 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:22:40,733 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:22:40,735 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:22:40,736 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:22:40,739 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:22:42,357 - graphiti_ingestion_manager - ERROR - Failed to ingest episode tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_eafd0e8e_1761724340: list index out of range (body preview: Document: README.md
Section 1:
Multi-Tenant RAG System with Interactive CLI & FastAPI
Overview
A pro...)
2025-10-29 13:22:42,358 - graphiti_ingestion_manager - ERROR - ❌ Episode ingest failed for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80 chunk_id=eafd0e8e-bb30-4541-b483-484441cd0a30: list index out of range
2025-10-29 13:22:42,370 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:22:45,933 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:22:47,568 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:22:59,869 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:22:59,877 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:22:59,883 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:22:59,889 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:22:59,893 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:22:59,898 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:22:59,901 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:22:59,906 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:22:59,910 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:22:59,914 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:23:01,368 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:23:01,369 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:23:01,371 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:23:01,372 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:23:01,375 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:23:15,934 - graphiti_core.graphiti - INFO - Completed add_episode in 33575.51598548889 ms
2025-10-29 13:23:15,934 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_76fde861_1761724340
2025-10-29 13:23:15,940 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:23:20,236 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:23:21,863 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:23:52,891 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:23:52,899 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:23:52,904 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:23:52,909 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:23:52,913 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:23:52,919 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:23:52,923 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:23:52,927 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:23:52,929 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:23:52,932 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:23:52,936 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:23:52,939 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:23:52,942 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:23:52,945 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:23:52,948 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:23:54,209 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:23:54,210 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:23:54,212 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:23:54,213 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:23:54,215 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:23:54,217 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:23:54,218 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:23:54,221 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:23:54,223 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:23:54,225 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:23:54,227 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:23:54,228 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:19,184 - graphiti_core.graphiti - INFO - Completed add_episode in 63249.60279464722 ms
2025-10-29 13:24:19,185 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_dbe4fe51_1761724340
2025-10-29 13:24:19,189 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:23,623 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:25,417 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:36,506 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:36,513 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:36,519 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:36,524 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:36,527 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:36,530 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:36,533 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:36,535 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:36,538 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:36,541 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:36,544 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:36,547 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:36,551 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:36,554 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:36,557 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:36,560 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:36,563 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:38,635 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:38,637 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:38,638 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:38,640 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:38,641 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:38,643 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:38,645 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:38,647 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:38,648 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:38,650 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:38,652 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:38,653 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:38,655 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:38,657 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:38,761 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-10-29 13:24:38,762 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Document: temporal_rag_test_story.md\\nSection 1:\\nTemporal Knowledge Story for RAG Testing\\nStory: The Life and Choices of Aanya Sharma (2023-2025)\\nDecember 2023\\nAanya Sharma is a product manager at Zyphos Tech, living in Bangalore.\\nShe prefers Android phones. Her favorite phone is the OnePlus 11R.\\nShe is using Notion as her preferred note-taking app.\\nShe uses Slack for team collaboration.\\nHer favorite coffee shop is Third Wave Coffee, Indiranagar.\\nFebruary 2024\\nAanya moves to Hyderabad for a project.\\nShe discovers and starts preferring Samsung Galaxy Z Fold 5 over OnePlus.\\nShe starts using Obsidian instead of Notion due to better knowledge graphing.\\nHer favorite caf becomes Roastery Coffee House in Hyderabad.\\n-\",\n  \"Document: temporal_rag_test_story.md\\nSection 2:\\nSlack is replaced by Microsoft Teams in her organization.\\nJune 2024\\nAanya buys an iPhone 15 Pro Max after being influenced by her designer friends.\\nShe now prefers Apple devices.\\nShe starts using Apple Notes.\\nShe still uses Microsoft Teams.\\nHer favorite coffee shop is now Starbucks, Banjara Hills.\\nSeptember 2024\\nAanya is promoted to Director of Product.\\nShe starts managing two teams:\\nProduct Team A: Working on internal tools.\\nProduct Team B: Working on mobile consumer app.\\nProduct Team A uses Jira, while Team B uses Linear.\\nShe uses Miro heavily for brainstorming and workshops.\\nShe starts splitting her time between Hyderabad and Mumbai.\\n-\",\n  \"Document: temporal_rag_test_story.md\\nSection 3:\\nHer Mumbai go-to place is Blue Tokai, Bandra.\\nJanuary 2025\\nAanya switches to Pixel 9 Pro as she becomes interested in AI-first devices.\\nApple is no longer her preferred brand-she now leans toward Googles ecosystem.\\nShe moves fully to Hyderabad.\\nShe now prefers Trello for personal projects, while her teams still use Jira and Linear.\\nShe mentors a group of interns, one of whom, Rahul Mehta, prefers One UI over Pixel UI.\\nJuly 2025\\nAanya joins Cerebro AI as Chief Product Officer.\\nShe now oversees:\\nInfra Team (uses Jira)\\nML Research Team (uses GitHub Projects)\\nAI Product Team (uses Notion again)\\nShe reverts to iPhone 16 due to better integration with her Mac.\\n-\",\n  \"Document: temporal_rag_test_story.md\\nSection 4:\\nHer preferred coffee shop is now Sonder Coffee, HSR Layout when shes in Bangalore for board meetings.\\n---\",\n  \"Document: README.md\\nSection 2:\\nDual Interface: FastAPI server + Interactive CLI client\\nAI-Powered: Enhanced Pydantic AI agent with 10+ tenant-aware tools\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search\\nJWT Authentication: Secure tenant context with middleware validation\\nProduction Ready: Supervisor process management + Nginx reverse proxy\\nAWS EC2 Optimized: Complete deployment guides for cloud infrastructure\\nFully Tested: Comprehensive verification and testing scripts\\nLive Integration: Real-time Neon PostgreSQL + Neo4j Desktop connectivity\\n Architecture\",\n  \"Document: README.md\\nSection 3:\\nAmazon EC2 / Local Deployment \\n \\n  FastAPI + Interactive CLI Stack \\n    \\n   FastAPI   Interactive CLI  \\n   Multi-Tenant  HTTP Client  \\n   API Server   (Rich Console)  \\n   (Port 8000)    \\n    \\n   \\n   Enhanced Pydantic AI Agent  \\n    Multi-Modal Search  Tenant Context Injection  \\n    10+ AI Tools  Graph + Vector Integration  \\n    JWT Authentication  Intelligent Tool Routing\",\n  \"Document: README.md\\nSection 4:\\nNeon PostgreSQL   Neo4j Desktop \\n (Cloud)   (Local/Remote) \\n  Project-per-Tenant    Graphiti Integration \\n  Vector Search (pgvector)    Namespace Isolation \\n  Hybrid Search (BM25)    Group ID Separation \\n  Catalog Database    Knowledge Graph \\n  Complete Isolation    Entity Relationships\",\n  \"Document: README.md\\nSection 5:\\nFile Structure\\n```\\nTenant/\\n README.md This comprehensive guide\\n requirements.txt Python dependencies\\n requirementsec2complete.txt Complete EC2 deployment dependencies\\n .env Environment configuration (create from template)\\n\\nCore Application Files\",\n  \"Document: README.md\\nSection 2:\\nDual Interface: FastAPI server + Interactive CLI client\\nAI-Powered: Enhanced Pydantic AI agent with 10+ tenant-aware tools\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search\\nJWT Authentication: Secure tenant context with middleware validation\\nProduction Ready: Supervisor process management + Nginx reverse proxy\\nAWS EC2 Optimized: Complete deployment guides for cloud infrastructure\\nFully Tested: Comprehensive verification and testing scripts\\nLive Integration: Real-time Neon PostgreSQL + Neo4j Desktop connectivity\\n Architecture\",\n  \"Document: README.md\\nSection 3:\\nAmazon EC2 / Local Deployment \\n \\n  FastAPI + Interactive CLI Stack \\n    \\n   FastAPI   Interactive CLI  \\n   Multi-Tenant  HTTP Client  \\n   API Server   (Rich Console)  \\n   (Port 8000)    \\n    \\n   \\n   Enhanced Pydantic AI Agent  \\n    Multi-Modal Search  Tenant Context Injection  \\n    10+ AI Tools  Graph + Vector Integration  \\n    JWT Authentication  Intelligent Tool Routing\"\n]\n        \"Document: README.md\\nSection 4:\\nNeon PostgreSQL   Neo4j Desktop \\n (Cloud)   (Local/Remote) \\n  Project-per-Tenant    Graphiti Integration \\n  Vector Search (pgvector)    Namespace Isolation \\n  Hybrid Search (BM25)    Group ID Separation \\n  Catalog Database    Knowledge Graph \\n  Complete Isolation    Entity Relationships\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'README.md', 'summary': 'This document outlines a production-ready, multi-tenant Retrieval-Augmented Generation (RAG) system with complete data isolation, featuring both a FastAPI server and an interactive CLI client. It leverages Neon PostgreSQL with pgvector for vector/hybrid search and Neo4j with Graphiti for knowledge graph capabilities, ensuring project-per-tenant database isolation and namespace-based graph isolation. Key features include a comprehensive Pydantic AI agent with over 10 tenant-aware tools and intelligent routing, multi-modal search (vector, graph, hybrid, comprehensive), and JWT authentication for secure tenant context. The system is production-ready, optimized for AWS EC2, and includes Supervisor and Nginx for reliability. Core components include TenantManager for project management and database routing, TenantDataIngestionService for multi-modal search, TenantGraphitiClient for knowledge graph operations, and MultiTenantRAGAgent for enhanced AI interactions. Security is maintained through JWT authentication and context injection, with multiple layers of isolation validation. The system supports comprehensive search, hybrid search, and interactive chat functionalities via its API. The CLI client allows users to authenticate, upload documents, and engage in chat sessions. Deployment guides for AWS EC2 and local setups are provided. The file structure includes core application files and configuration files like .env and requirements.txt. The system also features dual storage, context preservation, and intelligent tool selection based on query complexity. The FastAPI application (interactivemultitenant_api.py) supports tenant-aware routing, comprehensive endpoints with authentication and documentation, and real-time processing with async operations and connection pooling. It also includes health checks, monitoring, and error handling for production readiness.', 'entity_types': ['Entity'], 'attributes': {'labels': ['Entity']}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{"properties": {"summary": "This document outlines a production-ready, multi-tenant Retrieval-Augmented Generation (RAG) system with complete data isolation, featuring both a FastAPI server and an interactive CLI client. It leverages Neon PostgreSQL with pgvector for vector/hybrid search and Neo4j with Graphiti for knowledge graph capabilities, ensuring project-per-tenant database isolation and namespace-based graph isolation. Key features include a comprehensive Pydantic AI agent with over 10 tenant-aware tools and intelligent routing, multi-modal search (vector, graph, hybrid, comprehensive), and JWT authentication for secure tenant context. The system is production-ready, optimized for AWS EC2, and includes Supervisor and Nginx for reliability. Core components include TenantManager for project management and database routing, TenantDataIngestionService for multi-modal search, TenantGraphitiClient for knowledge graph operations, and MultiTenantRAGAgent for enhanced AI interactions. Security is maintained through JWT authentication and context injection, with multiple layers of isolation validation. The system supports comprehensive search, hybrid search, and interactive chat functionalities via its API. The CLI client allows users to authenticate, upload documents, and engage in chat sessions. Deployment guides for AWS EC2 and local setups are provided. The file structure includes core application files and configuration files like .env and requirements.txt. The system also features dual storage, context preservation, and intelligent tool selection based on query complexity. The FastAPI application (interactivemultitenant_api.py) supports tenant-aware routing, comprehensive endpoints with authentication and documentation, and real-time processing with async operations and connection pooling. It also includes health checks, monitoring, and error handling for production readiness."}}
```

2025-10-29 13:24:38,762 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-10-29 13:24:38,762 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-10-29 13:24:38,763 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:24:39,547 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-10-29 13:24:39,547 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Document: temporal_rag_test_story.md\\nSection 1:\\nTemporal Knowledge Story for RAG Testing\\nStory: The Life and Choices of Aanya Sharma (2023-2025)\\nDecember 2023\\nAanya Sharma is a product manager at Zyphos Tech, living in Bangalore.\\nShe prefers Android phones. Her favorite phone is the OnePlus 11R.\\nShe is using Notion as her preferred note-taking app.\\nShe uses Slack for team collaboration.\\nHer favorite coffee shop is Third Wave Coffee, Indiranagar.\\nFebruary 2024\\nAanya moves to Hyderabad for a project.\\nShe discovers and starts preferring Samsung Galaxy Z Fold 5 over OnePlus.\\nShe starts using Obsidian instead of Notion due to better knowledge graphing.\\nHer favorite caf becomes Roastery Coffee House in Hyderabad.\\n-\",\n  \"Document: temporal_rag_test_story.md\\nSection 2:\\nSlack is replaced by Microsoft Teams in her organization.\\nJune 2024\\nAanya buys an iPhone 15 Pro Max after being influenced by her designer friends.\\nShe now prefers Apple devices.\\nShe starts using Apple Notes.\\nShe still uses Microsoft Teams.\\nHer favorite coffee shop is now Starbucks, Banjara Hills.\\nSeptember 2024\\nAanya is promoted to Director of Product.\\nShe starts managing two teams:\\nProduct Team A: Working on internal tools.\\nProduct Team B: Working on mobile consumer app.\\nProduct Team A uses Jira, while Team B uses Linear.\\nShe uses Miro heavily for brainstorming and workshops.\\nShe starts splitting her time between Hyderabad and Mumbai.\\n-\",\n  \"Document: temporal_rag_test_story.md\\nSection 3:\\nHer Mumbai go-to place is Blue Tokai, Bandra.\\nJanuary 2025\\nAanya switches to Pixel 9 Pro as she becomes interested in AI-first devices.\\nApple is no longer her preferred brand-she now leans toward Googles ecosystem.\\nShe moves fully to Hyderabad.\\nShe now prefers Trello for personal projects, while her teams still use Jira and Linear.\\nShe mentors a group of interns, one of whom, Rahul Mehta, prefers One UI over Pixel UI.\\nJuly 2025\\nAanya joins Cerebro AI as Chief Product Officer.\\nShe now oversees:\\nInfra Team (uses Jira)\\nML Research Team (uses GitHub Projects)\\nAI Product Team (uses Notion again)\\nShe reverts to iPhone 16 due to better integration with her Mac.\\n-\",\n  \"Document: temporal_rag_test_story.md\\nSection 4:\\nHer preferred coffee shop is now Sonder Coffee, HSR Layout when shes in Bangalore for board meetings.\\n---\",\n  \"Document: README.md\\nSection 2:\\nDual Interface: FastAPI server + Interactive CLI client\\nAI-Powered: Enhanced Pydantic AI agent with 10+ tenant-aware tools\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search\\nJWT Authentication: Secure tenant context with middleware validation\\nProduction Ready: Supervisor process management + Nginx reverse proxy\\nAWS EC2 Optimized: Complete deployment guides for cloud infrastructure\\nFully Tested: Comprehensive verification and testing scripts\\nLive Integration: Real-time Neon PostgreSQL + Neo4j Desktop connectivity\\n Architecture\",\n  \"Document: README.md\\nSection 3:\\nAmazon EC2 / Local Deployment \\n \\n  FastAPI + Interactive CLI Stack \\n    \\n   FastAPI   Interactive CLI  \\n   Multi-Tenant  HTTP Client  \\n   API Server   (Rich Console)  \\n   (Port 8000)    \\n    \\n   \\n   Enhanced Pydantic AI Agent  \\n    Multi-Modal Search  Tenant Context Injection  \\n    10+ AI Tools  Graph + Vector Integration  \\n    JWT Authentication  Intelligent Tool Routing\",\n  \"Document: README.md\\nSection 4:\\nNeon PostgreSQL   Neo4j Desktop \\n (Cloud)   (Local/Remote) \\n  Project-per-Tenant    Graphiti Integration \\n  Vector Search (pgvector)    Namespace Isolation \\n  Hybrid Search (BM25)    Group ID Separation \\n  Catalog Database    Knowledge Graph \\n  Complete Isolation    Entity Relationships\",\n  \"Document: README.md\\nSection 5:\\nFile Structure\\n```\\nTenant/\\n README.md This comprehensive guide\\n requirements.txt Python dependencies\\n requirementsec2complete.txt Complete EC2 deployment dependencies\\n .env Environment configuration (create from template)\\n\\nCore Application Files\",\n  \"Document: README.md\\nSection 2:\\nDual Interface: FastAPI server + Interactive CLI client\\nAI-Powered: Enhanced Pydantic AI agent with 10+ tenant-aware tools\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search\\nJWT Authentication: Secure tenant context with middleware validation\\nProduction Ready: Supervisor process management + Nginx reverse proxy\\nAWS EC2 Optimized: Complete deployment guides for cloud infrastructure\\nFully Tested: Comprehensive verification and testing scripts\\nLive Integration: Real-time Neon PostgreSQL + Neo4j Desktop connectivity\\n Architecture\",\n  \"Document: README.md\\nSection 3:\\nAmazon EC2 / Local Deployment \\n \\n  FastAPI + Interactive CLI Stack \\n    \\n   FastAPI   Interactive CLI  \\n   Multi-Tenant  HTTP Client  \\n   API Server   (Rich Console)  \\n   (Port 8000)    \\n    \\n   \\n   Enhanced Pydantic AI Agent  \\n    Multi-Modal Search  Tenant Context Injection  \\n    10+ AI Tools  Graph + Vector Integration  \\n    JWT Authentication  Intelligent Tool Routing\"\n]\n        \"Document: README.md\\nSection 4:\\nNeon PostgreSQL   Neo4j Desktop \\n (Cloud)   (Local/Remote) \\n  Project-per-Tenant    Graphiti Integration \\n  Vector Search (pgvector)    Namespace Isolation \\n  Hybrid Search (BM25)    Group ID Separation \\n  Catalog Database    Knowledge Graph \\n  Complete Isolation    Entity Relationships\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'Project-per-Tenant', 'summary': 'The Project-per-Tenant approach is a core feature of a multi-tenant RAG system, ensuring complete data isolation by dedicating a separate database for each tenant. This method aligns with best practices from Neon and Graphiti. Data isolation is further enhanced in the knowledge graph through namespace separation. The system offers both a FastAPI server and an interactive CLI client, powered by an AI agent with intelligent tool routing. It supports multi-modal search (vector, graph, hybrid) and uses JWT authentication for secure tenant context. The system is production-ready and optimized for AWS EC2 deployment, with comprehensive guides and scripts available. It integrates Neon PostgreSQL for vector/hybrid search and Neo4j for knowledge graph capabilities, with project-per-tenant database isolation and namespace-based graph isolation. The setup involves creating a virtual environment, installing dependencies, and configuring environment variables for Neon PostgreSQL, Neo4j, JWT, AI providers, and application settings. The system can be started directly or using provided scripts, and its installation can be verified via API health checks and deployment verification scripts. Usage examples include creating tenants, obtaining authentication tokens, uploading documents, and performing various types of searches (vector, graph, hybrid, comprehensive) and interactive chat sessions. The system also includes features like rate limiting, caching strategies, horizontal scaling, database read replicas, Redis caching, Kubernetes deployment, and custom tenant limits for tenants. The TenantDataIngestionService supports multi-modal search including vector, graph, and hybrid search. The TenantGraphitiClient ensures namespace isolation and knowledge graph capabilities. The MultiTenantRAGAgent provides enhanced Pydantic AI with tenant context injection and intelligent routing. The Authentication & Security component uses JWT authentication and context injection for security. The Interactive CLI and FastAPI Application offer dual interfaces for interaction and API access.', 'entity_types': ['Entity'], 'attributes': {'labels': ['Entity']}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{
  "summary": "The Project-per-Tenant approach is a key feature of a multi-tenant RAG system, providing complete data isolation by assigning a dedicated database to each tenant. This strategy is consistent with Neon and Graphiti best practices. Data isolation in the knowledge graph is further strengthened through namespace separation. The system features a dual interface with a FastAPI server and an interactive CLI client, driven by an AI agent with intelligent tool routing. It supports multi-modal search (vector, graph, hybrid) and utilizes JWT authentication for secure tenant context. The system is production-ready and optimized for AWS EC2 deployment, offering detailed guides and scripts. It integrates Neon PostgreSQL for vector/hybrid search and Neo4j for knowledge graph functionalities, with project-per-tenant database isolation and namespace-based graph isolation. The setup involves creating a virtual environment, installing dependencies, and configuring environment variables for Neon PostgreSQL, Neo4j, JWT, AI providers, and application settings. The system can be initiated directly or via provided scripts, and its installation can be verified through API health checks and deployment verification scripts. Usage examples include tenant creation, obtaining authentication tokens, document uploads, and performing various searches (vector, graph, hybrid, comprehensive) and interactive chat sessions. The system also includes features like rate limiting, caching strategies, horizontal scaling, database read replicas, Redis caching, Kubernetes deployment, and custom tenant limits. The TenantDataIngestionService supports multi-modal search, including vector, graph, and hybrid search. The TenantGraphitiClient ensures namespace isolation and knowledge graph capabilities. The MultiTenantRAGAgent offers enhanced Pydantic AI with tenant context injection and intelligent routing. The Authentication & Security component uses JWT authentication and context injection for security. The Interactive CLI and FastAPI Application provide dual interfaces for interaction and API access."
}
```

2025-10-29 13:24:39,548 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-10-29 13:24:39,548 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-10-29 13:24:39,550 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:25:05,458 - graphiti_core.graphiti - INFO - Completed add_episode in 46273.24914932251 ms
2025-10-29 13:25:05,459 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_e0cd8693_1761724340
2025-10-29 13:25:05,469 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:25:09,731 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:25:11,165 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:25:34,791 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:25:34,798 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:25:34,804 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:25:34,809 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:25:34,814 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:25:34,818 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:25:34,822 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:25:34,826 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:25:34,829 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:25:36,117 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:25:36,118 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:25:36,120 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:25:36,121 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:25:36,123 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:25:36,125 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:25:36,127 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:25:36,129 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:25:36,131 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:25:36,133 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:25:36,134 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:25:49,951 - graphiti_core.graphiti - INFO - Completed add_episode in 44492.09713935852 ms
2025-10-29 13:25:49,952 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_9f950f3f_1761724340
2025-10-29 13:25:49,957 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:25:53,818 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:25:55,484 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:26:14,758 - interactive_multi_tenant_api - INFO - Shutting down Multi-Tenant RAG API...
2025-10-29 13:31:00,305 - __main__ - INFO - Starting Interactive Multi-Tenant RAG API on 127.0.0.1:8000
2025-10-29 13:31:00,327 - interactive_multi_tenant_api - INFO - Starting Multi-Tenant RAG API...
2025-10-29 13:31:00,327 - interactive_multi_tenant_api - INFO - Neo4j URI: neo4j://127.0.0.1:7687
2025-10-29 13:31:00,327 - interactive_multi_tenant_api - INFO - Neo4j User: neo4j
2025-10-29 13:31:00,327 - interactive_multi_tenant_api - INFO - Neo4j Password: ***
2025-10-29 13:31:00,327 - tenant_manager - INFO - TenantManager initialized with Graphiti client
2025-10-29 13:31:00,327 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-10-29 13:31:00,327 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-10-29 13:31:00,327 - multi_tenant_ingestion - INFO - Multi-tenant ingestion pipeline initialized
2025-10-29 13:31:00,327 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-10-29 13:31:00,327 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-10-29 13:31:00,327 - interactive_multi_tenant_api - INFO - Tenant manager initialized
2025-10-29 13:31:00,331 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-10-29 13:31:00,331 - interactive_multi_tenant_api - INFO - Tenant ingestion service initialized
2025-10-29 13:31:00,332 - auth_middleware - INFO - JWT Authenticator initialized
2025-10-29 13:31:00,332 - interactive_multi_tenant_api - INFO - JWT authenticator initialized
2025-10-29 13:31:00,332 - interactive_multi_tenant_api - INFO - 🎯 Multi-Tenant RAG API ready - all backend logs will appear in this terminal
2025-10-29 13:31:00,332 - interactive_multi_tenant_api - INFO - 📊 Backend activity from CLI and API operations will be shown below:
2025-10-29 13:31:07,190 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-10-29 13:31:07,390 - catalog_database - INFO - Catalog database connection test successful
2025-10-29 13:31:07,390 - tenant_graphiti_client - INFO - Applied Graphiti performance optimizations for production reliability
2025-10-29 13:31:07,390 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 13:31:07,421 - robust_gemini_client - INFO - RobustGeminiClient initialized with temperature=0.0 for deterministic JSON output
2025-10-29 13:31:07,421 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 13:31:07,442 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 13:31:07,520 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_uuid IF NOT EXISTS FOR (e:Episodic) ON (e.uuid)` has no effect.} {description: `RANGE INDEX episode_uuid FOR (e:Episodic) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX episode_uuid IF NOT EXISTS FOR (n:Episodic) ON (n.uuid)'
2025-10-29 13:31:07,520 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX community_uuid IF NOT EXISTS FOR (e:Community) ON (e.uuid)` has no effect.} {description: `RANGE INDEX community_uuid FOR (e:Community) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX community_uuid IF NOT EXISTS FOR (n:Community) ON (n.uuid)'
2025-10-29 13:31:07,524 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_uuid IF NOT EXISTS FOR (e:Entity) ON (e.uuid)` has no effect.} {description: `RANGE INDEX entity_uuid FOR (e:Entity) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX entity_uuid IF NOT EXISTS FOR (n:Entity) ON (n.uuid)'
2025-10-29 13:31:07,526 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX relation_uuid FOR ()-[e:RELATES_TO]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)'
2025-10-29 13:31:07,526 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX has_member_uuid FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)'
2025-10-29 13:31:07,527 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_group_id IF NOT EXISTS FOR (e:Episodic) ON (e.group_id)` has no effect.} {description: `RANGE INDEX episode_group_id FOR (e:Episodic) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX episode_group_id IF NOT EXISTS FOR (n:Episodic) ON (n.group_id)'
2025-10-29 13:31:07,529 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_group_id IF NOT EXISTS FOR (e:Entity) ON (e.group_id)` has no effect.} {description: `RANGE INDEX entity_group_id FOR (e:Entity) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX entity_group_id IF NOT EXISTS FOR (n:Entity) ON (n.group_id)'
2025-10-29 13:31:07,530 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX mention_uuid FOR ()-[e:MENTIONS]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)'
2025-10-29 13:31:07,532 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX relation_group_id FOR ()-[e:RELATES_TO]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)'
2025-10-29 13:31:07,533 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` has no effect.} {description: `FULLTEXT INDEX node_name_and_summary FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS \n            FOR (n:Entity) ON EACH [n.name, n.summary, n.group_id]'
2025-10-29 13:31:07,533 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX mention_group_id FOR ()-[e:MENTIONS]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)'
2025-10-29 13:31:07,534 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.name)` has no effect.} {description: `RANGE INDEX name_entity_index FOR (e:Entity) ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.name)'
2025-10-29 13:31:07,534 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX community_name IF NOT EXISTS FOR (e:Community) ON EACH [e.name, e.group_id]` has no effect.} {description: `FULLTEXT INDEX community_name FOR (e:Community) ON EACH [e.name, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX community_name IF NOT EXISTS \n            FOR (n:Community) ON EACH [n.name, n.group_id]'
2025-10-29 13:31:07,535 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` has no effect.} {description: `FULLTEXT INDEX edge_name_and_fact FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS \n            FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]'
2025-10-29 13:31:07,536 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_episodic_index FOR (e:Episodic) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.created_at)'
2025-10-29 13:31:07,536 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_entity_index FOR (e:Entity) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.created_at)'
2025-10-29 13:31:07,537 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_episodic_index FOR (e:Episodic) ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.valid_at)'
2025-10-29 13:31:07,538 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)` has no effect.} {description: `RANGE INDEX name_edge_index FOR ()-[e:RELATES_TO]-() ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)'
2025-10-29 13:31:07,539 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)'
2025-10-29 13:31:07,540 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` has no effect.} {description: `RANGE INDEX expired_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` already exists.} {position: None} for query: 'CREATE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)'
2025-10-29 13:31:07,540 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)'
2025-10-29 13:31:07,540 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` has no effect.} {description: `RANGE INDEX invalid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` already exists.} {position: None} for query: 'CREATE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)'
2025-10-29 13:31:07,541 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX episode_content IF NOT EXISTS FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` has no effect.} {description: `FULLTEXT INDEX episode_content FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX episode_content IF NOT EXISTS \n            FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]'
2025-10-29 13:31:07,541 - graphiti_ingestion_manager - INFO - GraphitiIngestionManager initialized for reliable episode ingestion
2025-10-29 13:31:07,541 - tenant_graphiti_client - INFO - TenantGraphitiClient initialized successfully with robust LLM: gemini-2.0-flash-thinking-exp-01-21
2025-10-29 13:31:07,541 - tenant_graphiti_client - INFO - ✅ Knowledge graph ingestion is now deterministic and reliable
2025-10-29 13:31:23,787 - auth_middleware - INFO - Created access token for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80
2025-10-29 13:31:38,903 - interactive_multi_tenant_api - INFO - Document upload for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: README.md -> vector database + knowledge graph
2025-10-29 13:31:38,903 - tenant_data_ingestion_service - INFO - Starting document ingestion for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: README.md
2025-10-29 13:31:38,903 - tenant_data_ingestion_service - INFO - Ingestion options: vector database + knowledge graph
2025-10-29 13:31:42,015 - tenant_data_ingestion_service - INFO - Creating chunks for document: README.md
2025-10-29 13:31:42,024 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 13:31:42,044 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:32:01,546 - tenant_data_ingestion_service - INFO - Generating embeddings for 30 chunks
2025-10-29 13:32:01,547 - ingestion.embedder - INFO - Generating embeddings for 30 chunks
2025-10-29 13:32:04,016 - ingestion.embedder - INFO - Processed batch 1/1
2025-10-29 13:32:04,016 - ingestion.embedder - INFO - Generated embeddings for 30 chunks (model: embedding-001, dimensions: 768)
2025-10-29 13:32:15,976 - tenant_data_ingestion_service - INFO - Created 30 chunks for document 07c5cd45-d025-474e-9bc6-42bbd2b43dad (30 with valid embeddings, 0 without)
2025-10-29 13:32:16,279 - tenant_data_ingestion_service - INFO - Vector ingestion: Created 30 chunks with embeddings
2025-10-29 13:32:16,290 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 13:32:16,330 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:32:37,337 - tenant_data_ingestion_service - INFO - Adding 30 chunks to tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80 graph namespace: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80
2025-10-29 13:32:37,338 - tenant_graphiti_client - INFO - 🚀 Starting production KG ingestion for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: 30 chunks from 'README.md'
2025-10-29 13:32:37,338 - graphiti_ingestion_manager - INFO - Starting KG ingestion for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80: 30 chunks from document 'README.md'
2025-10-29 13:32:37,360 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:32:40,457 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:32:42,172 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:03,400 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:03,403 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:03,405 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:03,427 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:03,432 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:03,436 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:03,438 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:03,440 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:05,145 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:05,146 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:05,148 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:05,149 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:05,151 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:05,153 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:05,154 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:05,158 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:05,159 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:05,161 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:05,162 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:06,950 - graphiti_ingestion_manager - ERROR - Failed to ingest episode tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_83d7b487_1761724957: list index out of range (body preview: Document: README.md
Section 1:
Multi-Tenant RAG System with Interactive CLI & FastAPI
Overview
A pro...)
2025-10-29 13:33:06,950 - graphiti_ingestion_manager - ERROR - ❌ Episode ingest failed for tenant 94d13d8d-7199-4cfe-88b1-78edda8a0b80 chunk_id=83d7b487-c8a3-4660-b969-7722c3b56ad8: list index out of range
2025-10-29 13:33:06,963 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:10,868 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:12,376 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:25,104 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:25,111 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:25,116 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:25,122 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:25,127 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:25,131 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:25,135 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:25,139 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:25,143 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:25,146 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:26,653 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:26,655 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:26,657 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:39,182 - graphiti_core.graphiti - INFO - Completed add_episode in 32230.401039123535 ms
2025-10-29 13:33:39,182 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_a9821ef0_1761724957
2025-10-29 13:33:39,187 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:43,427 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:33:45,035 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:34:18,373 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:34:18,376 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:34:18,377 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:34:18,380 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:34:18,382 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:34:18,385 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:34:18,388 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:34:18,390 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:34:18,392 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:34:18,394 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:34:18,396 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:34:18,398 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:34:18,401 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:34:18,403 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:34:18,405 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:34:19,919 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:34:19,921 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:34:19,922 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:34:19,924 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:34:19,925 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:34:19,927 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:34:19,928 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:34:19,930 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:34:19,932 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:34:19,933 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:34:19,936 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:34:19,939 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:34:19,941 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:34:20,612 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-10-29 13:34:20,612 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Document: temporal_rag_test_story.md\\nSection 4:\\nHer preferred coffee shop is now Sonder Coffee, HSR Layout when shes in Bangalore for board meetings.\\n---\",\n  \"Document: README.md\\nSection 2:\\nDual Interface: FastAPI server + Interactive CLI client\\nAI-Powered: Enhanced Pydantic AI agent with 10+ tenant-aware tools\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search\\nJWT Authentication: Secure tenant context with middleware validation\\nProduction Ready: Supervisor process management + Nginx reverse proxy\\nAWS EC2 Optimized: Complete deployment guides for cloud infrastructure\\nFully Tested: Comprehensive verification and testing scripts\\nLive Integration: Real-time Neon PostgreSQL + Neo4j Desktop connectivity\\n Architecture\",\n  \"Document: README.md\\nSection 3:\\nAmazon EC2 / Local Deployment \\n \\n  FastAPI + Interactive CLI Stack \\n    \\n   FastAPI   Interactive CLI  \\n   Multi-Tenant  HTTP Client  \\n   API Server   (Rich Console)  \\n   (Port 8000)    \\n    \\n   \\n   Enhanced Pydantic AI Agent  \\n    Multi-Modal Search  Tenant Context Injection  \\n    10+ AI Tools  Graph + Vector Integration  \\n    JWT Authentication  Intelligent Tool Routing\",\n  \"Document: README.md\\nSection 4:\\nNeon PostgreSQL   Neo4j Desktop \\n (Cloud)   (Local/Remote) \\n  Project-per-Tenant    Graphiti Integration \\n  Vector Search (pgvector)    Namespace Isolation \\n  Hybrid Search (BM25)    Group ID Separation \\n  Catalog Database    Knowledge Graph \\n  Complete Isolation    Entity Relationships\",\n  \"Document: README.md\\nSection 5:\\nFile Structure\\n```\\nTenant/\\n README.md This comprehensive guide\\n requirements.txt Python dependencies\\n requirementsec2complete.txt Complete EC2 deployment dependencies\\n .env Environment configuration (create from template)\\n\\nCore Application Files\",\n  \"Document: README.md\\nSection 2:\\nDual Interface: FastAPI server + Interactive CLI client\\nAI-Powered: Enhanced Pydantic AI agent with 10+ tenant-aware tools\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search\\nJWT Authentication: Secure tenant context with middleware validation\\nProduction Ready: Supervisor process management + Nginx reverse proxy\\nAWS EC2 Optimized: Complete deployment guides for cloud infrastructure\\nFully Tested: Comprehensive verification and testing scripts\\nLive Integration: Real-time Neon PostgreSQL + Neo4j Desktop connectivity\\n Architecture\",\n  \"Document: README.md\\nSection 3:\\nAmazon EC2 / Local Deployment \\n \\n  FastAPI + Interactive CLI Stack \\n    \\n   FastAPI   Interactive CLI  \\n   Multi-Tenant  HTTP Client  \\n   API Server   (Rich Console)  \\n   (Port 8000)    \\n    \\n   \\n   Enhanced Pydantic AI Agent  \\n    Multi-Modal Search  Tenant Context Injection  \\n    10+ AI Tools  Graph + Vector Integration  \\n    JWT Authentication  Intelligent Tool Routing\",\n  \"Document: README.md\\nSection 4:\\nNeon PostgreSQL   Neo4j Desktop \\n (Cloud)   (Local/Remote) \\n  Project-per-Tenant    Graphiti Integration \\n  Vector Search (pgvector)    Namespace Isolation \\n  Hybrid Search (BM25)    Group ID Separation \\n  Catalog Database    Knowledge Graph \\n  Complete Isolation    Entity Relationships\",\n  \"Document: README.md\\nSection 5:\\nFile Structure\\n```\\nTenant/\\n README.md This comprehensive guide\\n requirements.txt Python dependencies\\n requirementsec2complete.txt Complete EC2 deployment dependencies\\n .env Environment configuration (create from template)\\n\\nCore Application Files\",\n  \"Document: README.md\\nSection 2:\\nDual Interface: FastAPI server + Interactive CLI client\\nAI-Powered: Enhanced Pydantic AI agent with 10+ tenant-aware tools\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search\\nJWT Authentication: Secure tenant context with middleware validation\\nProduction Ready: Supervisor process management + Nginx reverse proxy\\nAWS EC2 Optimized: Complete deployment guides for cloud infrastructure\\nFully Tested: Comprehensive verification and testing scripts\\nLive Integration: Real-time Neon PostgreSQL + Neo4j Desktop connectivity\\n Architecture\"\n]\n        \"Document: README.md\\nSection 3:\\nAmazon EC2 / Local Deployment \\n \\n  FastAPI + Interactive CLI Stack \\n    \\n   FastAPI   Interactive CLI  \\n   Multi-Tenant  HTTP Client  \\n   API Server   (Port 8000)  \\n   (Port 8000)    \\n    \\n   \\n   Enhanced Pydantic AI Agent  \\n    Multi-Modal Search  Tenant Context Injection  \\n    10+ AI Tools  Graph + Vector Integration  \\n    JWT Authentication  Intelligent Tool Routing\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'API Server', 'summary': 'The API Server is a core component of a production-ready, multi-tenant Retrieval-Augmented Generation (RAG) system, built with FastAPI and accessible via port 8000. It works in tandem with an interactive CLI client. The system utilizes Neon PostgreSQL with pgvector for vector and hybrid search, and Neo4j with Graphiti for knowledge graph operations. Tenant isolation is a key feature, achieved through a project-per-tenant database strategy and namespace-based graph isolation. Security is bolstered by JWT authentication and middleware for tenant context validation. It features an advanced Pydantic AI agent equipped with over 10 tenant-aware tools and supports multi-modal search capabilities (Vector, Graph, Hybrid, Comprehensive). The architecture is optimized for AWS EC2, including deployment guides, and incorporates production-ready elements like Supervisor process management and Nginx reverse proxy. Comprehensive testing scripts, real-time Neon PostgreSQL and Neo4j Desktop connectivity, and a rich CLI interface are also included. The system is designed for SaaS, enterprise applications, and multi-client AI systems requiring strict data separation and efficient shared infrastructure. Startup scripts like `./startapi.sh` are provided for the API server.', 'entity_types': ['Entity'], 'attributes': {'labels': ['Entity']}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{
  "summary": "The API Server is a core component of a production-ready, multi-tenant Retrieval-Augmented Generation (RAG) system, built with FastAPI and accessible via port 8000. It works in tandem with an interactive CLI client. The system utilizes Neon PostgreSQL with pgvector for vector and hybrid search, and Neo4j with Graphiti for knowledge graph operations. Tenant isolation is a key feature, achieved through a project-per-tenant database strategy and namespace-based graph isolation. Security is bolstered by JWT authentication and middleware for tenant context validation. It features an advanced Pydantic AI agent equipped with over 10 tenant-aware tools and supports multi-modal search capabilities (Vector, Graph, Hybrid, Comprehensive). The architecture is optimized for AWS EC2, including deployment guides, and incorporates production-ready elements like Supervisor process management and Nginx reverse proxy. Comprehensive testing scripts, real-time Neon PostgreSQL and Neo4j Desktop connectivity, and a rich CLI interface are also included. The system is designed for SaaS, enterprise applications, and multi-client AI systems requiring strict data separation and efficient shared infrastructure. Startup scripts like `./startapi.sh` are provided for the API server."
}
```

2025-10-29 13:34:20,612 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-10-29 13:34:20,612 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-10-29 13:34:20,613 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:34:20,699 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-10-29 13:34:20,699 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Document: temporal_rag_test_story.md\\nSection 4:\\nHer preferred coffee shop is now Sonder Coffee, HSR Layout when shes in Bangalore for board meetings.\\n---\",\n  \"Document: README.md\\nSection 2:\\nDual Interface: FastAPI server + Interactive CLI client\\nAI-Powered: Enhanced Pydantic AI agent with 10+ tenant-aware tools\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search\\nJWT Authentication: Secure tenant context with middleware validation\\nProduction Ready: Supervisor process management + Nginx reverse proxy\\nAWS EC2 Optimized: Complete deployment guides for cloud infrastructure\\nFully Tested: Comprehensive verification and testing scripts\\nLive Integration: Real-time Neon PostgreSQL + Neo4j Desktop connectivity\\n Architecture\",\n  \"Document: README.md\\nSection 3:\\nAmazon EC2 / Local Deployment \\n \\n  FastAPI + Interactive CLI Stack \\n    \\n   FastAPI   Interactive CLI  \\n   Multi-Tenant  HTTP Client  \\n   API Server   (Rich Console)  \\n   (Port 8000)    \\n    \\n   \\n   Enhanced Pydantic AI Agent  \\n    Multi-Modal Search  Tenant Context Injection  \\n    10+ AI Tools  Graph + Vector Integration  \\n    JWT Authentication  Intelligent Tool Routing\",\n  \"Document: README.md\\nSection 4:\\nNeon PostgreSQL   Neo4j Desktop \\n (Cloud)   (Local/Remote) \\n  Project-per-Tenant    Graphiti Integration \\n  Vector Search (pgvector)    Namespace Isolation \\n  Hybrid Search (BM25)    Group ID Separation \\n  Catalog Database    Knowledge Graph \\n  Complete Isolation    Entity Relationships\",\n  \"Document: README.md\\nSection 5:\\nFile Structure\\n```\\nTenant/\\n README.md This comprehensive guide\\n requirements.txt Python dependencies\\n requirementsec2complete.txt Complete EC2 deployment dependencies\\n .env Environment configuration (create from template)\\n\\nCore Application Files\",\n  \"Document: README.md\\nSection 2:\\nDual Interface: FastAPI server + Interactive CLI client\\nAI-Powered: Enhanced Pydantic AI agent with 10+ tenant-aware tools\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search\\nJWT Authentication: Secure tenant context with middleware validation\\nProduction Ready: Supervisor process management + Nginx reverse proxy\\nAWS EC2 Optimized: Complete deployment guides for cloud infrastructure\\nFully Tested: Comprehensive verification and testing scripts\\nLive Integration: Real-time Neon PostgreSQL + Neo4j Desktop connectivity\\n Architecture\",\n  \"Document: README.md\\nSection 3:\\nAmazon EC2 / Local Deployment \\n \\n  FastAPI + Interactive CLI Stack \\n    \\n   FastAPI   Interactive CLI  \\n   Multi-Tenant  HTTP Client  \\n   API Server   (Rich Console)  \\n   (Port 8000)    \\n    \\n   \\n   Enhanced Pydantic AI Agent  \\n    Multi-Modal Search  Tenant Context Injection  \\n    10+ AI Tools  Graph + Vector Integration  \\n    JWT Authentication  Intelligent Tool Routing\",\n  \"Document: README.md\\nSection 4:\\nNeon PostgreSQL   Neo4j Desktop \\n (Cloud)   (Local/Remote) \\n  Project-per-Tenant    Graphiti Integration \\n  Vector Search (pgvector)    Namespace Isolation \\n  Hybrid Search (BM25)    Group ID Separation \\n  Catalog Database    Knowledge Graph \\n  Complete Isolation    Entity Relationships\",\n  \"Document: README.md\\nSection 5:\\nFile Structure\\n```\\nTenant/\\n README.md This comprehensive guide\\n requirements.txt Python dependencies\\n requirementsec2complete.txt Complete EC2 deployment dependencies\\n .env Environment configuration (create from template)\\n\\nCore Application Files\",\n  \"Document: README.md\\nSection 2:\\nDual Interface: FastAPI server + Interactive CLI client\\nAI-Powered: Enhanced Pydantic AI agent with 10+ tenant-aware tools\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search\\nJWT Authentication: Secure tenant context with middleware validation\\nProduction Ready: Supervisor process management + Nginx reverse proxy\\nAWS EC2 Optimized: Complete deployment guides for cloud infrastructure\\nFully Tested: Comprehensive verification and testing scripts\\nLive Integration: Real-time Neon PostgreSQL + Neo4j Desktop connectivity\\n Architecture\"\n]\n        \"Document: README.md\\nSection 3:\\nAmazon EC2 / Local Deployment \\n \\n  FastAPI + Interactive CLI Stack \\n    \\n   FastAPI   Interactive CLI  \\n   Multi-Tenant  HTTP Client  \\n   API Server   (Port 8000)  \\n   (Port 8000)    \\n    \\n   \\n   Enhanced Pydantic AI Agent  \\n    Multi-Modal Search  Tenant Context Injection  \\n    10+ AI Tools  Graph + Vector Integration  \\n    JWT Authentication  Intelligent Tool Routing\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'Multi-Tenant', 'summary': 'The Multi-Tenant RAG System is a production-ready system designed for retrieval-augmented generation with complete data isolation between tenants. It utilizes Neon PostgreSQL with pgvector for vector/hybrid search and Neo4j with Graphiti for knowledge graph capabilities. The system supports project-per-tenant database isolation and namespace-based graph isolation. It features a Pydantic AI agent with intelligent tool routing and tenant-aware operations. The system offers both a FastAPI server and an interactive CLI client, supports JWT authentication, and is optimized for AWS EC2 deployment. It also includes comprehensive testing scripts and real-time connectivity to Neon PostgreSQL and Neo4j Desktop. Key features include independent scaling, built-in backup and recovery per tenant, namespace isolation, tenant-tagged entities, and permission-based access control. API endpoints cover tenant management, authentication, document management, multi-modal search (vector, graph, hybrid, comprehensive), and interactive chat. Deployment options include local development and AWS EC2 production setup with automated scripts. Configuration is managed via environment variables, and tenant limits can be customized. Monitoring and observability are provided through health checks, performance metrics, audit logs, and integration with tools like Prometheus, Grafana, and the ELK Stack. The system emphasizes security, performance, and developer experience with comprehensive documentation and automated setup. It provides a FastAPI server (port 8000) and an interactive CLI client, supporting multi-tenant HTTP client interactions. The system includes a TenantManager for project creation and database routing, a TenantDataIngestionService for multi-modal search, a TenantGraphitiClient for knowledge graph operations, and a MultiTenantRAGAgent for enhanced AI capabilities. Security is handled by authmiddleware.py with JWT authentication and context injection.', 'entity_types': ['Entity'], 'attributes': {'labels': ['Entity']}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{
  "summary": "The Multi-Tenant RAG System is a production-ready system designed for retrieval-augmented generation with complete data isolation between tenants. It utilizes Neon PostgreSQL with pgvector for vector/hybrid search and Neo4j with Graphiti for knowledge graph capabilities. The system supports project-per-tenant database isolation and namespace-based graph isolation. It features a Pydantic AI agent with intelligent tool routing and tenant-aware operations. The system offers both a FastAPI server and an interactive CLI client, supports JWT authentication, and is optimized for AWS EC2 deployment. It also includes comprehensive testing scripts and real-time connectivity to Neon PostgreSQL and Neo4j Desktop. Key features include independent scaling, built-in backup and recovery per tenant, namespace isolation, tenant-tagged entities, and permission-based access control. API endpoints cover tenant management, authentication, document management, multi-modal search (vector, graph, hybrid, comprehensive), and interactive chat. Deployment options include local development and AWS EC2 production setup with automated scripts. Configuration is managed via environment variables, and tenant limits can be customized. Monitoring and observability are provided through health checks, performance metrics, audit logs, and integration with tools like Prometheus, Grafana, and the ELK Stack. The system emphasizes security, performance, and developer experience with comprehensive documentation and automated setup. It provides a FastAPI server (port 8000) and an interactive CLI client, supporting multi-tenant HTTP client interactions. The system includes a TenantManager for project creation and database routing, a TenantDataIngestionService for multi-modal search, a TenantGraphitiClient for knowledge graph operations, and a MultiTenantRAGAgent for enhanced AI capabilities. Security is handled by authmiddleware.py with JWT authentication and context injection."
}
```

2025-10-29 13:34:20,700 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-10-29 13:34:20,700 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-10-29 13:34:20,701 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:34:21,077 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-10-29 13:34:21,077 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Document: temporal_rag_test_story.md\\nSection 4:\\nHer preferred coffee shop is now Sonder Coffee, HSR Layout when shes in Bangalore for board meetings.\\n---\",\n  \"Document: README.md\\nSection 2:\\nDual Interface: FastAPI server + Interactive CLI client\\nAI-Powered: Enhanced Pydantic AI agent with 10+ tenant-aware tools\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search\\nJWT Authentication: Secure tenant context with middleware validation\\nProduction Ready: Supervisor process management + Nginx reverse proxy\\nAWS EC2 Optimized: Complete deployment guides for cloud infrastructure\\nFully Tested: Comprehensive verification and testing scripts\\nLive Integration: Real-time Neon PostgreSQL + Neo4j Desktop connectivity\\n Architecture\",\n  \"Document: README.md\\nSection 3:\\nAmazon EC2 / Local Deployment \\n \\n  FastAPI + Interactive CLI Stack \\n    \\n   FastAPI   Interactive CLI  \\n   Multi-Tenant  HTTP Client  \\n   API Server   (Rich Console)  \\n   (Port 8000)    \\n    \\n   \\n   Enhanced Pydantic AI Agent  \\n    Multi-Modal Search  Tenant Context Injection  \\n    10+ AI Tools  Graph + Vector Integration  \\n    JWT Authentication  Intelligent Tool Routing\",\n  \"Document: README.md\\nSection 4:\\nNeon PostgreSQL   Neo4j Desktop \\n (Cloud)   (Local/Remote) \\n  Project-per-Tenant    Graphiti Integration \\n  Vector Search (pgvector)    Namespace Isolation \\n  Hybrid Search (BM25)    Group ID Separation \\n  Catalog Database    Knowledge Graph \\n  Complete Isolation    Entity Relationships\",\n  \"Document: README.md\\nSection 5:\\nFile Structure\\n```\\nTenant/\\n README.md This comprehensive guide\\n requirements.txt Python dependencies\\n requirementsec2complete.txt Complete EC2 deployment dependencies\\n .env Environment configuration (create from template)\\n\\nCore Application Files\",\n  \"Document: README.md\\nSection 2:\\nDual Interface: FastAPI server + Interactive CLI client\\nAI-Powered: Enhanced Pydantic AI agent with 10+ tenant-aware tools\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search\\nJWT Authentication: Secure tenant context with middleware validation\\nProduction Ready: Supervisor process management + Nginx reverse proxy\\nAWS EC2 Optimized: Complete deployment guides for cloud infrastructure\\nFully Tested: Comprehensive verification and testing scripts\\nLive Integration: Real-time Neon PostgreSQL + Neo4j Desktop connectivity\\n Architecture\",\n  \"Document: README.md\\nSection 3:\\nAmazon EC2 / Local Deployment \\n \\n  FastAPI + Interactive CLI Stack \\n    \\n   FastAPI   Interactive CLI  \\n   Multi-Tenant  HTTP Client  \\n   API Server   (Rich Console)  \\n   (Port 8000)    \\n    \\n   \\n   Enhanced Pydantic AI Agent  \\n    Multi-Modal Search  Tenant Context Injection  \\n    10+ AI Tools  Graph + Vector Integration  \\n    JWT Authentication  Intelligent Tool Routing\",\n  \"Document: README.md\\nSection 4:\\nNeon PostgreSQL   Neo4j Desktop \\n (Cloud)   (Local/Remote) \\n  Project-per-Tenant    Graphiti Integration \\n  Vector Search (pgvector)    Namespace Isolation \\n  Hybrid Search (BM25)    Group ID Separation \\n  Catalog Database    Knowledge Graph \\n  Complete Isolation    Entity Relationships\",\n  \"Document: README.md\\nSection 5:\\nFile Structure\\n```\\nTenant/\\n README.md This comprehensive guide\\n requirements.txt Python dependencies\\n requirementsec2complete.txt Complete EC2 deployment dependencies\\n .env Environment configuration (create from template)\\n\\nCore Application Files\",\n  \"Document: README.md\\nSection 2:\\nDual Interface: FastAPI server + Interactive CLI client\\nAI-Powered: Enhanced Pydantic AI agent with 10+ tenant-aware tools\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search\\nJWT Authentication: Secure tenant context with middleware validation\\nProduction Ready: Supervisor process management + Nginx reverse proxy\\nAWS EC2 Optimized: Complete deployment guides for cloud infrastructure\\nFully Tested: Comprehensive verification and testing scripts\\nLive Integration: Real-time Neon PostgreSQL + Neo4j Desktop connectivity\\n Architecture\"\n]\n        \"Document: README.md\\nSection 3:\\nAmazon EC2 / Local Deployment \\n \\n  FastAPI + Interactive CLI Stack \\n    \\n   FastAPI   Interactive CLI  \\n   Multi-Tenant  HTTP Client  \\n   API Server   (Port 8000)  \\n   (Port 8000)    \\n    \\n   \\n   Enhanced Pydantic AI Agent  \\n    Multi-Modal Search  Tenant Context Injection  \\n    10+ AI Tools  Graph + Vector Integration  \\n    JWT Authentication  Intelligent Tool Routing\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'interactive CLI client', 'summary': 'The interactive CLI client is a component of a production-ready, multi-tenant Retrieval-Augmented Generation (RAG) system. This system provides complete data isolation, leveraging Neon PostgreSQL with pgvector for vector/hybrid search and Neo4j with Graphiti for knowledge graph functionalities. It is built following best practices for tenant isolation, using project-per-tenant database isolation and namespace-based graph isolation. The system features a Pydantic AI agent with intelligent tool routing and tenant-aware operations. The RAG system offers both a FastAPI server and an interactive CLI client, supporting multi-modal search (vector, graph, hybrid, comprehensive), JWT authentication, and is optimized for AWS EC2 deployment with comprehensive guides. It also includes live integration with Neon PostgreSQL and Neo4j Desktop. The CLI client communicates via HTTP and is part of the FastAPI + Interactive CLI Stack. The CLI can be started using `./startcli.sh` or `./startcli.sh --api-url http://your-server:8000`. Its features include authentication, tenant creation, document upload, advanced search, chat mode, API health checks, and exiting the application. Automated CLI testing can be performed using `python3 interactivemultitenantclihttp.py --help`. The CLI client is designed for developer experience, offering a beautiful console with progress indicators and comprehensive documentation for all scenarios.', 'entity_types': ['Entity'], 'attributes': {'labels': ['Entity']}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{
  "summary": "The interactive CLI client is a component of a production-ready, multi-tenant Retrieval-Augmented Generation (RAG) system. This system provides complete data isolation, leveraging Neon PostgreSQL with pgvector for vector/hybrid search and Neo4j with Graphiti for knowledge graph functionalities. It is built following best practices for tenant isolation, using project-per-tenant database isolation and namespace-based graph isolation. The system features a Pydantic AI agent with intelligent tool routing and tenant-aware operations. The RAG system offers both a FastAPI server and an interactive CLI client, supporting multi-modal search (vector, graph, hybrid, comprehensive), JWT authentication, and is optimized for AWS EC2 deployment with comprehensive guides. It also includes live integration with Neon PostgreSQL and Neo4j Desktop. The CLI client communicates via HTTP and is part of the FastAPI + Interactive CLI Stack. The CLI can be started using `./startcli.sh` or `./startcli.sh --api-url http://your-server:8000`. Its features include authentication, tenant creation, document upload, advanced search, chat mode, API health checks, and exiting the application. Automated CLI testing can be performed using `python3 interactivemultitenantclihttp.py --help`. The CLI client is designed for developer experience, offering a beautiful console with progress indicators and comprehensive documentation for all scenarios."
}
```

2025-10-29 13:34:21,078 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-10-29 13:34:21,078 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-10-29 13:34:21,080 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:09,145 - graphiti_core.graphiti - INFO - Completed add_episode in 149962.70275115967 ms
2025-10-29 13:36:09,146 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_5b3f3cc2_1761724957
2025-10-29 13:36:09,150 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:13,347 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:14,812 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:31,980 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:31,986 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:31,991 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:31,998 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:32,003 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:32,007 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:32,011 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:32,015 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:32,019 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:32,022 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:32,025 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:32,028 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:32,032 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:32,034 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:32,037 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:32,040 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:32,042 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:34,154 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:34,156 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:34,157 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:34,158 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:34,160 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:34,162 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:34,164 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:34,165 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:34,167 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:34,169 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:34,170 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:34,172 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:34,173 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:34,175 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:55,633 - graphiti_core.graphiti - INFO - Completed add_episode in 46487.0879650116 ms
2025-10-29 13:36:55,633 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_a7849ac6_1761724957
2025-10-29 13:36:55,638 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:36:59,005 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:00,387 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:16,267 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:16,272 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:16,277 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:16,282 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:16,286 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:16,289 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:16,293 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:16,298 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:16,327 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:17,962 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:17,964 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:17,965 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:17,967 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:17,968 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:17,970 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:17,972 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:18,483 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-10-29 13:37:18,483 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Document: README.md\\nSection 3:\\nAmazon EC2 / Local Deployment \\n \\n  FastAPI + Interactive CLI Stack \\n    \\n   FastAPI   Interactive CLI  \\n   Multi-Tenant  HTTP Client  \\n   API Server   (Rich Console)  \\n   (Port 8000)    \\n    \\n   \\n   Enhanced Pydantic AI Agent  \\n    Multi-Modal Search  Tenant Context Injection  \\n    10+ AI Tools  Graph + Vector Integration  \\n    JWT Authentication  Intelligent Tool Routing\",\n  \"Document: README.md\\nSection 4:\\nNeon PostgreSQL   Neo4j Desktop \\n (Cloud)   (Local/Remote) \\n  Project-per-Tenant    Graphiti Integration \\n  Vector Search (pgvector)    Namespace Isolation \\n  Hybrid Search (BM25)    Group ID Separation \\n  Catalog Database    Knowledge Graph \\n  Complete Isolation    Entity Relationships\",\n  \"Document: README.md\\nSection 5:\\nFile Structure\\n```\\nTenant/\\n README.md This comprehensive guide\\n requirements.txt Python dependencies\\n requirementsec2complete.txt Complete EC2 deployment dependencies\\n .env Environment configuration (create from template)\\n\\nCore Application Files\",\n  \"Document: README.md\\nSection 2:\\nDual Interface: FastAPI server + Interactive CLI client\\nAI-Powered: Enhanced Pydantic AI agent with 10+ tenant-aware tools\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search\\nJWT Authentication: Secure tenant context with middleware validation\\nProduction Ready: Supervisor process management + Nginx reverse proxy\\nAWS EC2 Optimized: Complete deployment guides for cloud infrastructure\\nFully Tested: Comprehensive verification and testing scripts\\nLive Integration: Real-time Neon PostgreSQL + Neo4j Desktop connectivity\\n Architecture\",\n  \"Document: README.md\\nSection 3:\\nAmazon EC2 / Local Deployment \\n \\n  FastAPI + Interactive CLI Stack \\n    \\n   FastAPI   Interactive CLI  \\n   Multi-Tenant  HTTP Client  \\n   API Server   (Rich Console)  \\n   (Port 8000)    \\n    \\n   \\n   Enhanced Pydantic AI Agent  \\n    Multi-Modal Search  Tenant Context Injection  \\n    10+ AI Tools  Graph + Vector Integration  \\n    JWT Authentication  Intelligent Tool Routing\",\n  \"Document: README.md\\nSection 4:\\nNeon PostgreSQL   Neo4j Desktop \\n (Cloud)   (Local/Remote) \\n  Project-per-Tenant    Graphiti Integration \\n  Vector Search (pgvector)    Namespace Isolation \\n  Hybrid Search (BM25)    Group ID Separation \\n  Catalog Database    Knowledge Graph \\n  Complete Isolation    Entity Relationships\",\n  \"Document: README.md\\nSection 5:\\nFile Structure\\n```\\nTenant/\\n README.md This comprehensive guide\\n requirements.txt Python dependencies\\n requirementsec2complete.txt Complete EC2 deployment dependencies\\n .env Environment configuration (create from template)\\n\\nCore Application Files\",\n  \"Document: README.md\\nSection 2:\\nDual Interface: FastAPI server + Interactive CLI client\\nAI-Powered: Enhanced Pydantic AI agent with 10+ tenant-aware tools\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search\\nJWT Authentication: Secure tenant context with middleware validation\\nProduction Ready: Supervisor process management + Nginx reverse proxy\\nAWS EC2 Optimized: Complete deployment guides for cloud infrastructure\\nFully Tested: Comprehensive verification and testing scripts\\nLive Integration: Real-time Neon PostgreSQL + Neo4j Desktop connectivity\\n Architecture\",\n  \"Document: README.md\\nSection 3:\\nAmazon EC2 / Local Deployment \\n \\n  FastAPI + Interactive CLI Stack \\n    \\n   FastAPI   Interactive CLI  \\n   Multi-Tenant  HTTP Client  \\n   API Server   (Port 8000)  \\n   (Port 8000)    \\n    \\n   \\n   Enhanced Pydantic AI Agent  \\n    Multi-Modal Search  Tenant Context Injection  \\n    10+ AI Tools  Graph + Vector Integration  \\n    JWT Authentication  Intelligent Tool Routing\",\n  \"Document: README.md\\nSection 4:\\nNeon PostgreSQL   Neo4j Desktop \\n (Cloud)   (Local/Remote) \\n  Project-per-Tenant    Graphiti Integration \\n  Vector Search (pgvector)    Namespace Isolation \\n  Hybrid Search (BM25)    Group ID Separation \\n  Catalog Database    Knowledge Graph \\n  Complete Isolation    Entity Relationships\"\n]\n        \"Document: README.md\\nSection 5:\\nFile Structure\\n```\\nTenant/\\n README.md This comprehensive guide\\n requirements.txt Python dependencies\\n requirementsec2complete.txt Complete EC2 deployment dependencies\\n .env Environment configuration (create from template)\\n\\nCore Application Files\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'requirements.txt', 'summary': 'The requirements.txt file is part of the Tenant directory in the RAG system. It lists the Python dependencies for the core application. There is also a separate file, requirementsec2complete.txt, for complete EC2 deployment dependencies. The file is located in the Tenant directory and is used for installing Python dependencies via pip install -r requirements.txt. The system is a production-ready, multi-tenant Retrieval-Augmented Generation (RAG) system with complete data isolation, featuring both FastAPI server and interactive CLI client. It uses Neon PostgreSQL + pgvector for vector/hybrid search and Neo4j + Graphiti for knowledge graph capabilities. Key features include complete tenant isolation, dual interface (FastAPI and CLI), an AI-powered Pydantic agent with tenant-aware tools, multi-modal search, JWT authentication, and AWS EC2 optimization.', 'entity_types': ['Entity'], 'attributes': {'labels': ['Entity']}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{
  "summary": "The requirements.txt file is part of the Tenant directory in the RAG system. It lists the Python dependencies for the core application. There is also a separate file, requirementsec2complete.txt, for complete EC2 deployment dependencies. The file is located in the Tenant directory and is used for installing Python dependencies via pip install -r requirements.txt. The system is a production-ready, multi-tenant Retrieval-Augmented Generation (RAG) system with complete data isolation, featuring both FastAPI server and interactive CLI client. It uses Neon PostgreSQL + pgvector for vector/hybrid search and Neo4j + Graphiti for knowledge graph capabilities. Key features include complete tenant isolation, dual interface (FastAPI and CLI), an AI-powered Pydantic agent with tenant-aware tools, multi-modal search, JWT authentication, and AWS EC2 optimization."
}
```

2025-10-29 13:37:18,484 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-10-29 13:37:18,484 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-10-29 13:37:18,486 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:18,736 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-10-29 13:37:18,736 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Document: README.md\\nSection 3:\\nAmazon EC2 / Local Deployment \\n \\n  FastAPI + Interactive CLI Stack \\n    \\n   FastAPI   Interactive CLI  \\n   Multi-Tenant  HTTP Client  \\n   API Server   (Rich Console)  \\n   (Port 8000)    \\n    \\n   \\n   Enhanced Pydantic AI Agent  \\n    Multi-Modal Search  Tenant Context Injection  \\n    10+ AI Tools  Graph + Vector Integration  \\n    JWT Authentication  Intelligent Tool Routing\",\n  \"Document: README.md\\nSection 4:\\nNeon PostgreSQL   Neo4j Desktop \\n (Cloud)   (Local/Remote) \\n  Project-per-Tenant    Graphiti Integration \\n  Vector Search (pgvector)    Namespace Isolation \\n  Hybrid Search (BM25)    Group ID Separation \\n  Catalog Database    Knowledge Graph \\n  Complete Isolation    Entity Relationships\",\n  \"Document: README.md\\nSection 5:\\nFile Structure\\n```\\nTenant/\\n README.md This comprehensive guide\\n requirements.txt Python dependencies\\n requirementsec2complete.txt Complete EC2 deployment dependencies\\n .env Environment configuration (create from template)\\n\\nCore Application Files\",\n  \"Document: README.md\\nSection 2:\\nDual Interface: FastAPI server + Interactive CLI client\\nAI-Powered: Enhanced Pydantic AI agent with 10+ tenant-aware tools\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search\\nJWT Authentication: Secure tenant context with middleware validation\\nProduction Ready: Supervisor process management + Nginx reverse proxy\\nAWS EC2 Optimized: Complete deployment guides for cloud infrastructure\\nFully Tested: Comprehensive verification and testing scripts\\nLive Integration: Real-time Neon PostgreSQL + Neo4j Desktop connectivity\\n Architecture\",\n  \"Document: README.md\\nSection 3:\\nAmazon EC2 / Local Deployment \\n \\n  FastAPI + Interactive CLI Stack \\n    \\n   FastAPI   Interactive CLI  \\n   Multi-Tenant  HTTP Client  \\n   API Server   (Rich Console)  \\n   (Port 8000)    \\n    \\n   \\n   Enhanced Pydantic AI Agent  \\n    Multi-Modal Search  Tenant Context Injection  \\n    10+ AI Tools  Graph + Vector Integration  \\n    JWT Authentication  Intelligent Tool Routing\",\n  \"Document: README.md\\nSection 4:\\nNeon PostgreSQL   Neo4j Desktop \\n (Cloud)   (Local/Remote) \\n  Project-per-Tenant    Graphiti Integration \\n  Vector Search (pgvector)    Namespace Isolation \\n  Hybrid Search (BM25)    Group ID Separation \\n  Catalog Database    Knowledge Graph \\n  Complete Isolation    Entity Relationships\",\n  \"Document: README.md\\nSection 5:\\nFile Structure\\n```\\nTenant/\\n README.md This comprehensive guide\\n requirements.txt Python dependencies\\n requirementsec2complete.txt Complete EC2 deployment dependencies\\n .env Environment configuration (create from template)\\n\\nCore Application Files\",\n  \"Document: README.md\\nSection 2:\\nDual Interface: FastAPI server + Interactive CLI client\\nAI-Powered: Enhanced Pydantic AI agent with 10+ tenant-aware tools\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search\\nJWT Authentication: Secure tenant context with middleware validation\\nProduction Ready: Supervisor process management + Nginx reverse proxy\\nAWS EC2 Optimized: Complete deployment guides for cloud infrastructure\\nFully Tested: Comprehensive verification and testing scripts\\nLive Integration: Real-time Neon PostgreSQL + Neo4j Desktop connectivity\\n Architecture\",\n  \"Document: README.md\\nSection 3:\\nAmazon EC2 / Local Deployment \\n \\n  FastAPI + Interactive CLI Stack \\n    \\n   FastAPI   Interactive CLI  \\n   Multi-Tenant  HTTP Client  \\n   API Server   (Port 8000)  \\n   (Port 8000)    \\n    \\n   \\n   Enhanced Pydantic AI Agent  \\n    Multi-Modal Search  Tenant Context Injection  \\n    10+ AI Tools  Graph + Vector Integration  \\n    JWT Authentication  Intelligent Tool Routing\",\n  \"Document: README.md\\nSection 4:\\nNeon PostgreSQL   Neo4j Desktop \\n (Cloud)   (Local/Remote) \\n  Project-per-Tenant    Graphiti Integration \\n  Vector Search (pgvector)    Namespace Isolation \\n  Hybrid Search (BM25)    Group ID Separation \\n  Catalog Database    Knowledge Graph \\n  Complete Isolation    Entity Relationships\"\n]\n        \"Document: README.md\\nSection 5:\\nFile Structure\\n```\\nTenant/\\n README.md This comprehensive guide\\n requirements.txt Python dependencies\\n requirementsec2complete.txt Complete EC2 deployment dependencies\\n .env Environment configuration (create from template)\\n\\nCore Application Files\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'Core Application Files', 'summary': \"The 'Core Application Files' section is part of the documentation for a Multi-Tenant RAG System. It is located within the 'Tenant/' directory and is accompanied by a README.md file, requirements.txt, requirementsec2complete.txt, and an .env file for environment configuration. The system features hybrid search (vector + BM25), graph integration, namespace isolation, knowledge graph capabilities with temporal tracking, and advanced graph analytics. It also includes episode management for document ingestion and knowledge graph updates. The MultiTenantRAGAgent enhances Pydantic AI with specialized tools and tenant context injection, featuring intelligent routing and dual storage for vector and graph search results. Security is handled via JWT authentication and permission management. An interactive CLI and a FastAPI application provide dual interfaces for interaction, with tenant-aware routing and comprehensive endpoints.\", 'entity_types': ['Entity'], 'attributes': {'labels': ['Entity']}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{
  "summary": "The 'Core Application Files' are located within the 'Tenant/' directory of the project. This directory also contains the main README.md file, Python dependency lists (requirements.txt and requirementsec2complete.txt), and an .env file for environment configuration. The project is a Multi-Tenant RAG System with a FastAPI server and an interactive CLI client. It features an AI-powered agent with over 10 tenant-aware tools, multi-modal search capabilities (vector, graph, hybrid), and JWT authentication. The system is optimized for AWS EC2 deployment and includes comprehensive testing. It integrates with Neon PostgreSQL and Neo4j Desktop for real-time data connectivity, supporting project-per-tenant isolation, vector search (pgvector), hybrid search (BM25), and a knowledge graph. The architecture emphasizes dual interfaces, AI capabilities, multi-modal search, secure authentication, production readiness, EC2 optimization, thorough testing, and live database integration."
}
```

2025-10-29 13:37:18,737 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-10-29 13:37:18,737 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-10-29 13:37:18,738 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:30,777 - graphiti_core.graphiti - INFO - Completed add_episode in 35143.056869506836 ms
2025-10-29 13:37:30,777 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_d3cc183b_1761724957
2025-10-29 13:37:30,782 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:34,212 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:35,712 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:52,789 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:52,794 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:52,799 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:52,803 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:52,807 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:52,811 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:52,814 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:52,817 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:52,821 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:52,824 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:52,827 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:52,830 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:52,832 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:52,835 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:52,837 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:52,839 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:52,842 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:52,844 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:52,846 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:53,885 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:53,886 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:53,888 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:53,890 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:53,891 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:53,893 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:53,895 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:53,898 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:53,900 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:53,901 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:37:55,054 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-10-29 13:37:55,054 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Document: README.md\\nSection 4:\\nNeon PostgreSQL   Neo4j Desktop \\n (Cloud)   (Local/Remote) \\n  Project-per-Tenant    Graphiti Integration \\n  Vector Search (pgvector)    Namespace Isolation \\n  Hybrid Search (BM25)    Group ID Separation \\n  Catalog Database    Knowledge Graph \\n  Complete Isolation    Entity Relationships\",\n  \"Document: README.md\\nSection 5:\\nFile Structure\\n```\\nTenant/\\n README.md This comprehensive guide\\n requirements.txt Python dependencies\\n requirementsec2complete.txt Complete EC2 deployment dependencies\\n .env Environment configuration (create from template)\\n\\nCore Application Files\",\n  \"Document: README.md\\nSection 2:\\nDual Interface: FastAPI server + Interactive CLI client\\nAI-Powered: Enhanced Pydantic AI agent with 10+ tenant-aware tools\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search\\nJWT Authentication: Secure tenant context with middleware validation\\nProduction Ready: Supervisor process management + Nginx reverse proxy\\nAWS EC2 Optimized: Complete deployment guides for cloud infrastructure\\nFully Tested: Comprehensive verification and testing scripts\\nLive Integration: Real-time Neon PostgreSQL + Neo4j Desktop connectivity\\n Architecture\",\n  \"Document: README.md\\nSection 3:\\nAmazon EC2 / Local Deployment \\n \\n  FastAPI + Interactive CLI Stack \\n    \\n   FastAPI   Interactive CLI  \\n   Multi-Tenant  HTTP Client  \\n   API Server   (Rich Console)  \\n   (Port 8000)    \\n    \\n   \\n   Enhanced Pydantic AI Agent  \\n    Multi-Modal Search  Tenant Context Injection  \\n    10+ AI Tools  Graph + Vector Integration  \\n    JWT Authentication  Intelligent Tool Routing\",\n  \"Document: README.md\\nSection 4:\\nNeon PostgreSQL   Neo4j Desktop \\n (Cloud)   (Local/Remote) \\n  Project-per-Tenant    Graphiti Integration \\n  Vector Search (pgvector)    Namespace Isolation \\n  Hybrid Search (BM25)    Group ID Separation \\n  Catalog Database    Knowledge Graph \\n  Complete Isolation    Entity Relationships\",\n  \"Document: README.md\\nSection 5:\\nFile Structure\\n```\\nTenant/\\n README.md This comprehensive guide\\n requirements.txt Python dependencies\\n requirementsec2complete.txt Complete EC2 deployment dependencies\\n .env Environment configuration (create from template)\\n\\nCore Application Files\",\n  \"Document: README.md\\nSection 2:\\nDual Interface: FastAPI server + Interactive CLI client\\nAI-Powered: Enhanced Pydantic AI agent with 10+ tenant-aware tools\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search\\nJWT Authentication: Secure tenant context with middleware validation\\nProduction Ready: Supervisor process management + Nginx reverse proxy\\nAWS EC2 Optimized: Complete deployment guides for cloud infrastructure\\nFully Tested: Comprehensive verification and testing scripts\\nLive Integration: Real-time Neon PostgreSQL + Neo4j Desktop connectivity\\n Architecture\",\n  \"Document: README.md\\nSection 3:\\nAmazon EC2 / Local Deployment \\n \\n  FastAPI + Interactive CLI Stack \\n    \\n   FastAPI   Interactive CLI  \\n   Multi-Tenant  HTTP Client  \\n   API Server   (Port 8000)  \\n   (Port 8000)    \\n    \\n   \\n   Enhanced Pydantic AI Agent  \\n    Multi-Modal Search  Tenant Context Injection  \\n    10+ AI Tools  Graph + Vector Integration  \\n    JWT Authentication  Intelligent Tool Routing\",\n  \"Document: README.md\\nSection 4:\\nNeon PostgreSQL   Neo4j Desktop \\n (Cloud)   (Local/Remote) \\n  Project-per-Tenant    Graphiti Integration \\n  Vector Search (pgvector)    Namespace Isolation \\n  Hybrid Search (BM25)    Group ID Separation \\n  Catalog Database    Knowledge Graph \\n  Complete Isolation    Entity Relationships\",\n  \"Document: README.md\\nSection 5:\\nFile Structure\\n```\\nTenant/\\n README.md This comprehensive guide\\n requirements.txt Python dependencies\\n requirementsec2complete.txt Complete EC2 deployment dependencies\\n .env Environment configuration (create from template)\\n\\nCore Application Files\"\n]\n        \"Document: README.md\\nSection 6:\\ninteractivemultitenantapi.py FastAPI server with tenant isolation\\n interactivemultitenantclihttp.py Rich CLI client with HTTP communication\\n multitenantagent.py Enhanced Pydantic AI agent\\n tenantmanager.py Neon project management & tenant lifecycle\\n tenantdataingestionservice.py Multi-modal search services\\n tenantgraphiticlient.py Neo4j + Graphiti with namespacing\\n authmiddleware.py JWT authentication & tenant context\\n\\nDeployment & Operations\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'tenantdataingestionservice.py', 'summary': 'The `tenantdataingestionservice.py` file is a core component of a multi-tenant RAG system, responsible for managing multi-modal search services. It supports Vector Search (semantic similarity using pgvector), Graph Search (knowledge relationships), Hybrid Search (combining vector and BM25 text search), and Comprehensive Search (all methods combined). This service ensures that data ingestion and retrieval are handled efficiently for different tenants, working alongside the FastAPI server, CLI client, and AI agent to provide a complete RAG solution. It is part of the core application files and handles multi-modal search capabilities including vector search using pgvector and graph search for knowledge relationships.', 'entity_types': ['Entity'], 'attributes': {'labels': ['Entity']}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{
  "summary": "The `tenantdataingestionservice.py` file is a core component of a multi-tenant RAG system, responsible for managing multi-modal search services. It supports Vector Search (semantic similarity using pgvector), Graph Search (knowledge relationships), Hybrid Search (combining vector and BM25 text search), and Comprehensive Search (all methods combined). This service ensures that data ingestion and retrieval are handled efficiently for different tenants, working alongside the FastAPI server, CLI client, and AI agent to provide a complete RAG solution. It is part of the core application files and handles multi-modal search capabilities including vector search using pgvector and graph search for knowledge relationships."
}
```

2025-10-29 13:37:55,055 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-10-29 13:37:55,055 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-10-29 13:37:55,057 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:38:15,718 - graphiti_core.graphiti - INFO - Completed add_episode in 44940.52600860596 ms
2025-10-29 13:38:15,719 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_5131b944_1761724957
2025-10-29 13:38:15,733 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:38:19,293 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:38:20,741 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:38:37,528 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:38:37,531 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:38:37,533 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:38:37,535 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:38:37,538 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:38:37,540 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:38:37,543 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:38:37,546 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:38:37,548 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:38:37,550 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:38:37,552 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:38:37,554 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:38:37,556 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:38:37,559 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:38:37,561 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:38:37,563 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:38:38,502 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:38:38,503 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:38:38,505 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:38:38,507 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:38:38,509 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:38:38,511 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:38:56,815 - graphiti_core.graphiti - INFO - Completed add_episode in 41096.177101135254 ms
2025-10-29 13:38:56,815 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_28f389b7_1761724957
2025-10-29 13:38:56,820 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:02,918 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:04,531 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:32,047 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:32,053 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:32,058 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:32,064 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:32,068 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:32,074 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:32,078 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:32,082 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:32,085 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:32,088 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:32,092 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:32,095 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:32,098 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:32,101 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:32,103 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:32,105 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:32,108 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:32,111 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:32,113 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:32,115 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:33,432 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:33,583 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:33,947 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:33,949 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:33,950 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:33,952 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:33,953 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:33,955 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:33,957 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:33,959 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:33,962 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:33,963 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:33,965 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:33,966 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:33,968 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:33,970 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:33,971 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:33,973 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:54,025 - graphiti_core.graphiti - INFO - Completed add_episode in 57209.35320854187 ms
2025-10-29 13:39:54,025 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_0874f0e5_1761724957
2025-10-29 13:39:54,034 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:39:59,283 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:40:01,026 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:40:19,429 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:40:19,556 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:40:19,559 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:40:19,561 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:40:19,563 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:40:19,565 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:40:19,567 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:40:19,569 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:40:19,571 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:40:19,573 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:40:19,575 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:40:19,577 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:40:19,579 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:40:19,581 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:40:19,583 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:40:19,585 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:40:19,587 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:40:19,589 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:40:19,591 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:40:19,593 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:40:20,464 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:40:20,466 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:40:20,468 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:40:20,470 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:40:20,471 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:40:20,474 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:40:20,640 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:40:20,728 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:40:20,808 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:40:21,063 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:40:37,880 - graphiti_core.graphiti - INFO - Completed add_episode in 43854.25305366516 ms
2025-10-29 13:40:37,880 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_7b6a042a_1761724957
2025-10-29 13:40:37,885 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:40:43,459 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:40:44,398 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:03,106 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:03,113 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:03,119 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:03,126 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:03,131 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:03,135 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:03,140 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:03,145 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:03,148 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:03,152 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:04,371 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:04,373 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:04,375 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:04,376 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:04,378 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:04,379 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:04,381 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:04,382 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:13,098 - graphiti_core.graphiti - INFO - Completed add_episode in 35217.59223937988 ms
2025-10-29 13:41:13,098 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_a8c6890a_1761724957
2025-10-29 13:41:13,106 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:18,396 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:19,495 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:40,439 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:40,446 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:40,451 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:40,457 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:40,461 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:40,466 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:40,469 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:40,473 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:40,477 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:40,480 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:40,484 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:40,487 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:40,490 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:40,493 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:40,496 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:40,498 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:40,501 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:41,640 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:41,642 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:41,643 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:41,645 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:41,647 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:41,648 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:41,650 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:41,651 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:41,653 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:41,655 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:41,656 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:41,658 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:42,726 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-10-29 13:41:42,727 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Document: README.md\\nSection 5:\\nFile Structure\\n```\\nTenant/\\n README.md This comprehensive guide\\n requirements.txt Python dependencies\\n requirementsec2complete.txt Complete EC2 deployment dependencies\\n .env Environment configuration (create from template)\\n\\nCore Application Files\",\n  \"Document: README.md\\nSection 2:\\nDual Interface: FastAPI server + Interactive CLI client\\nAI-Powered: Enhanced Pydantic AI agent with 10+ tenant-aware tools\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search\\nJWT Authentication: Secure tenant context with middleware validation\\nProduction Ready: Supervisor process management + Nginx reverse proxy\\nAWS EC2 Optimized: Complete deployment guides for cloud infrastructure\\nFully Tested: Comprehensive verification and testing scripts\\nLive Integration: Real-time Neon PostgreSQL + Neo4j Desktop connectivity\\n Architecture\",\n  \"Document: README.md\\nSection 3:\\nAmazon EC2 / Local Deployment \\n \\n  FastAPI + Interactive CLI Stack \\n    \\n   FastAPI   Interactive CLI  \\n   Multi-Tenant  HTTP Client  \\n   API Server   (Port 8000)  \\n   (Port 8000)    \\n    \\n   \\n   Enhanced Pydantic AI Agent  \\n    Multi-Modal Search  Tenant Context Injection  \\n    10+ AI Tools  Graph + Vector Integration  \\n    JWT Authentication  Intelligent Tool Routing\",\n  \"Document: README.md\\nSection 4:\\nNeon PostgreSQL   Neo4j Desktop \\n (Cloud)   (Local/Remote) \\n  Project-per-Tenant    Graphiti Integration \\n  Vector Search (pgvector)    Namespace Isolation \\n  Hybrid Search (BM25)    Group ID Separation \\n  Catalog Database    Knowledge Graph \\n  Complete Isolation    Entity Relationships\",\n  \"Document: README.md\\nSection 5:\\nFile Structure\\n```\\nTenant/\\n README.md This comprehensive guide\\n requirements.txt Python dependencies\\n requirementsec2complete.txt Complete EC2 deployment dependencies\\n .env Environment configuration (create from template)\\n\\nCore Application Files\",\n  \"Document: README.md\\nSection 6:\\ninteractivemultitenantapi.py FastAPI server with tenant isolation\\n interactivemultitenantclihttp.py Rich CLI client with HTTP communication\\n multitenantagent.py Enhanced Pydantic AI agent\\n tenantmanager.py Neon project management & tenant lifecycle\\n tenantdataingestionservice.py Multi-modal search services\\n tenantgraphiticlient.py Neo4j + Graphiti with namespacing\\n authmiddleware.py JWT authentication & tenant context\\n\\nDeployment & Operations\",\n  \"Document: README.md\\nSection 7:\\nstartapi.sh API server startup script\\n startcli.sh CLI client startup script\\n EC2DEPLOYMENTGUIDE.md Complete AWS EC2 deployment guide\\n EC2DEPLOYMENTCHECKLIST.md Pre/post deployment verification\\n ec2quicksetup.sh Automated EC2 setup script\\n verifydeployment.sh Deployment verification script\\n\\nConfiguration & Schema\\n catalogschema.sql Catalog database schema for tenant metadata\\n deployment_guide.md Original deployment instructions\\n``\\nQuick Start\\nInstallation\\n``bash\\nClone and navigate to Tenant directory\\ncd Tenant/\\nCreate virtual environment\",\n  \"Document: README.md\\nSection 8:\\npython3 -m venv venv\\nsource venv/bin/activate On Windows: venv\\\\Scripts\\\\activate\\nInstall dependencies\\npip install -r requirements.txt\\n``\\nEnvironment Setup\\nCreate .env file:\\n``bash\\nNeon PostgreSQL Configuration (Project-per-Tenant)\\nNEONAPIKEY=yourneonapikeyhere\\nCATALOGDBURL=postgresql://username:password@ep-catalog.us-east-2.aws.neon.tech/neondb?sslmode=require\\nPOSTGRESURL=postgresql://username:password@ep-catalog.us-east-2.aws.neon.tech/neondb?sslmode=require\\nNeo4j Configuration (Local Desktop or Remote)\\nNEO4JURI=neo4j://localhost:7687\\nNEO4JURL=neo4j://localhost:7687\\nNEO4JUSERNAME=neo4j\\nNEO4JUSER=neo4j\\nNEO4JPASSWORD=yourneo4jpassword\\nNEO4JAUTH=neo4j/yourneo4j_password\\nAuthentication\",\n  \"Document: README.md\\nSection 9:\\nJWTSECRETKEY=your-super-secret-jwt-key-change-in-production\\nJWTALGORITHM=HS256\\nAI Providers\\nOPENAIAPIKEY=youropenaiapikey\\nGOOGLEAPIKEY=yourgoogleapikey Optional\\nANTHROPICAPIKEY=youranthropicapikey Optional\\nApplication Configuration\\nAPPENV=development\\nAPPHOST=127.0.0.1\\nAPPPORT=8000\\nLOGLEVEL=info\\n``\\nDatabase Setup\\n`bash\\nSetup catalog database (control plane) - if needed\\npsql \\\"$CATALOGDBURL\\\" -f catalogschema.sql\\n`\\nStart the System\\n`bash\\nMethod 1: Direct startup\\npython3 interactivemultitenantapi.py\\nMethod 2: Using startup scripts\\nchmod +x startapi.sh startcli.sh\\n./startapi.sh\\nIn another terminal for CLI\\n./startcli.sh\\n`\\nVerify Installation\\n``bash\",\n  \"Document: README.md\\nSection 10:\\nTest API health\\ncurl http://localhost:8000/health\\nRun deployment verification\\nchmod +x verifydeployment.sh\\n./verifydeployment.sh\\n``\\nVisit http://localhost:8000/docs for interactive API documentation.\\nUsage Examples\\nAuthentication & Setup\\n`bash\\nCreate a tenant\\ncurl -X POST \\\"http://localhost:8000/tenants\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"name\\\": \\\"Acme Corporation\\\",\\n\\\"email\\\": \\\"admin@acme.com\\\",\\n\\\"region\\\": \\\"aws-us-east-1\\\",\\n\\\"plan\\\": \\\"basic\\\"\\n}'\\nResponse includes tenant_id for authentication\\n`\\n Get Authentication Token\\n``bash\\nAuthenticate with tenant\"\n]\n        \"Document: README.md\\nSection 11:\\ncurl -X POST \\\"http://localhost:8000/auth/login\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"tenantid\\\": \\\"TENANTIDFROMABOVE\\\",\\n\\\"apikey\\\": \\\"yourapikey\\\",\\n\\\"userid\\\": \\\"johndoe\\\"\\n}'\\nSave the JWT token from response\\n``\\nUpload Document\\n`bash\\nUpload document for ingestion\\ncurl -X POST \\\"http://localhost:8000/documents\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWT_TOKEN\\\" \\\\\\n-F \\\"file=@document.pdf\\\"\\nDocuments are automatically processed for vector and graph search\\n`\\nMulti-Modal Search\\n``bash\\n4a. Vector Search (Semantic similarity)\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'README.md', 'summary': 'This document outlines a production-ready, multi-tenant Retrieval-Augmented Generation (RAG) system with complete data isolation. It features a dual interface with a FastAPI server (port 8000) and an interactive CLI client, powered by an enhanced Pydantic AI agent with over 10 tenant-aware tools. The system supports multi-modal search including vector, graph, hybrid, and comprehensive search capabilities. It utilizes JWT authentication for secure tenant context with middleware validation. The system is production-ready, optimized for AWS EC2, and includes Supervisor process management and Nginx reverse proxy for reliability. It offers live integration with Neon PostgreSQL (cloud) for vector search (pgvector) and hybrid search (BM25), and Neo4j Desktop (local/remote) for graph capabilities, ensuring project-per-tenant database isolation and namespace-based graph isolation. Deployment guides for AWS EC2 and local setups are provided. The file structure includes core application files and configuration files like .env and requirements.txt. Key components include interactivemultitenantapi.py (FastAPI server), interactivemultitenantclihttp.py (CLI client), multitenantagent.py (AI agent), tenantmanager.py (Neon project management), tenantdataingestionservice.py (search services), tenantgraphiticlient.py (Neo4j client), and authmiddleware.py (authentication). The file structure includes a Tenant directory with README.md, requirements.txt, requirementsec2complete.txt, and .env. Core application files and deployment scripts like startapi.sh, startcli.sh, EC2DEPLOYMENTGUIDE.md, and ec2quicksetup.sh are also present. Database schema for catalog is provided in catalogschema.sql. Environment setup requires creating a .env file with Neon PostgreSQL and Neo4j configurations, including JWT and AI provider API keys. The system can be started directly or using startup scripts. Installation involves cloning the repository, creating a virtual environment, and installing dependencies. The system can be verified using `curl http://localhost:8000/health` and `verifydeployment.sh`. API documentation is available at http://localhost:8000/docs. Examples for creating a tenant and getting an authentication token are provided.', 'entity_types': ['Entity'], 'attributes': {'labels': ['Entity']}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{
  "summary": "This document outlines a production-ready, multi-tenant Retrieval-Augmented Generation (RAG) system with complete data isolation. It features a dual interface with a FastAPI server (port 8000) and an interactive CLI client, powered by an enhanced Pydantic AI agent with over 10 tenant-aware tools. The system supports multi-modal search including vector, graph, hybrid, and comprehensive search capabilities. It utilizes JWT authentication for secure tenant context with middleware validation. The system is production-ready, optimized for AWS EC2, and includes Supervisor process management and Nginx reverse proxy for reliability. It offers live integration with Neon PostgreSQL (cloud) for vector search (pgvector) and hybrid search (BM25), and Neo4j Desktop (local/remote) for graph capabilities, ensuring project-per-tenant database isolation and namespace-based graph isolation. Deployment guides for AWS EC2 and local setups are provided. The file structure includes core application files and configuration files like .env and requirements.txt. Key components include interactivemultitenantapi.py (FastAPI server), interactivemultitenantclihttp.py (CLI client), multitenantagent.py (AI agent), tenantmanager.py (Neon project management), tenantdataingestionservice.py (search services), tenantgraphiticlient.py (Neo4j client), and authmiddleware.py (authentication). The file structure includes a Tenant directory with README.md, requirements.txt, requirementsec2complete.txt, and .env. Core application files and deployment scripts like startapi.sh, startcli.sh, EC2DEPLOYMENTGUIDE.md, and ec2quicksetup.sh are also present. Database schema for catalog is provided in catalogschema.sql. Environment setup requires creating a .env file with Neon PostgreSQL and Neo4j configurations, including JWT and AI provider API keys. The system can be started directly or using startup scripts. Installation involves cloning the repository, creating a virtual environment, and installing dependencies. The system can be verified using `curl http://localhost:8000/health` and `verifydeployment.sh`. API documentation is available at http://localhost:8000/docs. Examples for creating a tenant and getting an authentication token are provided."
}
```

2025-10-29 13:41:42,728 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-10-29 13:41:42,728 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-10-29 13:41:42,730 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:41:58,212 - graphiti_core.graphiti - INFO - Completed add_episode in 45113.52872848511 ms
2025-10-29 13:41:58,212 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_53384672_1761724957
2025-10-29 13:41:58,216 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:42:01,509 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:42:02,385 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:42:20,219 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:42:20,225 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:42:20,230 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:42:20,235 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:42:20,240 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:42:20,244 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:42:20,248 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:42:20,251 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:42:20,255 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:42:21,151 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:42:21,152 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:42:21,154 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:42:21,156 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:42:21,158 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:42:22,529 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-10-29 13:42:22,530 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Document: README.md\\nSection 2:\\nDual Interface: FastAPI server + Interactive CLI client\\nAI-Powered: Enhanced Pydantic AI agent with 10+ tenant-aware tools\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search\\nJWT Authentication: Secure tenant context with middleware validation\\nProduction Ready: Supervisor process management + Nginx reverse proxy\\nAWS EC2 Optimized: Complete deployment guides for cloud infrastructure\\nFully Tested: Comprehensive verification and testing scripts\\nLive Integration: Real-time Neon PostgreSQL + Neo4j Desktop connectivity\\n Architecture\",\n  \"Document: README.md\\nSection 3:\\nAmazon EC2 / Local Deployment \\n \\n  FastAPI + Interactive CLI Stack \\n    \\n   FastAPI   Interactive CLI  \\n   Multi-Tenant  HTTP Client  \\n   API Server   (Port 8000)  \\n   (Port 8000)    \\n    \\n   \\n   Enhanced Pydantic AI Agent  \\n    Multi-Modal Search  Tenant Context Injection  \\n    10+ AI Tools  Graph + Vector Integration  \\n    JWT Authentication  Intelligent Tool Routing\",\n  \"Document: README.md\\nSection 4:\\nNeon PostgreSQL   Neo4j Desktop \\n (Cloud)   (Local/Remote) \\n  Project-per-Tenant    Graphiti Integration \\n  Vector Search (pgvector)    Namespace Isolation \\n  Hybrid Search (BM25)    Group ID Separation \\n  Catalog Database    Knowledge Graph \\n  Complete Isolation    Entity Relationships\",\n  \"Document: README.md\\nSection 5:\\nFile Structure\\n```\\nTenant/\\n README.md This comprehensive guide\\n requirements.txt Python dependencies\\n requirementsec2complete.txt Complete EC2 deployment dependencies\\n .env Environment configuration (create from template)\\n\\nCore Application Files\",\n  \"Document: README.md\\nSection 6:\\ninteractivemultitenantapi.py FastAPI server with tenant isolation\\n interactivemultitenantclihttp.py Rich CLI client with HTTP communication\\n multitenantagent.py Enhanced Pydantic AI agent\\n tenantmanager.py Neon project management & tenant lifecycle\\n tenantdataingestionservice.py Multi-modal search services\\n tenantgraphiticlient.py Neo4j + Graphiti with namespacing\\n authmiddleware.py JWT authentication & tenant context\\n\\nDeployment & Operations\",\n  \"Document: README.md\\nSection 7:\\nstartapi.sh API server startup script\\n startcli.sh CLI client startup script\\n EC2DEPLOYMENTGUIDE.md Complete AWS EC2 deployment guide\\n EC2DEPLOYMENTCHECKLIST.md Pre/post deployment verification\\n ec2quicksetup.sh Automated EC2 setup script\\n verifydeployment.sh Deployment verification script\\n\\nConfiguration & Schema\\n catalogschema.sql Catalog database schema for tenant metadata\\n deployment_guide.md Original deployment instructions\\n``\\nQuick Start\\nInstallation\\n``bash\\nClone and navigate to Tenant directory\\ncd Tenant/\\nCreate virtual environment\",\n  \"Document: README.md\\nSection 8:\\npython3 -m venv venv\\nsource venv/bin/activate On Windows: venv\\\\Scripts\\\\activate\\nInstall dependencies\\npip install -r requirements.txt\\n``\\nEnvironment Setup\\nCreate .env file:\\n``bash\\nNeon PostgreSQL Configuration (Project-per-Tenant)\\nNEONAPIKEY=yourneonapikeyhere\\nCATALOGDBURL=postgresql://username:password@ep-catalog.us-east-2.aws.neon.tech/neondb?sslmode=require\\nPOSTGRESURL=postgresql://username:password@ep-catalog.us-east-2.aws.neon.tech/neondb?sslmode=require\\nNeo4j Configuration (Local Desktop or Remote)\\nNEO4JURI=neo4j://localhost:7687\\nNEO4JURL=neo4j://localhost:7687\\nNEO4JUSERNAME=neo4j\\nNEO4JUSER=neo4j\\nNEO4JPASSWORD=yourneo4jpassword\\nNEO4JAUTH=neo4j/yourneo4j_password\\nAuthentication\",\n  \"Document: README.md\\nSection 9:\\nJWTSECRETKEY=your-super-secret-jwt-key-change-in-production\\nJWTALGORITHM=HS256\\nAI Providers\\nOPENAIAPIKEY=youropenaiapikey\\nGOOGLEAPIKEY=yourgoogleapikey Optional\\nANTHROPICAPIKEY=youranthropicapikey Optional\\nApplication Configuration\\nAPPENV=development\\nAPPHOST=127.0.0.1\\nAPPPORT=8000\\nLOGLEVEL=info\\n``\\nDatabase Setup\\n`bash\\nSetup catalog database (control plane) - if needed\\npsql \\\"$CATALOGDBURL\\\" -f catalogschema.sql\\n`\\nStart the System\\n`bash\\nMethod 1: Direct startup\\npython3 interactivemultitenantapi.py\\nMethod 2: Using startup scripts\\nchmod +x startapi.sh startcli.sh\\n./startapi.sh\\nIn another terminal for CLI\\n./startcli.sh\\n`\\nVerify Installation\\n``bash\",\n  \"Document: README.md\\nSection 10:\\nTest API health\\ncurl http://localhost:8000/health\\nRun deployment verification\\nchmod +x verifydeployment.sh\\n./verifydeployment.sh\\n``\\nVisit http://localhost:8000/docs for interactive API documentation.\\nUsage Examples\\nAuthentication & Setup\\n`bash\\nCreate a tenant\\ncurl -X POST \\\"http://localhost:8000/tenants\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"name\\\": \\\"Acme Corporation\\\",\\n\\\"email\\\": \\\"admin@acme.com\\\",\\n\\\"region\\\": \\\"aws-us-east-1\\\",\\n\\\"plan\\\": \\\"basic\\\"\\n}'\\nResponse includes tenant_id for authentication\\n`\\n Get Authentication Token\\n``bash\\nAuthenticate with tenant\",\n  \"Document: README.md\\nSection 11:\\ncurl -X POST \\\"http://localhost:8000/auth/login\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"tenantid\\\": \\\"TENANTIDFROMABOVE\\\",\\n\\\"apikey\\\": \\\"yourapikey\\\",\\n\\\"userid\\\": \\\"johndoe\\\"\\n}'\\nSave the JWT token from response\\n``\\nUpload Document\\n`bash\\nUpload document for ingestion\\ncurl -X POST \\\"http://localhost:8000/documents\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWT_TOKEN\\\" \\\\\\n-F \\\"file=@document.pdf\\\"\\nDocuments are automatically processed for vector and graph search\\n`\\nMulti-Modal Search\\n``bash\\n4a. Vector Search (Semantic similarity)\"\n]\n        \"Document: README.md\\nSection 12:\\ncurl -X POST \\\"http://localhost:8000/search\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWTTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"query\\\": \\\"What are the company vacation policies?\\\",\\n\\\"searchtype\\\": \\\"vector\\\",\\n\\\"limit\\\": 10\\n}'\\n4b. Graph Search (Knowledge relationships)\\ncurl -X POST \\\"http://localhost:8000/search\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWTTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"query\\\": \\\"employee benefits structure\\\",\\n\\\"searchtype\\\": \\\"graph\\\",\\n\\\"limit\\\": 10\\n}'\\n4c. Hybrid Search (Vector + BM25 text search)\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'README.md', 'summary': 'This document outlines a production-ready, multi-tenant Retrieval-Augmented Generation (RAG) system with complete data isolation. It features a dual interface with a FastAPI server (port 8000) and an interactive CLI client, powered by an enhanced Pydantic AI agent with over 10 tenant-aware tools. The system supports multi-modal search including vector, graph, hybrid, and comprehensive search capabilities. It utilizes JWT authentication for secure tenant context with middleware validation. The system is production-ready, optimized for AWS EC2, and includes Supervisor process management and Nginx reverse proxy for reliability. It offers live integration with Neon PostgreSQL (cloud) for vector search (pgvector) and hybrid search (BM25), and Neo4j Desktop (local/remote) for graph capabilities, ensuring project-per-tenant database isolation and namespace-based graph isolation. Deployment guides for AWS EC2 and local setups are provided. The file structure includes core application files and configuration files like .env and requirements.txt. Key components include interactivemultitenantapi.py (FastAPI server), interactivemultitenantclihttp.py (CLI client), multitenantagent.py (AI agent), tenantmanager.py (Neon project management), tenantdataingestionservice.py (search services), tenantgraphiticlient.py (Neo4j client), and authmiddleware.py (authentication). The file structure includes a Tenant directory with README.md, requirements.txt, requirementsec2complete.txt, and .env. Core application files and deployment scripts like startapi.sh, startcli.sh, EC2DEPLOYMENTGUIDE.md, and ec2quicksetup.sh are also present. Database schema for catalog is provided in catalogschema.sql. Environment setup requires creating a .env file with Neon PostgreSQL and Neo4j configurations, including JWT and AI provider API keys. The system can be started directly or using startup scripts. Installation involves cloning the repository, creating a virtual environment, and installing dependencies. The system can be verified using `curl http://localhost:8000/health` and `verifydeployment.sh`. API documentation is available at http://localhost:8000/docs. Examples for creating a tenant and getting an authentication token are provided.', 'entity_types': ['Entity'], 'attributes': {'labels': ['Entity']}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{
  "summary": "This document outlines a production-ready, multi-tenant Retrieval-Augmented Generation (RAG) system with complete data isolation. It features a dual interface with a FastAPI server (port 8000) and an interactive CLI client, powered by an enhanced Pydantic AI agent with over 10 tenant-aware tools. The system supports multi-modal search including vector, graph, hybrid, and comprehensive search capabilities. It utilizes JWT authentication for secure tenant context with middleware validation. The system is production-ready, optimized for AWS EC2, and includes Supervisor process management and Nginx reverse proxy for reliability. It offers live integration with Neon PostgreSQL (cloud) for vector search (pgvector) and hybrid search (BM25), and Neo4j Desktop (local/remote) for graph capabilities, ensuring project-per-tenant database isolation and namespace-based graph isolation. Deployment guides for AWS EC2 and local setups are provided. The file structure includes core application files and configuration files like .env and requirements.txt. Key components include interactivemultitenantapi.py (FastAPI server), interactivemultitenantclihttp.py (CLI client), multitenantagent.py (AI agent), tenantmanager.py (Neon project management), tenantdataingestionservice.py (search services), tenantgraphiticlient.py (Neo4j client), and authmiddleware.py (authentication). The file structure includes a Tenant directory with README.md, requirements.txt, requirementsec2complete.txt, and .env. Core application files and deployment scripts like startapi.sh, startcli.sh, EC2DEPLOYMENTGUIDE.md, and ec2quicksetup.sh are also present. Database schema for catalog is provided in catalogschema.sql. Environment setup requires creating a .env file with Neon PostgreSQL and Neo4j configurations, including JWT and AI provider API keys. The system can be started directly or using startup scripts. Installation involves cloning the repository, creating a virtual environment, and installing dependencies. The system can be verified using `curl http://localhost:8000/health` and `verifydeployment.sh`. API documentation is available at http://localhost:8000/docs. Examples for creating a tenant and getting an authentication token are provided."
}
```

2025-10-29 13:42:22,530 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-10-29 13:42:22,530 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-10-29 13:42:22,532 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:42:31,189 - graphiti_core.graphiti - INFO - Completed add_episode in 32976.14121437073 ms
2025-10-29 13:42:31,189 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_4466f37b_1761724957
2025-10-29 13:42:31,193 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:42:35,330 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:42:36,234 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:42:48,286 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:42:48,289 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:42:48,291 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:42:48,294 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:42:48,296 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:42:48,298 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:42:48,300 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:42:48,303 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:42:49,152 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:42:49,154 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:42:49,156 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:42:49,157 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:42:49,159 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:42:49,781 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-10-29 13:42:49,781 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Document: README.md\\nSection 3:\\nAmazon EC2 / Local Deployment \\n \\n  FastAPI + Interactive CLI Stack \\n    \\n   FastAPI   Interactive CLI  \\n   Multi-Tenant  HTTP Client  \\n   API Server   (Port 8000)  \\n   (Port 8000)    \\n    \\n   \\n   Enhanced Pydantic AI Agent  \\n    Multi-Modal Search  Tenant Context Injection  \\n    10+ AI Tools  Graph + Vector Integration  \\n    JWT Authentication  Intelligent Tool Routing\",\n  \"Document: README.md\\nSection 4:\\nNeon PostgreSQL   Neo4j Desktop \\n (Cloud)   (Local/Remote) \\n  Project-per-Tenant    Graphiti Integration \\n  Vector Search (pgvector)    Namespace Isolation \\n  Hybrid Search (BM25)    Group ID Separation \\n  Catalog Database    Knowledge Graph \\n  Complete Isolation    Entity Relationships\",\n  \"Document: README.md\\nSection 5:\\nFile Structure\\n```\\nTenant/\\n README.md This comprehensive guide\\n requirements.txt Python dependencies\\n requirementsec2complete.txt Complete EC2 deployment dependencies\\n .env Environment configuration (create from template)\\n\\nCore Application Files\",\n  \"Document: README.md\\nSection 6:\\ninteractivemultitenantapi.py FastAPI server with tenant isolation\\n interactivemultitenantclihttp.py Rich CLI client with HTTP communication\\n multitenantagent.py Enhanced Pydantic AI agent\\n tenantmanager.py Neon project management & tenant lifecycle\\n tenantdataingestionservice.py Multi-modal search services\\n tenantgraphiticlient.py Neo4j + Graphiti with namespacing\\n authmiddleware.py JWT authentication & tenant context\\n\\nDeployment & Operations\",\n  \"Document: README.md\\nSection 7:\\nstartapi.sh API server startup script\\n startcli.sh CLI client startup script\\n EC2DEPLOYMENTGUIDE.md Complete AWS EC2 deployment guide\\n EC2DEPLOYMENTCHECKLIST.md Pre/post deployment verification\\n ec2quicksetup.sh Automated EC2 setup script\\n verifydeployment.sh Deployment verification script\\n\\nConfiguration & Schema\\n catalogschema.sql Catalog database schema for tenant metadata\\n deployment_guide.md Original deployment instructions\\n``\\nQuick Start\\nInstallation\\n``bash\\nClone and navigate to Tenant directory\\ncd Tenant/\\nCreate virtual environment\",\n  \"Document: README.md\\nSection 8:\\npython3 -m venv venv\\nsource venv/bin/activate On Windows: venv\\\\Scripts\\\\activate\\nInstall dependencies\\npip install -r requirements.txt\\n``\\nEnvironment Setup\\nCreate .env file:\\n``bash\\nNeon PostgreSQL Configuration (Project-per-Tenant)\\nNEONAPIKEY=yourneonapikeyhere\\nCATALOGDBURL=postgresql://username:password@ep-catalog.us-east-2.aws.neon.tech/neondb?sslmode=require\\nPOSTGRESURL=postgresql://username:password@ep-catalog.us-east-2.aws.neon.tech/neondb?sslmode=require\\nNeo4j Configuration (Local Desktop or Remote)\\nNEO4JURI=neo4j://localhost:7687\\nNEO4JURL=neo4j://localhost:7687\\nNEO4JUSERNAME=neo4j\\nNEO4JUSER=neo4j\\nNEO4JPASSWORD=yourneo4jpassword\\nNEO4JAUTH=neo4j/yourneo4j_password\\nAuthentication\",\n  \"Document: README.md\\nSection 9:\\nJWTSECRETKEY=your-super-secret-jwt-key-change-in-production\\nJWTALGORITHM=HS256\\nAI Providers\\nOPENAIAPIKEY=youropenaiapikey\\nGOOGLEAPIKEY=yourgoogleapikey Optional\\nANTHROPICAPIKEY=youranthropicapikey Optional\\nApplication Configuration\\nAPPENV=development\\nAPPHOST=127.0.0.1\\nAPPPORT=8000\\nLOGLEVEL=info\\n``\\nDatabase Setup\\n`bash\\nSetup catalog database (control plane) - if needed\\npsql \\\"$CATALOGDBURL\\\" -f catalogschema.sql\\n`\\nStart the System\\n`bash\\nMethod 1: Direct startup\\npython3 interactivemultitenantapi.py\\nMethod 2: Using startup scripts\\nchmod +x startapi.sh startcli.sh\\n./startapi.sh\\nIn another terminal for CLI\\n./startcli.sh\\n`\\nVerify Installation\\n``bash\",\n  \"Document: README.md\\nSection 10:\\nTest API health\\ncurl http://localhost:8000/health\\nRun deployment verification\\nchmod +x verifydeployment.sh\\n./verifydeployment.sh\\n``\\nVisit http://localhost:8000/docs for interactive API documentation.\\nUsage Examples\\nAuthentication & Setup\\n`bash\\nCreate a tenant\\ncurl -X POST \\\"http://localhost:8000/tenants\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"name\\\": \\\"Acme Corporation\\\",\\n\\\"email\\\": \\\"admin@acme.com\\\",\\n\\\"region\\\": \\\"aws-us-east-1\\\",\\n\\\"plan\\\": \\\"basic\\\"\\n}'\\nResponse includes tenant_id for authentication\\n`\\n Get Authentication Token\\n``bash\\nAuthenticate with tenant\",\n  \"Document: README.md\\nSection 11:\\ncurl -X POST \\\"http://localhost:8000/auth/login\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"tenantid\\\": \\\"TENANTIDFROMABOVE\\\",\\n\\\"apikey\\\": \\\"yourapikey\\\",\\n\\\"userid\\\": \\\"johndoe\\\"\\n}'\\nSave the JWT token from response\\n``\\nUpload Document\\n`bash\\nUpload document for ingestion\\ncurl -X POST \\\"http://localhost:8000/documents\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWT_TOKEN\\\" \\\\\\n-F \\\"file=@document.pdf\\\"\\nDocuments are automatically processed for vector and graph search\\n`\\nMulti-Modal Search\\n``bash\\n4a. Vector Search (Semantic similarity)\",\n  \"Document: README.md\\nSection 12:\\ncurl -X POST \\\"http://localhost:8000/search\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWTTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"query\\\": \\\"What are the company vacation policies?\\\",\\n\\\"searchtype\\\": \\\"vector\\\",\\n\\\"limit\\\": 10\\n}'\\n4b. Graph Search (Knowledge relationships)\\ncurl -X POST \\\"http://localhost:8000/search\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWTTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"query\\\": \\\"employee benefits structure\\\",\\n\\\"searchtype\\\": \\\"graph\\\",\\n\\\"limit\\\": 10\\n}'\\n4c. Hybrid Search (Vector + BM25 text search)\"\n]\n        \"Document: README.md\\nSection 13:\\ncurl -X POST \\\"http://localhost:8000/search\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWTTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"query\\\": \\\"vacation policy details\\\",\\n\\\"searchtype\\\": \\\"hybrid\\\",\\n\\\"limit\\\": 10,\\n\\\"textweight\\\": 0.3\\n}'\\n4d. Comprehensive Search (All methods combined)\\ncurl -X POST \\\"http://localhost:8000/search\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWTTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"query\\\": \\\"comprehensive company policy information\\\",\\n\\\"search_type\\\": \\\"comprehensive\\\",\\n\\\"limit\\\": 10\\n}'\\n``\\nInteractive Chat\\n``bash\\nChat with AI agent\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'localhost:8000/search', 'summary': 'The localhost:8000/search endpoint supports multi-modal search capabilities, including vector search for semantic similarity, graph search for knowledge relationships, and hybrid search combining vector and BM25 text search. It also offers a comprehensive search option that combines all methods. Users can specify the search type, query, and a limit for results. The endpoint is secured with JWT authentication. Example usage involves POST requests with JSON payloads containing the query and search parameters. New examples show specific queries for \"company vacation policies\", \"employee benefits structure\", \"vacation policy details\", and \"comprehensive company policy information\", with options for `searchtype` (vector, graph, hybrid, comprehensive) and `textweight` for hybrid search.', 'entity_types': ['Entity'], 'attributes': {'labels': ['Entity']}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{
  "summary": "The localhost:8000/search endpoint facilitates multi-modal search, encompassing vector search for semantic similarity, graph search for knowledge relationships, and hybrid search that merges vector and BM25 text search. It also provides a comprehensive search option integrating all methods. Users can define the search type, query, and a limit for the results. The endpoint is protected by JWT authentication. Example usage involves POST requests with JSON payloads detailing the query and search parameters. Specific examples demonstrate searches for 'company vacation policies', 'employee benefits structure', 'vacation policy details', and 'comprehensive company policy information', with options for `searchtype` (vector, graph, hybrid, comprehensive) and `textweight` for hybrid search."
}
```

2025-10-29 13:42:49,781 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-10-29 13:42:49,782 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-10-29 13:42:49,783 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:42:58,346 - graphiti_core.graphiti - INFO - Completed add_episode in 27157.135725021362 ms
2025-10-29 13:42:58,346 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_d778b089_1761724957
2025-10-29 13:42:58,351 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:04,895 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:06,849 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:27,075 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:27,080 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:27,085 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:27,091 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:27,095 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:27,099 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:27,102 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:27,106 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:27,110 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:27,113 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:27,117 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:27,119 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:27,123 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:27,125 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:27,128 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:27,131 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:27,133 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:27,136 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:27,138 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:27,141 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:28,585 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:28,586 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:28,588 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:28,589 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:28,591 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:28,593 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:28,595 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:28,596 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:28,598 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:28,600 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:28,601 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:28,602 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:28,604 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:28,607 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:28,608 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:28,610 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:28,611 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:28,613 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:28,614 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:28,616 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:28,618 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:28,622 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:28,681 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:28,686 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:44,415 - graphiti_core.graphiti - INFO - Completed add_episode in 46068.85623931885 ms
2025-10-29 13:43:44,416 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_d7e0399a_1761724957
2025-10-29 13:43:44,421 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:48,795 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:43:51,100 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:04,196 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:04,203 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:04,208 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:04,213 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:04,217 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:04,222 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:04,226 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:04,231 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:04,234 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:04,237 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:04,241 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:04,244 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:04,246 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:04,249 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:04,252 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:04,255 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:04,258 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:04,260 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:04,263 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:04,265 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:05,771 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:05,852 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:05,937 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:06,105 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:06,110 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:06,453 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:06,454 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:06,456 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:06,457 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:06,459 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:06,461 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:06,462 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:06,463 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:06,465 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:06,467 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:06,468 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:06,470 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:06,472 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:06,474 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:06,475 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:06,476 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:06,481 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:06,483 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:06,484 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:06,486 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:08,061 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-10-29 13:44:08,061 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Document: README.md\\nSection 5:\\nFile Structure\\n```\\nTenant/\\n README.md This comprehensive guide\\n requirements.txt Python dependencies\\n requirementsec2complete.txt Complete EC2 deployment dependencies\\n .env Environment configuration (create from template)\\n\\nCore Application Files\",\n  \"Document: README.md\\nSection 6:\\ninteractivemultitenantapi.py FastAPI server with tenant isolation\\n interactivemultitenantclihttp.py Rich CLI client with HTTP communication\\n multitenantagent.py Enhanced Pydantic AI agent\\n tenantmanager.py Neon project management & tenant lifecycle\\n tenantdataingestionservice.py Multi-modal search services\\n tenantgraphiticlient.py Neo4j + Graphiti with namespacing\\n authmiddleware.py JWT authentication & tenant context\\n\\nDeployment & Operations\",\n  \"Document: README.md\\nSection 7:\\nstartapi.sh API server startup script\\n startcli.sh CLI client startup script\\n EC2DEPLOYMENTGUIDE.md Complete AWS EC2 deployment guide\\n EC2DEPLOYMENTCHECKLIST.md Pre/post deployment verification\\n ec2quicksetup.sh Automated EC2 setup script\\n verifydeployment.sh Deployment verification script\\n\\nConfiguration & Schema\\n catalogschema.sql Catalog database schema for tenant metadata\\n deployment_guide.md Original deployment instructions\\n``\\nQuick Start\\nInstallation\\n``bash\\nClone and navigate to Tenant directory\\ncd Tenant/\\nCreate virtual environment\",\n  \"Document: README.md\\nSection 8:\\npython3 -m venv venv\\nsource venv/bin/activate On Windows: venv\\\\Scripts\\\\activate\\nInstall dependencies\\npip install -r requirements.txt\\n``\\nEnvironment Setup\\nCreate .env file:\\n``bash\\nNeon PostgreSQL Configuration (Project-per-Tenant)\\nNEONAPIKEY=yourneonapikeyhere\\nCATALOGDBURL=postgresql://username:password@ep-catalog.us-east-2.aws.neon.tech/neondb?sslmode=require\\nPOSTGRESURL=postgresql://username:password@ep-catalog.us-east-2.aws.neon.tech/neondb?sslmode=require\\nNeo4j Configuration (Local Desktop or Remote)\\nNEO4JURI=neo4j://localhost:7687\\nNEO4JURL=neo4j://localhost:7687\\nNEO4JUSERNAME=neo4j\\nNEO4JUSER=neo4j\\nNEO4JPASSWORD=yourneo4jpassword\\nNEO4JAUTH=neo4j/yourneo4j_password\\nAuthentication\",\n  \"Document: README.md\\nSection 9:\\nJWTSECRETKEY=your-super-secret-jwt-key-change-in-production\\nJWTALGORITHM=HS256\\nAI Providers\\nOPENAIAPIKEY=youropenaiapikey\\nGOOGLEAPIKEY=yourgoogleapikey Optional\\nANTHROPICAPIKEY=youranthropicapikey Optional\\nApplication Configuration\\nAPPENV=development\\nAPPHOST=127.0.0.1\\nAPPPORT=8000\\nLOGLEVEL=info\\n``\\nDatabase Setup\\n`bash\\nSetup catalog database (control plane) - if needed\\npsql \\\"$CATALOGDBURL\\\" -f catalogschema.sql\\n`\\nStart the System\\n`bash\\nMethod 1: Direct startup\\npython3 interactivemultitenantapi.py\\nMethod 2: Using startup scripts\\nchmod +x startapi.sh startcli.sh\\n./startapi.sh\\nIn another terminal for CLI\\n./startcli.sh\\n`\\nVerify Installation\\n``bash\",\n  \"Document: README.md\\nSection 10:\\nTest API health\\ncurl http://localhost:8000/health\\nRun deployment verification\\nchmod +x verifydeployment.sh\\n./verifydeployment.sh\\n``\\nVisit http://localhost:8000/docs for interactive API documentation.\\nUsage Examples\\nAuthentication & Setup\\n`bash\\nCreate a tenant\\ncurl -X POST \\\"http://localhost:8000/tenants\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"name\\\": \\\"Acme Corporation\\\",\\n\\\"email\\\": \\\"admin@acme.com\\\",\\n\\\"region\\\": \\\"aws-us-east-1\\\",\\n\\\"plan\\\": \\\"basic\\\"\\n}'\\nResponse includes tenant_id for authentication\\n`\\n Get Authentication Token\\n``bash\\nAuthenticate with tenant\",\n  \"Document: README.md\\nSection 11:\\ncurl -X POST \\\"http://localhost:8000/auth/login\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"tenantid\\\": \\\"TENANTIDFROMABOVE\\\",\\n\\\"apikey\\\": \\\"yourapikey\\\",\\n\\\"userid\\\": \\\"johndoe\\\"\\n}'\\nSave the JWT token from response\\n``\\nUpload Document\\n`bash\\nUpload document for ingestion\\ncurl -X POST \\\"http://localhost:8000/documents\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWT_TOKEN\\\" \\\\\\n-F \\\"file=@document.pdf\\\"\\nDocuments are automatically processed for vector and graph search\\n`\\nMulti-Modal Search\\n``bash\\n4a. Vector Search (Semantic similarity)\",\n  \"Document: README.md\\nSection 12:\\ncurl -X POST \\\"http://localhost:8000/search\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWTTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"query\\\": \\\"What are the company vacation policies?\\\",\\n\\\"searchtype\\\": \\\"vector\\\",\\n\\\"limit\\\": 10\\n}'\\n4b. Graph Search (Knowledge relationships)\\ncurl -X POST \\\"http://localhost:8000/search\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWTTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"query\\\": \\\"employee benefits structure\\\",\\n\\\"searchtype\\\": \\\"graph\\\",\\n\\\"limit\\\": 10\\n}'\\n4c. Hybrid Search (Vector + BM25 text search)\",\n  \"Document: README.md\\nSection 13:\\ncurl -X POST \\\"http://localhost:8000/search\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWTTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"query\\\": \\\"vacation policy details\\\",\\n\\\"searchtype\\\": \\\"hybrid\\\",\\n\\\"limit\\\": 10,\\n\\\"textweight\\\": 0.3\\n}'\\n4d. Comprehensive Search (All methods combined)\\ncurl -X POST \\\"http://localhost:8000/search\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWTTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"query\\\": \\\"comprehensive company policy information\\\",\\n\\\"search_type\\\": \\\"comprehensive\\\",\\n\\\"limit\\\": 10\\n}'\\n``\\nInteractive Chat\\n``bash\\nChat with AI agent\",\n  \"Document: README.md\\nSection 14:\\ncurl -X POST \\\"http://localhost:8000/chat\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWTTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"message\\\": \\\"Can you explain our remote work policy and its benefits?\\\",\\n\\\"sessionid\\\": \\\"optionalsessionid\\\"\\n}'\\n``\\n Interactive CLI Usage\\n``bash\\nStart the interactive CLI\\n./startcli.sh\\nOr with custom API URL\\n./start_cli.sh --api-url http://your-server:8000\\nCLI Features:\\nAuthenticate - Login with tenant credentials\\nCreate New Tenant - Set up new tenant\\n Show Tenant Info - View tenant details\\nUpload Document - Upload files for processing\\nAdvanced Search (Technical) - Multi-modal search options\\nChat Mode - Interactive AI conversation\"\n]\n        \"Document: README.md\\nSection 15:\\nAPI Health Check - System status\\nExit - Close application\\n``\\nCore Components\\nTenantManager (tenantmanager.py)\\nNeon Project Management: Automated project creation and lifecycle management via Neon API\\nDatabase Routing: Dynamic connection management to tenant-specific databases\\nCatalog Operations: Centralized tenant metadata and configuration management\\nIsolation Guarantees: Complete project-level separation ensuring zero cross-tenant access\\nTenantDataIngestionService (tenantdataingestionservice.py`)\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search capabilities\\nVector Search: Semantic similarity using pgvector in tenant databases\\n-\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'Semantic similarity', 'summary': 'This document describes a system with a dual interface: a FastAPI server and an interactive CLI client. It features an AI-powered Pydantic agent with over 10 tenant-aware tools, supporting multi-modal search (Vector, Graph, Hybrid, Comprehensive). Security is handled by JWT authentication with middleware validation. The system is production-ready with Supervisor process management and Nginx reverse proxy, optimized for AWS EC2 with deployment guides. It includes live integration with Neon PostgreSQL and Neo4j Desktop. The architecture supports multi-tenancy with project-per-tenant isolation in Neon and namespace isolation in Neo4j. The system allows for tenant creation, authentication via JWT, and document upload for ingestion into vector and graph databases. It also supports semantic similarity search, which is a core component of its multi-modal search capabilities. The system utilizes Neon PostgreSQL with pgvector for vector and hybrid search, and Neo4j with Graphiti for knowledge graph capabilities, ensuring complete data isolation per tenant.', 'entity_types': ['Entity'], 'attributes': {'labels': ['Entity']}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{"properties": {"summary": "This document describes a system with a dual interface: a FastAPI server and an interactive CLI client. It features an AI-powered Pydantic agent with over 10 tenant-aware tools, supporting multi-modal search (Vector, Graph, Hybrid, Comprehensive). Security is handled by JWT authentication with middleware validation. The system is production-ready with Supervisor process management and Nginx reverse proxy, optimized for AWS EC2 with deployment guides. It includes live integration with Neon PostgreSQL and Neo4j Desktop. The architecture supports multi-tenancy with project-per-tenant isolation in Neon and namespace isolation in Neo4j. The system allows for tenant creation, authentication via JWT, and document upload for ingestion into vector and graph databases. It also supports semantic similarity search, which is a core component of its multi-modal search capabilities. The system utilizes Neon PostgreSQL with pgvector for vector and hybrid search, and Neo4j with Graphiti for knowledge graph capabilities, ensuring complete data isolation per tenant. The system supports vector search for semantic similarity using pgvector in tenant databases."}, "required": ["summary"]}
```

2025-10-29 13:44:08,062 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-10-29 13:44:08,063 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-10-29 13:44:08,065 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:41,343 - graphiti_core.graphiti - INFO - Completed add_episode in 56927.03294754028 ms
2025-10-29 13:44:41,344 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_bbee06db_1761724957
2025-10-29 13:44:41,348 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:46,159 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:44:47,753 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:45:10,138 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:45:10,146 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:45:10,151 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:45:10,157 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:45:10,163 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:45:10,167 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:45:10,171 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:45:10,176 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:45:10,180 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:45:10,183 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:45:10,186 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:45:10,190 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:45:10,193 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:45:10,196 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:45:11,028 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:45:11,029 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:45:11,031 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:45:11,033 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:45:11,035 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:45:31,036 - graphiti_core.graphiti - INFO - Completed add_episode in 49692.45195388794 ms
2025-10-29 13:45:31,037 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_7db2880e_1761724957
2025-10-29 13:45:31,042 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:45:34,710 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:45:36,382 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:10,229 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:10,235 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:10,240 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:10,245 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:10,249 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:10,253 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:10,257 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:10,261 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:10,264 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:10,267 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:10,271 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:10,274 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:10,277 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:11,579 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:11,580 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:11,583 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:11,585 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:11,586 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:11,589 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:11,591 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:13,327 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-10-29 13:46:13,328 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Document: README.md\\nSection 7:\\nstartapi.sh API server startup script\\n startcli.sh CLI client startup script\\n EC2DEPLOYMENTGUIDE.md Complete AWS EC2 deployment guide\\n EC2DEPLOYMENTCHECKLIST.md Pre/post deployment verification\\n ec2quicksetup.sh Automated EC2 setup script\\n verifydeployment.sh Deployment verification script\\n\\nConfiguration & Schema\\n catalogschema.sql Catalog database schema for tenant metadata\\n deployment_guide.md Original deployment instructions\\n``\\nQuick Start\\nInstallation\\n``bash\\nClone and navigate to Tenant directory\\ncd Tenant/\\nCreate virtual environment\",\n  \"Document: README.md\\nSection 8:\\npython3 -m venv venv\\nsource venv/bin/activate On Windows: venv\\\\Scripts\\\\activate\\nInstall dependencies\\npip install -r requirements.txt\\n``\\nEnvironment Setup\\nCreate .env file:\\n``bash\\nNeon PostgreSQL Configuration (Project-per-Tenant)\\nNEONAPIKEY=yourneonapikeyhere\\nCATALOGDBURL=postgresql://username:password@ep-catalog.us-east-2.aws.neon.tech/neondb?sslmode=require\\nPOSTGRESURL=postgresql://username:password@ep-catalog.us-east-2.aws.neon.tech/neondb?sslmode=require\\nNeo4j Configuration (Local Desktop or Remote)\\nNEO4JURI=neo4j://localhost:7687\\nNEO4JURL=neo4j://localhost:7687\\nNEO4JUSERNAME=neo4j\\nNEO4JUSER=neo4j\\nNEO4JPASSWORD=yourneo4jpassword\\nNEO4JAUTH=neo4j/yourneo4j_password\\nAuthentication\",\n  \"Document: README.md\\nSection 9:\\nJWTSECRETKEY=your-super-secret-jwt-key-change-in-production\\nJWTALGORITHM=HS256\\nAI Providers\\nOPENAIAPIKEY=youropenaiapikey\\nGOOGLEAPIKEY=yourgoogleapikey Optional\\nANTHROPICAPIKEY=youranthropicapikey Optional\\nApplication Configuration\\nAPPENV=development\\nAPPHOST=127.0.0.1\\nAPPPORT=8000\\nLOGLEVEL=info\\n``\\nDatabase Setup\\n`bash\\nSetup catalog database (control plane) - if needed\\npsql \\\"$CATALOGDBURL\\\" -f catalogschema.sql\\n`\\nStart the System\\n`bash\\nMethod 1: Direct startup\\npython3 interactivemultitenantapi.py\\nMethod 2: Using startup scripts\\nchmod +x startapi.sh startcli.sh\\n./startapi.sh\\nIn another terminal for CLI\\n./startcli.sh\\n`\\nVerify Installation\\n``bash\",\n  \"Document: README.md\\nSection 10:\\nTest API health\\ncurl http://localhost:8000/health\\nRun deployment verification\\nchmod +x verifydeployment.sh\\n./verifydeployment.sh\\n``\\nVisit http://localhost:8000/docs for interactive API documentation.\\nUsage Examples\\nAuthentication & Setup\\n`bash\\nCreate a tenant\\ncurl -X POST \\\"http://localhost:8000/tenants\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"name\\\": \\\"Acme Corporation\\\",\\n\\\"email\\\": \\\"admin@acme.com\\\",\\n\\\"region\\\": \\\"aws-us-east-1\\\",\\n\\\"plan\\\": \\\"basic\\\"\\n}'\\nResponse includes tenant_id for authentication\\n`\\n Get Authentication Token\\n``bash\\nAuthenticate with tenant\",\n  \"Document: README.md\\nSection 11:\\ncurl -X POST \\\"http://localhost:8000/auth/login\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"tenantid\\\": \\\"TENANTIDFROMABOVE\\\",\\n\\\"apikey\\\": \\\"yourapikey\\\",\\n\\\"userid\\\": \\\"johndoe\\\"\\n}'\\nSave the JWT token from response\\n``\\nUpload Document\\n`bash\\nUpload document for ingestion\\ncurl -X POST \\\"http://localhost:8000/documents\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWT_TOKEN\\\" \\\\\\n-F \\\"file=@document.pdf\\\"\\nDocuments are automatically processed for vector and graph search\\n`\\nMulti-Modal Search\\n``bash\\n4a. Vector Search (Semantic similarity)\",\n  \"Document: README.md\\nSection 12:\\ncurl -X POST \\\"http://localhost:8000/search\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWTTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"query\\\": \\\"What are the company vacation policies?\\\",\\n\\\"searchtype\\\": \\\"vector\\\",\\n\\\"limit\\\": 10\\n}'\\n4b. Graph Search (Knowledge relationships)\\ncurl -X POST \\\"http://localhost:8000/search\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWTTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"query\\\": \\\"employee benefits structure\\\",\\n\\\"searchtype\\\": \\\"graph\\\",\\n\\\"limit\\\": 10\\n}'\\n4c. Hybrid Search (Vector + BM25 text search)\",\n  \"Document: README.md\\nSection 13:\\ncurl -X POST \\\"http://localhost:8000/search\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWTTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"query\\\": \\\"vacation policy details\\\",\\n\\\"searchtype\\\": \\\"hybrid\\\",\\n\\\"limit\\\": 10,\\n\\\"textweight\\\": 0.3\\n}'\\n4d. Comprehensive Search (All methods combined)\\ncurl -X POST \\\"http://localhost:8000/search\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWTTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"query\\\": \\\"comprehensive company policy information\\\",\\n\\\"search_type\\\": \\\"comprehensive\\\",\\n\\\"limit\\\": 10\\n}'\\n``\\nInteractive Chat\\n``bash\\nChat with AI agent\",\n  \"Document: README.md\\nSection 14:\\ncurl -X POST \\\"http://localhost:8000/chat\\\" \\\\\\n-H \\\"Authorization: Bearer YOURJWTTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"message\\\": \\\"Can you explain our remote work policy and its benefits?\\\",\\n\\\"sessionid\\\": \\\"optionalsessionid\\\"\\n}'\\n``\\n Interactive CLI Usage\\n``bash\\nStart the interactive CLI\\n./startcli.sh\\nOr with custom API URL\\n./start_cli.sh --api-url http://your-server:8000\\nCLI Features:\\nAuthenticate - Login with tenant credentials\\nCreate New Tenant - Set up new tenant\\n Show Tenant Info - View tenant details\\nUpload Document - Upload files for processing\\nAdvanced Search (Technical) - Multi-modal search options\\nChat Mode - Interactive AI conversation\",\n  \"Document: README.md\\nSection 15:\\nAPI Health Check - System status\\nExit - Close application\\n``\\nCore Components\\nTenantManager (tenantmanager.py)\\nNeon Project Management: Automated project creation and lifecycle management via Neon API\\nDatabase Routing: Dynamic connection management to tenant-specific databases\\nCatalog Operations: Centralized tenant metadata and configuration management\\nIsolation Guarantees: Complete project-level separation ensuring zero cross-tenant access\\nTenantDataIngestionService (tenantdataingestionservice.py`)\\nMulti-Modal Search: Vector, Graph, Hybrid, and Comprehensive search capabilities\\nVector Search: Semantic similarity using pgvector in tenant databases\\n-\",\n  \"Document: README.md\\nSection 16:\\nHybrid Search: Combined vector + BM25 text search with configurable weights\\nGraph Integration: Seamless integration with Graphiti for knowledge relationships\\nTenantGraphitiClient (tenantgraphiticlient.py)\\nNamespace Isolation: Complete tenant separation using groupid namespacing\\nKnowledge Graph: Entity and relationship extraction with temporal tracking\\nGraph Analytics: Advanced queries and relationship discovery within tenant boundaries\\nEpisode Management: Document ingestion with automatic knowledge graph updates\\nMultiTenantRAGAgent (multitenant_agent.py)\\nEnhanced Pydantic AI: 10+ specialized tools with tenant context injection\\n-\"\n]\n        \"Document: README.md\\nSection 17:\\nIntelligent Routing: Automatic tool selection based on query complexity\\nDual Storage: Seamlessly combines vector and graph search results\\nContext Preservation: Maintains tenant isolation across all agent operations\\nAuthentication & Security (authmiddleware.py)\\nJWT Authentication: Secure token-based authentication with tenant claims\\nContext Injection: Automatic tenant context validation and routing\\nPermission Management: Fine-grained access control and audit logging\\nCross-Tenant Prevention: Multiple layers of isolation validation\\nInteractive CLI (interactivemultitenantcli_http.py)\\nRich Console Interface: Beautiful CLI with progress indicators and tables\\n-\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'README.md', 'summary': 'This document outlines a production-ready, multi-tenant Retrieval-Augmented Generation (RAG) system with complete data isolation. It features a dual interface with a FastAPI server (port 8000) and an interactive CLI client, powered by an enhanced Pydantic AI agent with over 10 tenant-aware tools. The system supports multi-modal search including vector, graph, hybrid, and comprehensive search capabilities. It utilizes JWT authentication for secure tenant context with middleware validation. The system is production-ready, optimized for AWS EC2, and includes Supervisor process management and Nginx reverse proxy for reliability. It offers live integration with Neon PostgreSQL (cloud) for vector search (pgvector) and hybrid search (BM25), and Neo4j Desktop (local/remote) for graph capabilities, ensuring project-per-tenant database isolation and namespace-based graph isolation. Deployment guides for AWS EC2 and local setups are provided. The file structure includes core application files and configuration files like .env and requirements.txt. Key components include interactivemultitenantapi.py (FastAPI server), interactivemultitenantclihttp.py (CLI client), multitenantagent.py (AI agent), tenantmanager.py (Neon project management), tenantdataingestionservice.py (search services), tenantgraphiticlient.py (Neo4j client), and authmiddleware.py (authentication). The file structure includes a Tenant directory with README.md, requirements.txt, requirementsec2complete.txt, and .env. Core application files and deployment scripts like startapi.sh, startcli.sh, EC2DEPLOYMENTGUIDE.md, and ec2quicksetup.sh are also present. Database schema for catalog is provided in catalogschema.sql. Environment setup requires creating a .env file with Neon PostgreSQL and Neo4j configurations, including JWT and AI provider API keys. The system can be started directly or using startup scripts. Installation involves cloning the repository, creating a virtual environment, and installing dependencies. The system can be verified using `curl http://localhost:8000/health` and `verifydeployment.sh`. API documentation is available at http://localhost:8000/docs. Examples for creating a tenant and getting an authentication token are provided, along with multi-modal search examples for vector and graph queries. The system also supports interactive chat functionality and provides detailed usage examples for authentication, document upload, and various search types (vector, graph, hybrid, comprehensive).', 'entity_types': ['Entity'], 'attributes': {'labels': ['Entity']}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{
  "summary": "This document outlines a production-ready, multi-tenant Retrieval-Augmented Generation (RAG) system with complete data isolation. It features a dual interface with a FastAPI server (port 8000) and an interactive CLI client, powered by an enhanced Pydantic AI agent with over 10 tenant-aware tools. The system supports multi-modal search including vector, graph, hybrid, and comprehensive search capabilities. It utilizes JWT authentication for secure tenant context with middleware validation. The system is production-ready, optimized for AWS EC2, and includes Supervisor process management and Nginx reverse proxy for reliability. It offers live integration with Neon PostgreSQL (cloud) for vector search (pgvector) and hybrid search (BM25), and Neo4j Desktop (local/remote) for graph capabilities, ensuring project-per-tenant database isolation and namespace-based graph isolation. Deployment guides for AWS EC2 and local setups are provided. The file structure includes core application files and configuration files like .env and requirements.txt. Key components include interactivemultitenantapi.py (FastAPI server), interactivemultitenantclihttp.py (CLI client), multitenantagent.py (AI agent), tenantmanager.py (Neon project management), tenantdataingestionservice.py (search services), tenantgraphiticlient.py (Neo4j client), and authmiddleware.py (authentication). The file structure includes a Tenant directory with README.md, requirements.txt, requirementsec2complete.txt, and .env. Core application files and deployment scripts like startapi.sh, startcli.sh, EC2DEPLOYMENTGUIDE.md, and ec2quicksetup.sh are also present. Database schema for catalog is provided in catalogschema.sql. Environment setup requires creating a .env file with Neon PostgreSQL and Neo4j configurations, including JWT and AI provider API keys. The system can be started directly or using startup scripts. Installation involves cloning the repository, creating a virtual environment, and installing dependencies. The system can be verified using `curl http://localhost:8000/health` and `verifydeployment.sh`. API documentation is available at http://localhost:8000/docs. Examples for creating a tenant and getting an authentication token are provided, along with multi-modal search examples for vector and graph queries. The system also supports interactive chat functionality and provides detailed usage examples for authentication, document upload, and various search types (vector, graph, hybrid, comprehensive)."
}
```

2025-10-29 13:46:13,329 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-10-29 13:46:13,329 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-10-29 13:46:13,331 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:30,227 - graphiti_core.graphiti - INFO - Completed add_episode in 59190.250873565674 ms
2025-10-29 13:46:30,228 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_94d13d8d-7199-4cfe-88b1-78edda8a0b80_11cca8b2_1761724957
2025-10-29 13:46:30,234 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:34,102 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:36,652 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:59,931 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:59,937 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:59,942 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:59,947 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:59,951 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:59,956 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:59,961 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:59,964 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:59,968 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:59,972 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:59,975 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:59,978 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:59,981 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:59,984 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:59,987 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:59,990 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:59,992 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:59,995 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:46:59,997 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:47:00,000 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:47:01,359 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:47:01,447 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:47:01,541 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:47:01,614 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:47:01,620 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:47:01,758 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:47:01,760 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:47:01,870 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:47:01,874 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:47:01,876 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:47:01,877 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:47:01,879 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:47:01,881 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:47:01,882 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:47:01,884 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:47:01,886 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:47:01,887 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:47:01,889 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:47:01,890 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:47:01,892 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:47:01,893 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:47:01,895 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:47:01,898 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 13:47:07,028 - interactive_multi_tenant_api - INFO - Shutting down Multi-Tenant RAG API...
2025-10-29 13:57:50,929 - __main__ - INFO - Starting Interactive Multi-Tenant RAG API on 127.0.0.1:8000
2025-10-29 13:57:50,948 - interactive_multi_tenant_api - INFO - Starting Multi-Tenant RAG API...
2025-10-29 13:57:50,948 - interactive_multi_tenant_api - INFO - Neo4j URI: neo4j://127.0.0.1:7687
2025-10-29 13:57:50,948 - interactive_multi_tenant_api - INFO - Neo4j User: neo4j
2025-10-29 13:57:50,948 - interactive_multi_tenant_api - INFO - Neo4j Password: ***
2025-10-29 13:57:50,948 - tenant_manager - INFO - TenantManager initialized with Graphiti client
2025-10-29 13:57:50,948 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-10-29 13:57:50,948 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-10-29 13:57:50,948 - multi_tenant_ingestion - INFO - Multi-tenant ingestion pipeline initialized
2025-10-29 13:57:50,948 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-10-29 13:57:50,948 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-10-29 13:57:50,948 - interactive_multi_tenant_api - INFO - Tenant manager initialized
2025-10-29 13:57:50,959 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-10-29 13:57:50,959 - interactive_multi_tenant_api - INFO - Tenant ingestion service initialized
2025-10-29 13:57:50,959 - auth_middleware - INFO - JWT Authenticator initialized
2025-10-29 13:57:50,959 - interactive_multi_tenant_api - INFO - JWT authenticator initialized
2025-10-29 13:57:50,959 - interactive_multi_tenant_api - INFO - 🎯 Multi-Tenant RAG API ready - all backend logs will appear in this terminal
2025-10-29 13:57:50,959 - interactive_multi_tenant_api - INFO - 📊 Backend activity from CLI and API operations will be shown below:
2025-10-29 13:58:00,302 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-10-29 13:58:00,478 - catalog_database - INFO - Catalog database connection test successful
2025-10-29 13:58:00,479 - tenant_graphiti_client - INFO - Applied Graphiti performance optimizations for production reliability
2025-10-29 13:58:00,480 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 13:58:00,524 - robust_gemini_client - INFO - RobustGeminiClient initialized with temperature=0.0 for deterministic JSON output
2025-10-29 13:58:00,525 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 13:58:00,551 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 13:58:00,637 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_uuid IF NOT EXISTS FOR (e:Entity) ON (e.uuid)` has no effect.} {description: `RANGE INDEX entity_uuid FOR (e:Entity) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX entity_uuid IF NOT EXISTS FOR (n:Entity) ON (n.uuid)'
2025-10-29 13:58:00,639 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX community_uuid IF NOT EXISTS FOR (e:Community) ON (e.uuid)` has no effect.} {description: `RANGE INDEX community_uuid FOR (e:Community) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX community_uuid IF NOT EXISTS FOR (n:Community) ON (n.uuid)'
2025-10-29 13:58:00,639 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_uuid IF NOT EXISTS FOR (e:Episodic) ON (e.uuid)` has no effect.} {description: `RANGE INDEX episode_uuid FOR (e:Episodic) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX episode_uuid IF NOT EXISTS FOR (n:Episodic) ON (n.uuid)'
2025-10-29 13:58:00,640 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX has_member_uuid FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)'
2025-10-29 13:58:00,641 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX relation_uuid FOR ()-[e:RELATES_TO]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)'
2025-10-29 13:58:00,641 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX mention_uuid FOR ()-[e:MENTIONS]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)'
2025-10-29 13:58:00,642 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX relation_group_id FOR ()-[e:RELATES_TO]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)'
2025-10-29 13:58:00,643 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.name)` has no effect.} {description: `RANGE INDEX name_entity_index FOR (e:Entity) ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.name)'
2025-10-29 13:58:00,643 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)'
2025-10-29 13:58:00,643 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_entity_index FOR (e:Entity) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.created_at)'
2025-10-29 13:58:00,644 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_group_id IF NOT EXISTS FOR (e:Entity) ON (e.group_id)` has no effect.} {description: `RANGE INDEX entity_group_id FOR (e:Entity) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX entity_group_id IF NOT EXISTS FOR (n:Entity) ON (n.group_id)'
2025-10-29 13:58:00,644 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_group_id IF NOT EXISTS FOR (e:Episodic) ON (e.group_id)` has no effect.} {description: `RANGE INDEX episode_group_id FOR (e:Episodic) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX episode_group_id IF NOT EXISTS FOR (n:Episodic) ON (n.group_id)'
2025-10-29 13:58:00,644 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` has no effect.} {description: `RANGE INDEX invalid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` already exists.} {position: None} for query: 'CREATE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)'
2025-10-29 13:58:00,644 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)'
2025-10-29 13:58:00,644 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_episodic_index FOR (e:Episodic) ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.valid_at)'
2025-10-29 13:58:00,645 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX mention_group_id FOR ()-[e:MENTIONS]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)'
2025-10-29 13:58:00,645 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` has no effect.} {description: `RANGE INDEX expired_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` already exists.} {position: None} for query: 'CREATE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)'
2025-10-29 13:58:00,646 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_episodic_index FOR (e:Episodic) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.created_at)'
2025-10-29 13:58:00,646 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)` has no effect.} {description: `RANGE INDEX name_edge_index FOR ()-[e:RELATES_TO]-() ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)'
2025-10-29 13:58:00,646 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX episode_content IF NOT EXISTS FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` has no effect.} {description: `FULLTEXT INDEX episode_content FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX episode_content IF NOT EXISTS \n            FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]'
2025-10-29 13:58:00,647 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` has no effect.} {description: `FULLTEXT INDEX node_name_and_summary FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS \n            FOR (n:Entity) ON EACH [n.name, n.summary, n.group_id]'
2025-10-29 13:58:00,647 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX community_name IF NOT EXISTS FOR (e:Community) ON EACH [e.name, e.group_id]` has no effect.} {description: `FULLTEXT INDEX community_name FOR (e:Community) ON EACH [e.name, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX community_name IF NOT EXISTS \n            FOR (n:Community) ON EACH [n.name, n.group_id]'
2025-10-29 13:58:00,647 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` has no effect.} {description: `FULLTEXT INDEX edge_name_and_fact FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS \n            FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]'
2025-10-29 13:58:00,647 - graphiti_ingestion_manager - INFO - GraphitiIngestionManager initialized for reliable episode ingestion (max_content_length=1200)
2025-10-29 13:58:00,647 - tenant_graphiti_client - INFO - 📏 Knowledge graph episodes will be truncated at 1200 characters
2025-10-29 13:58:00,647 - tenant_graphiti_client - INFO - TenantGraphitiClient initialized successfully with robust LLM: gemini-2.0-flash-thinking-exp-01-21
2025-10-29 13:58:00,647 - tenant_graphiti_client - INFO - ✅ Knowledge graph ingestion is now deterministic and reliable
2025-10-29 13:58:18,959 - auth_middleware - INFO - Created access token for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6
2025-10-29 13:59:54,367 - interactive_multi_tenant_api - INFO - Document upload for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6: vision.md -> vector database + knowledge graph
2025-10-29 13:59:54,368 - tenant_data_ingestion_service - INFO - Starting document ingestion for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6: vision.md
2025-10-29 13:59:54,368 - tenant_data_ingestion_service - INFO - Ingestion options: vector database + knowledge graph
2025-10-29 13:59:57,247 - tenant_data_ingestion_service - INFO - Creating chunks for document: vision.md
2025-10-29 13:59:57,249 - tenant_data_ingestion_service - INFO - Generating embeddings for 6 chunks
2025-10-29 13:59:57,250 - ingestion.embedder - INFO - Generating embeddings for 6 chunks
2025-10-29 13:59:58,862 - ingestion.embedder - INFO - Processed batch 1/1
2025-10-29 13:59:58,862 - ingestion.embedder - INFO - Generated embeddings for 6 chunks (model: embedding-001, dimensions: 768)
2025-10-29 14:00:03,415 - tenant_data_ingestion_service - INFO - Created 6 chunks for document 29092aa5-f3a8-424d-833d-f4438c6a7aa7 (6 with valid embeddings, 0 without)
2025-10-29 14:00:03,632 - tenant_data_ingestion_service - INFO - Vector ingestion: Created 6 chunks with embeddings
2025-10-29 14:00:03,634 - tenant_data_ingestion_service - INFO - Adding 6 chunks to tenant e3e43017-ed5e-49bb-a90b-f478782ddde6 graph namespace: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6
2025-10-29 14:00:03,634 - tenant_graphiti_client - INFO - 🚀 Starting production KG ingestion for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6: 6 chunks from 'vision.md'
2025-10-29 14:00:03,634 - graphiti_ingestion_manager - INFO - Starting KG ingestion for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6: 6 chunks from document 'vision.md'
2025-10-29 14:00:03,654 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:00:06,755 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:00:08,272 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:00:21,751 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:00:21,758 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:00:21,764 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:00:21,768 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:00:21,773 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:00:24,328 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-10-29 14:00:24,328 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        []\n        \"Document: vision.md\\nSection 1:\\nProduct Vision - RAG Chatbot for Financial Data\\nVision Statement\\nTo democratize access to historical financial data by providing an intuitive, conversational interface that transforms complex NIFTY index data into easily digestible insights for beginner-level users, while maintaining complete data privacy through local-only deployment.\\nTarget Users / Personas\\nFinancial Beginners: Individuals new to Indian stock markets who need simple, conversational access to historical NIFTY index data without complex financial jargon.\\nPrivacy-Conscious Users: Users who require local data processing due to data privacy concerns or compliance requirements in financial contexts.\\nProblem Statements\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'RAG Chatbot for Financial Data', 'summary': '', 'entity_types': ['Entity'], 'attributes': {}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{"properties": {"summary": "The RAG Chatbot for Financial Data aims to democratize access to historical financial data, specifically NIFTY index data. It provides an intuitive, conversational interface designed for beginner-level users, transforming complex data into easily digestible insights. A key feature is its commitment to data privacy through local-only deployment, catering to users concerned about data security or compliance. The target audience includes financial beginners who need simple, jargon-free access to data and privacy-conscious users who require local data processing."}, "required": ["summary"], "title": "EntityAttributes_a2aee4eaef844aa9815383652c474514", "type": "object"}
```

2025-10-29 14:00:24,329 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-10-29 14:00:24,329 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-10-29 14:00:24,331 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:00:27,383 - graphiti_core.graphiti - INFO - Completed add_episode in 23747.408151626587 ms
2025-10-29 14:00:27,383 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_ac595ac7_1761726603
2025-10-29 14:00:27,388 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:00:32,049 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:00:33,721 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:00:56,628 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:00:56,634 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:00:56,639 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:00:56,644 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:00:56,647 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:00:56,649 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:00:56,651 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:00:56,654 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:00:56,656 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:00:56,658 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:00:56,660 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:00:56,662 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:00:56,665 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:00:56,668 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:00:56,671 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:00:56,674 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:00:56,676 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:00:56,679 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:00:58,642 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:03,192 - graphiti_core.graphiti - INFO - Completed add_episode in 35808.07876586914 ms
2025-10-29 14:01:03,192 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_c1b250d8_1761726603
2025-10-29 14:01:03,195 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:10,553 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:13,573 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:37,786 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:37,792 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:37,797 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:37,803 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:37,806 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:37,810 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:37,812 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:37,814 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:37,816 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:37,819 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:37,820 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:37,822 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:37,825 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:37,827 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:37,829 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:37,831 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:37,834 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:37,837 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:37,839 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:37,841 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:38,976 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:39,133 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-10-29 14:01:39,133 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Document: vision.md\\nSection 1:\\nProduct Vision - RAG Chatbot for Financial Data\\nVision Statement\\nTo democratize access to historical financial data by providing an intuitive, conversational interface that transforms complex NIFTY index data into easily digestible insights for beginner-level users, while maintaining complete data privacy through local-only deployment.\\nTarget Users / Personas\\nFinancial Beginners: Individuals new to Indian stock markets who need simple, conversational access to historical NIFTY index data without complex financial jargon.\\nPrivacy-Conscious Users: Users who require local data processing due to data privacy concerns or compliance requirements in financial contexts.\\nProblem Statements\",\n  \"Document: vision.md\\nSection 2:\\nComplex Data Access: Historical financial data is typically stored in technical formats (CSV, PDF, TXT) that require specialized knowledge to interpret and query effectively.\\nPrivacy & Security Concerns: Users need to analyze financial data without exposing sensitive information to external services or cloud platforms.\\nTechnical Barriers: Traditional data analysis tools require programming knowledge or complex software, creating barriers for beginners wanting to explore financial data.\\nCore Features / Capabilities\\nDocument Upload & Processing: Seamless ingestion of financial documents (CSV, PDF, TXT) containing historical NIFTY index data with automatic parsing and storage.\\n-\"\n]\n        \"Document: vision.md\\nSection 3:\\nConversational Query Interface: Natural language interaction allowing users to ask questions about historical price details without technical query syntax.\\nLocal RAG Implementation: Retrieval-Augmented Generation using local embedding models and Chroma DB for accurate, context-aware responses.\\nOffline Operation: Complete functionality without internet connectivity after initial setup, ensuring data privacy and independence.\\nBusiness Goals / Success Metrics\\nAccuracy Target: Achieve exact price matching for historical NIFTY index queries with 100% accuracy for available data.\\nUser Experience: Enable beginner users to successfully retrieve financial information through natural language queries without technical training.\\n-\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'Users', 'summary': 'The RAG Chatbot for Financial Data aims to democratize access to historical financial data, specifically NIFTY index data, for beginner-level users through an intuitive, conversational interface. It prioritizes data privacy by offering local-only deployment. The target users include financial beginners who need simple access to data without jargon and privacy-conscious users concerned about data security. The chatbot addresses problems such as complex data access, privacy and security concerns, and technical barriers associated with traditional data analysis tools. Key features include seamless document upload and processing of financial documents like CSV, PDF, and TXT.', 'entity_types': ['Entity'], 'attributes': {'labels': ['Entity']}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{
  "summary": "The RAG Chatbot for Financial Data aims to democratize access to historical financial data, specifically NIFTY index data, for beginner-level users through an intuitive, conversational interface. It prioritizes data privacy by offering local-only deployment. The target users include financial beginners who need simple access to data without jargon and privacy-conscious users concerned about data security. The chatbot addresses problems such as complex data access, privacy and security concerns, and technical barriers associated with traditional data analysis tools. Key features include seamless document upload and processing of financial documents like CSV, PDF, and TXT, a conversational query interface for natural language interaction, local RAG implementation using Chroma DB, and offline operation. Business goals include achieving 100% accuracy for historical NIFTY index queries and enabling beginner users to retrieve financial information without technical training."
}
```

2025-10-29 14:01:39,133 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-10-29 14:01:39,134 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-10-29 14:01:39,135 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:39,301 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:39,642 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:39,649 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:39,657 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:39,693 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:39,985 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:39,987 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:39,989 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:39,990 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:39,991 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:39,994 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:39,995 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:50,390 - graphiti_core.graphiti - INFO - Completed add_episode in 47197.386026382446 ms
2025-10-29 14:01:50,390 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_0a4477e9_1761726603
2025-10-29 14:01:50,394 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:54,491 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:01:55,955 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:12,617 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:12,624 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:12,640 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:12,649 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:12,654 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:12,659 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:12,662 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:12,665 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:12,667 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:12,670 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:14,400 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:14,403 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:14,405 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:14,408 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:14,410 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:23,290 - graphiti_core.graphiti - INFO - Completed add_episode in 32900.2959728241 ms
2025-10-29 14:02:23,291 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_cd2f076f_1761726603
2025-10-29 14:02:23,294 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:28,110 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:30,125 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:48,562 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:48,568 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:48,573 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:48,578 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:48,581 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:48,583 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:48,588 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:48,592 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:48,596 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:48,599 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:48,603 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:48,606 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:48,609 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:48,611 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:48,615 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:48,617 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:48,620 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:48,623 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:48,625 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:48,628 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:50,289 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:50,342 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:50,344 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:50,345 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:50,347 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:50,348 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:50,351 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:50,352 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:50,354 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:50,446 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:50,467 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-10-29 14:02:50,468 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Document: vision.md\\nSection 1:\\nProduct Vision - RAG Chatbot for Financial Data\\nVision Statement\\nTo democratize access to historical financial data by providing an intuitive, conversational interface that transforms complex NIFTY index data into easily digestible insights for beginner-level users, while maintaining complete data privacy through local-only deployment.\\nTarget Users / Personas\\nFinancial Beginners: Individuals new to Indian stock markets who need simple, conversational access to historical NIFTY index data without complex financial jargon.\\nPrivacy-Conscious Users: Users who require local data processing due to data privacy concerns or compliance requirements in financial contexts.\\nProblem Statements\",\n  \"Document: vision.md\\nSection 2:\\nComplex Data Access: Historical financial data is typically stored in technical formats (CSV, PDF, TXT) that require specialized knowledge to interpret and query effectively.\\nPrivacy & Security Concerns: Users need to analyze financial data without exposing sensitive information to external services or cloud platforms.\\nTechnical Barriers: Traditional data analysis tools require programming knowledge or complex software, creating barriers for beginners wanting to explore financial data.\\nCore Features / Capabilities\\nDocument Upload & Processing: Seamless ingestion of financial documents (CSV, PDF, TXT) containing historical NIFTY index data with automatic parsing and storage.\\n-\",\n  \"Document: vision.md\\nSection 3:\\nConversational Query Interface: Natural language interaction allowing users to ask questions about historical price details without technical query syntax.\\nLocal RAG Implementation: Retrieval-Augmented Generation using local embedding models and Chroma DB for accurate, context-aware responses.\\nOffline Operation: Complete functionality without internet connectivity after initial setup, ensuring data privacy and independence.\\nBusiness Goals / Success Metrics\\nAccuracy Target: Achieve exact price matching for historical NIFTY index queries with 100% accuracy for available data.\\nUser Experience: Enable beginner users to successfully retrieve financial information through natural language queries without technical training.\\n-\",\n  \"Document: vision.md\\nSection 4:\\nDeployment Success: Ensure seamless local installation and operation across standard Python environments with minimal dependencies.\\nScope & Boundaries\\nIn Scope:\\nHistorical NIFTY index price data processing and retrieval\\nSupport for CSV, PDF, and TXT document formats\\nWeb-based or command-line interface options\\nLocal deployment using Python, Flask/FastAPI, and Chroma DB\\nBasic testing and validation framework\\nOut of Scope:\\nReal-time or live market data feeds\\nAdvanced financial analysis or predictive modeling\\nMulti-user or enterprise deployment features\\nIntegration with external financial APIs or services\\nOverseas market data (reserved for future phases)\\nTimeline / Milestones\"\n]\n        \"Document: vision.md\\nSection 5:\\nPhase 1 (Proof of Concept): Core RAG functionality with basic document processing and query capabilities for NIFTY index data.\\nFuture Phase 2: Expansion to include overseas market data (S&P 500, FTSE, etc.) and enhanced analytical capabilities.\\nStrategic Differentiators\\nPrivacy-First Architecture: Complete local operation ensures sensitive financial data never leaves the user's machine, addressing critical privacy concerns.\\nBeginner-Friendly Interface: Conversational approach removes technical barriers, making financial data accessible to users without programming or finance expertise.\\n-\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'FTSE', 'summary': '', 'entity_types': ['Entity'], 'attributes': {}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{
  "summary": "The FTSE is mentioned as a potential future expansion for the RAG Chatbot for Financial Data project. Currently, the project focuses on NIFTY index data. Future Phase 2 plans to expand to include overseas market data such as the S&P 500 and FTSE, along with enhanced analytical capabilities. This expansion aims to broaden the chatbot's scope beyond Indian markets."
}
```

2025-10-29 14:02:50,468 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-10-29 14:02:50,468 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-10-29 14:02:50,468 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:02:50,479 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:03:00,753 - graphiti_core.graphiti - INFO - Completed add_episode in 37461.56597137451 ms
2025-10-29 14:03:00,753 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_0d259a12_1761726603
2025-10-29 14:03:00,757 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:03:03,332 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:03:05,179 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:03:14,413 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:03:14,418 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:03:14,426 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:03:14,431 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:03:14,437 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:03:15,725 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:03:23,360 - graphiti_core.graphiti - INFO - Completed add_episode in 22607.204914093018 ms
2025-10-29 14:03:23,360 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_33fc1ca5_1761726603
2025-10-29 14:03:23,360 - graphiti_ingestion_manager - INFO - KG ingestion completed for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6: 6/6 episodes succeeded, 0 failed
2025-10-29 14:03:23,360 - tenant_graphiti_client - INFO - ✅ Perfect KG ingestion for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6: 6/6 episodes succeeded
2025-10-29 14:03:23,360 - tenant_data_ingestion_service - INFO - ✅ Successfully added 6 episodes to tenant e3e43017-ed5e-49bb-a90b-f478782ddde6 graph namespace
2025-10-29 14:03:23,360 - tenant_data_ingestion_service - INFO - Graph ingestion: Created episode 6
2025-10-29 14:03:23,360 - tenant_data_ingestion_service - INFO - Successfully ingested document 29092aa5-f3a8-424d-833d-f4438c6a7aa7 for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6 in 208992.38ms
2025-10-29 14:05:00,289 - interactive_multi_tenant_api - INFO - Document upload for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6: deployment_guide.md -> vector database + knowledge graph
2025-10-29 14:05:00,291 - tenant_data_ingestion_service - INFO - Starting document ingestion for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6: deployment_guide.md
2025-10-29 14:05:00,291 - tenant_data_ingestion_service - INFO - Ingestion options: vector database + knowledge graph
2025-10-29 14:05:03,848 - tenant_data_ingestion_service - INFO - Creating chunks for document: deployment_guide.md
2025-10-29 14:05:03,861 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 14:05:03,899 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:05:25,790 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 14:05:25,832 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:05:53,802 - tenant_data_ingestion_service - INFO - Generating embeddings for 23 chunks
2025-10-29 14:05:53,803 - ingestion.embedder - INFO - Generating embeddings for 23 chunks
2025-10-29 14:05:55,177 - ingestion.embedder - INFO - Processed batch 1/1
2025-10-29 14:05:55,177 - ingestion.embedder - INFO - Generated embeddings for 23 chunks (model: embedding-001, dimensions: 768)
2025-10-29 14:06:04,724 - tenant_data_ingestion_service - INFO - Created 23 chunks for document c0b14090-3b93-48f2-93bc-58408190d0ea (23 with valid embeddings, 0 without)
2025-10-29 14:06:04,953 - tenant_data_ingestion_service - INFO - Vector ingestion: Created 23 chunks with embeddings
2025-10-29 14:06:04,960 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 14:06:04,998 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:06:27,762 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 14:06:27,801 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:06:52,596 - tenant_data_ingestion_service - INFO - Adding 25 chunks to tenant e3e43017-ed5e-49bb-a90b-f478782ddde6 graph namespace: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6
2025-10-29 14:06:52,596 - tenant_graphiti_client - INFO - 🚀 Starting production KG ingestion for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6: 25 chunks from 'deployment_guide.md'
2025-10-29 14:06:52,596 - graphiti_ingestion_manager - INFO - Starting KG ingestion for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6: 25 chunks from document 'deployment_guide.md'
2025-10-29 14:06:52,605 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:06:55,746 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:06:56,815 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:15,408 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:15,414 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:15,421 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:15,427 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:15,429 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:15,432 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:15,437 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:15,440 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:15,444 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:15,447 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:15,451 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:16,591 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:16,593 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:20,905 - graphiti_core.graphiti - INFO - Completed add_episode in 28308.74490737915 ms
2025-10-29 14:07:20,905 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_aa3c9f63_1761727012
2025-10-29 14:07:20,909 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:23,975 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:24,992 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:37,220 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:37,227 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:37,233 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:37,238 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:37,242 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:37,245 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:37,247 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:40,854 - graphiti_core.graphiti - INFO - Completed add_episode in 19948.54187965393 ms
2025-10-29 14:07:40,854 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_98643c1f_1761727012
2025-10-29 14:07:40,861 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:43,210 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:44,064 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:53,712 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:53,718 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:53,724 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:53,730 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:53,734 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:53,739 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:53,742 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:54,643 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:54,646 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:07:58,368 - graphiti_core.graphiti - INFO - Completed add_episode in 17513.808250427246 ms
2025-10-29 14:07:58,369 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_29fbe0e5_1761727012
2025-10-29 14:07:58,372 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:08:01,756 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:08:02,571 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:08:13,366 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:08:13,369 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:08:13,371 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:08:13,374 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:08:13,376 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:08:14,253 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:08:14,256 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:08:14,260 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:08:17,794 - graphiti_core.graphiti - INFO - Completed add_episode in 19425.49705505371 ms
2025-10-29 14:08:17,794 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_c47ba2d7_1761727012
2025-10-29 14:08:17,801 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:08:21,406 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:08:22,169 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:08:47,563 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:08:47,569 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:08:47,575 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:08:47,581 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:08:47,585 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:08:47,590 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:08:47,593 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:08:47,595 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:08:48,660 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:08:48,662 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:08:48,664 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:08:48,666 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:08:48,668 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:08:48,670 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:08:48,671 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:08:52,913 - graphiti_core.graphiti - INFO - Completed add_episode in 35118.34001541138 ms
2025-10-29 14:08:52,913 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_90d8f9af_1761727012
2025-10-29 14:08:52,920 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:08:56,288 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:08:57,331 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:09:18,596 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:09:18,602 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:09:18,608 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:09:18,613 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:09:18,618 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:09:18,622 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:09:18,625 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:09:18,628 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:09:18,631 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:09:18,634 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:09:18,636 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:09:18,638 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:09:22,073 - graphiti_core.graphiti - INFO - Completed add_episode in 29159.519910812378 ms
2025-10-29 14:09:22,073 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_4ad2ce6a_1761727012
2025-10-29 14:09:22,079 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:09:24,878 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:09:26,034 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:09:37,334 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:09:37,341 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:09:37,361 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:09:37,366 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:09:37,369 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:09:37,374 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:09:37,378 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:09:37,381 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:09:37,384 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:09:38,158 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:09:41,641 - graphiti_core.graphiti - INFO - Completed add_episode in 19567.880868911743 ms
2025-10-29 14:09:41,642 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_269e6fac_1761727012
2025-10-29 14:09:41,648 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:09:46,142 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:09:47,855 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:12,098 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:12,105 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:12,111 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:12,116 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:12,119 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:12,123 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:12,127 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:12,129 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:12,132 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:12,135 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:12,138 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:12,141 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:12,144 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:12,146 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:12,150 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:12,152 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:12,155 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:12,158 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:12,160 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:12,162 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:13,441 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:13,451 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:13,549 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:13,721 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:13,756 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:13,758 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:13,759 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:13,761 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:13,763 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:13,765 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:13,766 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:13,767 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:13,769 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:13,771 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:13,772 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:13,774 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:13,858 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:13,862 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:21,439 - graphiti_core.graphiti - INFO - Completed add_episode in 39797.13201522827 ms
2025-10-29 14:10:21,439 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_f231e907_1761727012
2025-10-29 14:10:21,444 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:25,387 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:26,560 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:41,698 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:41,705 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:41,711 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:41,716 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:41,720 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:41,724 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:41,727 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:41,732 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:41,735 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:41,739 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:41,742 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:41,745 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:42,655 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:42,657 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:42,661 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:46,227 - graphiti_core.graphiti - INFO - Completed add_episode in 24787.137985229492 ms
2025-10-29 14:10:46,227 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_08905ce2_1761727012
2025-10-29 14:10:46,231 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:50,615 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:10:51,626 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:02,468 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:02,475 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:02,481 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:02,486 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:02,490 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:02,495 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:03,537 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:03,539 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:03,541 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:06,699 - graphiti_core.graphiti - INFO - Completed add_episode in 20472.113847732544 ms
2025-10-29 14:11:06,699 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_871fee56_1761727012
2025-10-29 14:11:06,706 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:09,592 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:10,385 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:17,953 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:17,960 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:17,966 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:17,971 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:17,975 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:17,979 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:19,632 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:19,635 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:19,637 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:19,640 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:23,924 - graphiti_core.graphiti - INFO - Completed add_episode in 17224.260091781616 ms
2025-10-29 14:11:23,924 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_16a7f706_1761727012
2025-10-29 14:11:23,930 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:27,588 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:29,422 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:53,100 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:53,105 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:53,109 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:53,113 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:53,117 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:53,120 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:53,123 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:53,126 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:53,129 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:53,132 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:53,134 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:54,721 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:54,724 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:11:54,726 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:12:04,926 - graphiti_core.graphiti - INFO - Completed add_episode in 41001.572132110596 ms
2025-10-29 14:12:04,926 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_d922d9e3_1761727012
2025-10-29 14:12:05,000 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:12:10,295 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:12:11,829 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:12:23,675 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:12:23,683 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:12:23,688 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:12:23,694 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:12:23,698 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:12:23,703 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:12:23,707 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:12:25,416 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:12:25,417 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:12:25,419 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:12:25,422 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:12:25,423 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:12:26,697 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-10-29 14:12:26,697 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Document: deployment_guide.md\\nSection 3:\\nMulti-Tenant API Layer \\n   \\n  FastAPI   Tenant Auth  \\n  + JWT Auth   Context Injection\",\n  \"Document: deployment_guide.md\\nSection 4:\\nEnhanced Pydantic AI Agent \\n   \\n  Tenant-Aware  Same 10+ Tools  \\n  Agent   + Tenant Context  \\n  (Same LLMs)   Injection\",\n  \"Document: deployment_guide.md\\nSection 5:\\nMulti-Tenant Data Layer \\n   \\n  Neon Projects   Neo4j + Graphiti \\n  (Per-Tenant)   + group_id  \\n  Isolated DBs   Namespacing\",\n  \"Document: deployment_guide.md\\nSection 6:\\nTenant Management Layer \\n    \\n  Catalog DB   Per-Tenant   Neon API  \\n  Tenant   Database   Integration  \\n  Metadata   Complete   (Automated)  \\n  (Catalog DB)   Isolation\",\n  \"Document: deployment_guide.md\\nSection 7:\\nDeployment Steps\\nStep 1: Environment Setup\\nClone the repository and navigate to Tenant directory:\\n``bash\\ncd /path/to/agentic-rag-knowledge-graph/Tenant\\n`\\nCreate Python virtual environment:\\n`bash\\npython -m venv venv\\nsource venv/bin/activate On Windows: venv\\\\Scripts\\\\activate\\n`\\nInstall dependencies:\\n`bash\\npip install -r requirements.txt\\n``\",\n  \"Document: deployment_guide.md\\nSection 8:\\nCreate requirements.txt:\\n``txt\\nCore Dependencies\\nasyncpg==0.29.0\\nfastapi==0.104.1\\nuvicorn[standard]==0.24.0\\npydantic==2.5.0\\npydantic-ai==0.0.7\\npython-jose[cryptography]==3.3.0\\npython-multipart==0.0.6\\nMulti-tenant Architecture\\nneon-api-client==0.2.0\\nGraph Database\\ngraphiti-core==0.1.0\\nneo4j==5.15.0\\nAI and Embeddings\\nopenai==1.3.0\\nVector Database\\npgvector==0.2.4\\nAdditional utilities\\nhttpx==0.25.0\\nasyncio-throttle==1.0.2\\n``\\nStep 2: Database Setup\\n2.1 Neon PostgreSQL Setup (Project-per-Tenant)\\n1.\",\n  \"Document: deployment_guide.md\\nSection 9:\\nCreate Neon account and get API key:\\nVisit [neon.tech](https://neon.tech)\\nCreate account and generate API key\\nThis will be used for automated tenant project creation\\nCreate catalog database (control plane):\\n``bash\\nCreate main Neon project for catalog database\\nThis is done once and manages all tenant projects\\npsql \\\"postgresql://username:password@ep-catalog.us-east-2.aws.neon.tech/neondb?sslmode=require\\\"\\nRun the catalog schema\\n\\\\i catalog_schema.sql\\n``\",\n  \"Document: deployment_guide.md\\nSection 10:\\nCreate catalog schema (catalogschema.sql):\\n``sql\\n-- Extensions\\nCREATE EXTENSION IF NOT EXISTS \\\"uuid-ossp\\\";\\n-- Tenant project mappings\\nCREATE TABLE tenantprojects (\\ntenantid UUID PRIMARY KEY DEFAULT genrandomuuid(),\\ntenantname VARCHAR(255) NOT NULL,\\ntenantemail VARCHAR(255) UNIQUE NOT NULL,\\nneonprojectid VARCHAR(100) NOT NULL UNIQUE,\\nneondatabaseurl TEXT NOT NULL,\\nregion VARCHAR(50) NOT NULL DEFAULT 'aws-us-east-1',\\nstatus VARCHAR(20) DEFAULT 'active',\\ncreatedat TIMESTAMPTZ DEFAULT NOW(),\\nupdated_at TIMESTAMPTZ DEFAULT NOW()\\n);\\n``\",\n  \"Document: deployment_guide.md\\nSection 11:\\n``sql\\n-- Tenant configurations\\nCREATE TABLE tenantconfigs (\\ntenantid UUID PRIMARY KEY REFERENCES tenantprojects(tenantid) ON DELETE CASCADE,\\nsettings JSONB DEFAULT '{}',\\nfeatureflags JSONB DEFAULT '{}',\\nupdatedat TIMESTAMPTZ DEFAULT NOW()\\n);\\n-- Usage tracking for billing\\nCREATE TABLE tenantusage (\\nid UUID PRIMARY KEY DEFAULT genrandomuuid(),\\ntenantid UUID REFERENCES tenantprojects(tenantid) ON DELETE CASCADE,\\nmetricname VARCHAR(100) NOT NULL,\\nmetricvalue DECIMAL NOT NULL,\\nperioddate DATE NOT NULL,\\ncreatedat TIMESTAMPTZ DEFAULT NOW(),\\nUNIQUE(tenantid, metricname, perioddate)\\n);\\n-- Performance indexes\\nCREATE INDEX idxtenantprojectsstatus ON tenantprojects(status);\\nCREATE INDEX idxtenantprojectscreated ON tenantprojects(createdat);\\nCREATE INDEX idxtenantusageperiod ON tenantusage(tenantid, perioddate);\\n``\",\n  \"Document: deployment_guide.md\\nSection 12:\\nVerify catalog database:\\n``sql\\nSELECT tablename FROM informationschema.tables\\nWHERE tableschema = 'public'\\nAND tablename IN ('tenantprojects', 'tenantconfigs', 'tenant_usage');\\n``\\nNote: Individual tenant databases are created automatically via Neon API when tenants are provisioned.\\n2.2 Neo4j Setup\\nOption A: Neo4j Cloud (Recommended)\\nVisit [neo4j.com/cloud](https://neo4j.com/cloud)\\nCreate AuraDB instance\\nNote connection URI, username, and password\"\n]\n        \"Document: deployment_guide.md\\nSection 13:\\nOption B: Self-hosted Neo4j\\n``bash\\nUsing Docker\\ndocker run \\\\\\n--name neo4j \\\\\\n-p 7474:7474 -p 7687:7687 \\\\\\n-d \\\\\\n-v $HOME/neo4j/data:/data \\\\\\n-v $HOME/neo4j/logs:/logs \\\\\\n-v $HOME/neo4j/import:/var/lib/neo4j/import \\\\\\n-v $HOME/neo4j/plugins:/plugins \\\\\\n--env NEO4J_AUTH=neo4j/password \\\\\\nneo4j:latest\\n`\\nInstall Graphiti:\\n`bash\\npip install graphiti-core\\n``\\nStep 3: Configuration\\n1.\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'deployment_guide.md', 'summary': 'This document provides a step-by-step guide for deploying a multi-tenant RAG system. It outlines the necessary system requirements, including Python 3.9+, Docker (optional), 4GB+ RAM for development (8GB+ for production), and 20GB+ storage for databases. The guide details the external services required: Neon PostgreSQL with pgvector (one project per tenant) and its corresponding API key for automated management, a Neo4j graph database (single shared instance with namespacing), and an OpenAI API key for embeddings and LLM functionalities. The architecture components include a Multi-Tenant API Layer with FastAPI, Tenant Auth, JWT Auth, and Context Injection, as well as an Enhanced Pydantic AI Agent that is tenant-aware with tenant context injection and uses the same 10+ tools and LLMs. The data layer utilizes Neon Projects for isolated databases per tenant and Neo4j with Graphiti for namespacing via group_id. The Tenant Management Layer includes a Catalog DB for tenant metadata, per-tenant database isolation, and Neon API integration for automated management. The deployment steps involve setting up the environment by cloning the repository, creating a Python virtual environment, and installing dependencies using pip. The document also lists the core dependencies, multi-tenant architecture components, graph database tools, AI and embedding libraries, vector database requirements, and additional utilities needed for the setup. It also details the creation of a catalog database schema for managing tenant projects, including tables for tenant ID, name, email, Neon project ID, database URL, region, status, and timestamps. The document also specifies the creation of tenant configurations and usage tracking tables, along with performance indexes. For Neo4j setup, it recommends using Neo4j Cloud (AuraDB) and obtaining connection details.', 'entity_types': ['Entity'], 'attributes': {'labels': ['Entity']}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{
  "summary": "This document provides a step-by-step guide for deploying a multi-tenant RAG system. It outlines the necessary system requirements, including Python 3.9+, Docker (optional), 4GB+ RAM for development (8GB+ for production), and 20GB+ storage for databases. The guide details the external services required: Neon PostgreSQL with pgvector (one project per tenant) and its corresponding API key for automated management, a Neo4j graph database (single shared instance with namespacing), and an OpenAI API key for embeddings and LLM functionalities. The architecture components include a Multi-Tenant API Layer with FastAPI, Tenant Auth, JWT Auth, and Context Injection, as well as an Enhanced Pydantic AI Agent that is tenant-aware with tenant context injection and uses the same 10+ tools and LLMs. The data layer utilizes Neon Projects for isolated databases per tenant and Neo4j with Graphiti for namespacing via group_id. The Tenant Management Layer includes a Catalog DB for tenant metadata, per-tenant database isolation, and Neon API integration for automated management. The deployment steps involve setting up the environment by cloning the repository, creating a Python virtual environment, and installing dependencies using pip. The document also lists the core dependencies, multi-tenant architecture components, graph database tools, AI and embedding libraries, vector database requirements, and additional utilities needed for the setup. It also details the creation of a catalog database schema for managing tenant projects, including tables for tenant ID, name, email, Neon project ID, database URL, region, status, and timestamps. The document also specifies the creation of tenant configurations and usage tracking tables, along with performance indexes. For Neo4j setup, it recommends using Neo4j Cloud (AuraDB) and obtaining connection details, or a self-hosted Neo4j instance using Docker. The guide also includes instructions for creating a `requirements.txt` file with all necessary dependencies."
}
```

2025-10-29 14:12:26,698 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-10-29 14:12:26,698 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-10-29 14:12:26,700 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:12:36,284 - graphiti_core.graphiti - INFO - Completed add_episode in 31357.280015945435 ms
2025-10-29 14:12:36,284 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_e7c1d2ac_1761727012
2025-10-29 14:12:36,289 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:12:42,999 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:12:46,369 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:24,836 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:24,843 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:24,847 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:24,852 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:24,856 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:24,859 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:24,863 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:24,866 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:24,870 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:24,873 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:24,876 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:24,879 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:24,882 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:24,884 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:24,887 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:24,889 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:24,891 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:24,894 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:24,896 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:24,898 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:26,776 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:26,850 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:26,858 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:27,026 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:27,041 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:27,166 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:27,286 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:27,291 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:27,299 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:27,927 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:27,929 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:27,931 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:27,933 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:27,934 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:27,936 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:27,937 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:27,939 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:27,940 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:27,942 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:27,943 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:27,945 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:27,946 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:27,948 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:43,516 - graphiti_core.graphiti - INFO - Completed add_episode in 67231.19831085205 ms
2025-10-29 14:13:43,516 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_1c62b0ec_1761727012
2025-10-29 14:13:43,521 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:50,092 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:13:52,954 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:09,817 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:09,823 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:09,828 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:09,832 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:09,837 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:09,840 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:09,844 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:09,848 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:09,852 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:09,855 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:09,858 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:09,860 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:09,863 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:09,866 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:09,869 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:09,871 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:09,873 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:09,876 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:09,878 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:09,880 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:11,891 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:11,894 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:11,896 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:11,921 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:12,125 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:12,127 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:12,128 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:12,130 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:12,132 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:12,133 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:12,135 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:12,136 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:12,138 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:12,139 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:12,141 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:12,142 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:12,144 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:12,145 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:12,147 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:12,148 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:12,149 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:12,151 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:12,152 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:12,154 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:13,117 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:13,275 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:13,364 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:13,372 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:13,533 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:13,623 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:13,712 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:13,719 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:13,726 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:13,836 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:13,875 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:13,883 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:13,888 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:13,958 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:14,016 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:14,045 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:14,050 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:14,157 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:14,228 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:14,235 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:14,567 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:14,654 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:14,739 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:33,013 - graphiti_core.graphiti - INFO - Completed add_episode in 109496.54912948608 ms
2025-10-29 14:15:33,013 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_acb8bc89_1761727012
2025-10-29 14:15:33,018 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:37,376 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:39,081 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:49,575 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:49,583 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:49,588 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:49,593 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:49,598 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:49,602 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:49,606 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:49,610 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:49,613 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:51,285 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:51,286 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:51,288 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:51,290 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:15:51,291 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:16:01,569 - graphiti_core.graphiti - INFO - Completed add_episode in 28555.516719818115 ms
2025-10-29 14:16:01,569 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_c2fccc1d_1761727012
2025-10-29 14:16:01,573 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:16:07,992 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:16:10,262 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:16:57,774 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:16:57,781 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:16:57,786 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:16:57,790 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:16:57,794 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:16:57,798 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:16:57,802 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:16:57,805 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:16:57,808 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:16:57,812 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:16:57,816 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:16:57,819 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:16:57,822 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:16:57,824 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:16:57,826 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:16:57,829 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:16:57,831 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:16:57,834 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:16:57,836 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:16:57,838 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:16:59,591 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:16:59,594 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:16:59,627 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:00,742 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:00,744 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:00,746 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:00,748 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:00,749 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:00,751 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:00,752 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:00,754 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:00,755 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:00,757 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:00,758 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:00,759 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:00,762 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:00,764 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:00,765 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:00,767 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:00,769 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:00,770 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:00,772 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:00,773 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:02,611 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:02,864 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:02,958 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:03,039 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:03,046 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:03,055 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:03,126 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:03,131 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:03,226 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:31,552 - graphiti_core.graphiti - INFO - Completed add_episode in 89982.62310028076 ms
2025-10-29 14:17:31,553 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_393a078e_1761727012
2025-10-29 14:17:31,557 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:35,967 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:38,115 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:57,870 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:57,875 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:57,880 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:57,885 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:57,889 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:57,892 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:57,896 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:57,900 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:57,903 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:57,906 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:57,909 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:57,913 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:59,627 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:59,629 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:17:59,631 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:18:07,610 - graphiti_core.graphiti - INFO - Completed add_episode in 36057.350158691406 ms
2025-10-29 14:18:07,611 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_553cb4eb_1761727012
2025-10-29 14:18:07,616 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:18:12,686 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:18:14,631 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:18:34,426 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:18:34,432 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:18:34,436 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:18:34,441 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:18:34,445 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:18:34,449 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:18:34,454 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:18:34,463 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:18:34,494 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:18:34,497 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:18:36,055 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:18:36,057 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:18:36,059 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:18:36,061 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:18:36,062 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:18:36,064 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:18:36,065 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:18:46,019 - graphiti_core.graphiti - INFO - Completed add_episode in 38408.18500518799 ms
2025-10-29 14:18:46,019 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_c4a883ad_1761727012
2025-10-29 14:18:46,023 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:18:50,979 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:18:52,721 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:12,805 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:12,812 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:12,817 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:12,822 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:12,827 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:12,831 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:12,835 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:12,839 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:12,843 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:12,846 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:12,850 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:12,852 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:12,855 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:12,858 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:12,861 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:12,864 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:12,867 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:12,869 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:12,871 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:12,874 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:14,566 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:14,570 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:14,636 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:15,197 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:15,199 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:15,200 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:15,202 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:15,203 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:15,205 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:15,207 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:15,208 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:24,121 - graphiti_core.graphiti - INFO - Completed add_episode in 38101.6640663147 ms
2025-10-29 14:19:24,121 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_b386f786_1761727012
2025-10-29 14:19:24,126 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:27,599 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:29,076 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:53,994 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:54,000 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:54,006 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:54,011 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:54,016 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:54,020 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:54,024 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:54,030 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:54,034 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:54,037 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:55,717 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:19:59,673 - graphiti_core.graphiti - INFO - Completed add_episode in 35551.57208442688 ms
2025-10-29 14:19:59,673 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_791bfb2a_1761727012
2025-10-29 14:19:59,681 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:20:03,621 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:20:05,203 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:20:39,312 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:20:39,316 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:20:39,319 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:20:39,324 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:20:39,327 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:20:39,330 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:20:39,332 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:20:39,335 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:20:39,338 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:20:39,340 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:20:39,343 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:20:39,346 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:20:39,348 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:20:39,350 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:20:39,352 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:20:39,355 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:20:41,372 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:20:41,373 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:20:41,375 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:20:41,377 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:20:41,379 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:20:41,381 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:20:41,382 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:20:41,385 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:20:41,387 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:20:41,388 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:20:41,390 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:20:42,443 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-10-29 14:20:42,443 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Document: deployment_guide.md\\nSection 12:\\nVerify catalog database:\\n``sql\\nSELECT tablename FROM informationschema.tables\\nWHERE tableschema = 'public'\\nAND tablename IN ('tenantprojects', 'tenantconfigs', 'tenant_usage');\\n``\\nNote: Individual tenant databases are created automatically via Neon API when tenants are provisioned.\\n2.2 Neo4j Setup\\nOption A: Neo4j Cloud (Recommended)\\nVisit [neo4j.com/cloud](https://neo4j.com/cloud)\\nCreate AuraDB instance\\nNote connection URI, username, and password\",\n  \"Document: deployment_guide.md\\nSection 13:\\nOption B: Self-hosted Neo4j\\n``bash\\nUsing Docker\\ndocker run \\\\\\n--name neo4j \\\\\\n-p 7474:7474 -p 7687:7687 \\\\\\n-d \\\\\\n-v $HOME/neo4j/data:/data \\\\\\n-v $HOME/neo4j/logs:/logs \\\\\\n-v $HOME/neo4j/import:/var/lib/neo4j/import \\\\\\n-v $HOME/neo4j/plugins:/plugins \\\\\\n--env NEO4J_AUTH=neo4j/password \\\\\\nneo4j:latest\\n`\\nInstall Graphiti:\\n`bash\\npip install graphiti-core\\n``\\nStep 3: Configuration\\n1.\",\n  \"Document: deployment_guide.md\\nSection 14:\\nCreate .env file:\\n``bash\\nNeon Configuration (Project-per-Tenant)\\nNEONAPIKEY=yourneonapikeyhere\\nCATALOGDATABASEURL=postgresql://cataloguser:pass@ep-catalog.us-east-2.aws.neon.tech/neondb?sslmode=require\\nNeo4j Configuration (Shared with namespacing)\\nNEO4JURI=neo4j+s://xxx.databases.neo4j.io\\nNEO4JUSER=neo4j\\nNEO4JPASSWORD=yourpassword\\nAuthentication\\nJWTSECRETKEY=your-super-secret-jwt-key-change-in-production\\nJWTALGORITHM=HS256\\nOpenAI (or alternative)\\nOPENAIAPIKEY=youropenaiapikey\\nApplication\\nAPPENV=production\\nAPPHOST=0.0.0.0\\nAPPPORT=8000\\nLOG_LEVEL=info\\n``\",\n  \"Document: deployment_guide.md\\nSection 15:\\nCreate config.py:\\n``python\\nimport os\\nfrom typing import Optional\\nclass Config:\\nNeon Configuration (Project-per-Tenant)\\nNEONAPIKEY = os.getenv(\\\"NEONAPIKEY\\\")\\nCATALOGDATABASEURL = os.getenv(\\\"CATALOGDATABASEURL\\\")\\nNeo4j Configuration (Shared with namespacing)\\nNEO4JURI = os.getenv(\\\"NEO4JURI\\\")\\nNEO4JUSER = os.getenv(\\\"NEO4JUSER\\\", \\\"neo4j\\\")\\nNEO4JPASSWORD = os.getenv(\\\"NEO4JPASSWORD\\\")\\nJWT Configuration\\nJWTSECRETKEY = os.getenv(\\\"JWTSECRETKEY\\\")\\nJWTALGORITHM = os.getenv(\\\"JWTALGORITHM\\\", \\\"HS256\\\")\\nOpenAI Configuration\\nOPENAIAPIKEY = os.getenv(\\\"OPENAIAPIKEY\\\")\\nApplication Configuration\\nAPPENV = os.getenv(\\\"APPENV\\\", \\\"development\\\")\\nAPPHOST = os.getenv(\\\"APPHOST\\\", \\\"127.0.0.1\\\")\\nAPPPORT = int(os.getenv(\\\"APPPORT\\\", 8000))\\nLOGLEVEL = os.getenv(\\\"LOGLEVEL\\\", \\\"info\\\")\\n@classmethod\\ndef validate(cls):\\nrequiredvars = [\\n\\\"NEONAPIKEY\\\",\\n\\\"CATALOGDATABASEURL\\\",\\n\\\"NEO4JURI\\\",\\n\\\"NEO4JPASSWORD\\\",\\n\\\"JWTSECRETKEY\\\",\\n\\\"OPENAIAPIKEY\\\"\\n]\\nmissing = [var for var in requiredvars if not getattr(cls, var)]\\nif missing:\\nraise ValueError(f\\\"Missing required environment variables: {missing}\\\")\\nconfig = Config()\\n``\",\n  \"Document: deployment_guide.md\\nSection 16:\\nStep 4: Application Deployment\\n4.1 Create Main Application File\\nCreate main.py:\\n```python\\nimport logging\\nimport uvicorn\\nfrom multitenantapi import createapp\\nfrom config import config\\nConfigure logging\\nlogging.basicConfig(\\nlevel=getattr(logging, config.LOGLEVEL.upper()),\\nformat='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\\n)\\nValidate configuration\\nconfig.validate()\\nCreate FastAPI app with project-per-tenant architecture\",\n  \"Document: deployment_guide.md\\nSection 17:\\napp = createapp(\\nneonapikey=config.NEONAPIKEY,\\ncatalogdatabaseurl=config.CATALOGDATABASEURL,\\nneo4juri=config.NEO4JURI,\\nneo4juser=config.NEO4JUSER,\\nneo4jpassword=config.NEO4JPASSWORD,\\njwtsecretkey=config.JWTSECRETKEY,\\nopenaiapikey=config.OPENAIAPIKEY,\\ntitle=\\\"Multi-Tenant RAG API (Project-per-Tenant)\\\",\\nversion=\\\"2.0.0\\\"\\n)\\nif name == \\\"main\\\":\\nuvicorn.run(\\n\\\"main:app\\\",\\nhost=config.APPHOST,\\nport=config.APPPORT,\\nreload=(config.APPENV == \\\"development\\\"),\\nloglevel=config.LOGLEVEL\\n)\\n``\\n4.2 Test the Deployment\\nStart the application:\\n`bash\\npython main.py\\n`\\nVerify health endpoint:\\n`bash\\ncurl http://localhost:8000/health\\n``\",\n  \"Document: deployment_guide.md\\nSection 18:\\nAccess API documentation:\\nOpen browser to http://localhost:8000/docs\\nStep 5: Production Deployment\\n5.1 Using Docker\\nCreate Dockerfile:\\n``dockerfile\\nFROM python:3.11-slim\\nWORKDIR /app\\nInstall system dependencies\\nRUN apt-get update && apt-get install -y \\\\\\ngcc \\\\\\n&& rm -rf /var/lib/apt/lists/*\\nCopy requirements\\nCOPY requirements.txt .\\nRUN pip install --no-cache-dir -r requirements.txt\\nCopy application\\nCOPY . .\\nCreate non-root user\\nRUN useradd --create-home --shell /bin/bash appuser\\nUSER appuser\\nEXPOSE 8000\\nCMD [\\\"python\\\", \\\"main.py\\\"]\\n``\",\n  \"Document: deployment_guide.md\\nSection 19:\\nCreate docker-compose.yml:\\n``yaml\\nversion: '3.8'\\nservices:\\napp:\\nbuild: .\\nports:\\n\\\"8000:8000\\\"\\nenvironment:\\nNEONCONNECTIONSTRING=${NEONCONNECTIONSTRING}\\nNEO4JURI=${NEO4JURI}\\nNEO4JUSER=${NEO4JUSER}\\nNEO4JPASSWORD=${NEO4JPASSWORD}\\nJWTSECRETKEY=${JWTSECRETKEY}\\nOPENAIAPIKEY=${OPENAIAPIKEY}\\nAPP_ENV=production\\nrestart: unless-stopped\\nhealthcheck:\\ntest: [\\\"CMD\\\", \\\"curl\\\", \\\"-f\\\", \\\"http://localhost:8000/health\\\"]\\ninterval: 30s\\ntimeout: 10s\\nretries: 3\\n`\\nDeploy with Docker Compose:\\n`bash\\ndocker-compose up -d\\n``\\n5.2 Production Checklist\\n-\",\n  \"Document: deployment_guide.md\\nSection 20:\\n[ ] Security:\\n[ ] Strong JWT secret key\\n[ ] HTTPS/TLS certificates\\n[ ] Environment variables secured\\n[ ] Database connections encrypted\\n[ ] Performance:\\n[ ] Connection pooling configured\\n[ ] Database indexes optimized\\n[ ] Rate limiting enabled\\n[ ] Caching implemented (Redis)\\n[ ] Monitoring:\\n[ ] Application logs centralized\\n[ ] Health checks configured\\n[ ] Performance metrics collected\\n[ ] Error tracking enabled\\n[ ] Backup:\\n[ ] Database backup strategy\\n[ ] Disaster recovery plan\\n[ ] Data retention policies\\nTesting Your Deployment\\nCreate a Test Tenant\",\n  \"Document: deployment_guide.md\\nSection 21:\\n``bash\\ncurl -X POST \\\"http://localhost:8000/tenants\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"id\\\": \\\"testcorp\\\",\\n\\\"name\\\": \\\"Test Corporation\\\",\\n\\\"email\\\": \\\"test@corp.com\\\",\\n\\\"maxdocuments\\\": 100,\\n\\\"maxstoragemb\\\": 50\\n}'\\n`\\nGet Authentication Token\\n`bash\\ncurl -X POST \\\"http://localhost:8000/auth/token?tenantid=testcorp&userid=testuser\\\"\\n`\\nCreate a Document\\n`bash\\ncurl -X POST \\\"http://localhost:8000/documents\\\" \\\\\\n-H \\\"Authorization: Bearer YOUR_TOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"title\\\": \\\"Test Document\\\",\\n\\\"source\\\": \\\"test.md\\\",\\n\\\"content\\\": \\\"This is a test document for the multi-tenant RAG system.\\\"\\n}'\\n``\\nQuery the System\"\n]\n        \"Document: deployment_guide.md\\nSection 22:\\n``bash\\ncurl -X POST \\\"http://localhost:8000/query\\\" \\\\\\n-H \\\"Authorization: Bearer YOURTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"query\\\": \\\"What is this document about?\\\",\\n\\\"usevector\\\": true,\\n\\\"usegraph\\\": true,\\n\\\"maxresults\\\": 5\\n}'\\n`\\nTroubleshooting\\nCommon Issues\\nDatabase Connection Errors\\nVerify connection strings\\nCheck firewall/security groups\\nEnsure SSL certificates are valid\\nAuthentication Failures\\nVerify JWT secret key\\nCheck token expiration\\nValidate tenant permissions\\nPerformance Issues\\nMonitor database connections\\nCheck query performance\\nReview memory usage\\nDebug Commands\\n``bash\\nCheck application logs\\ndocker logs container_name\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'deployment_guide.md', 'summary': 'This document provides a step-by-step guide for deploying a multi-tenant RAG system. It outlines the necessary system requirements, including Python 3.9+, Docker (optional), 4GB+ RAM for development (8GB+ for production), and 20GB+ storage for databases. The guide details the external services required: Neon PostgreSQL with pgvector (one project per tenant) and its corresponding API key for automated management, a Neo4j graph database (single shared instance with namespacing), and an OpenAI API key for embeddings and LLM functionalities. The architecture components include a Multi-Tenant API Layer with FastAPI, Tenant Auth, JWT Auth, and Context Injection, as well as an Enhanced Pydantic AI Agent that is tenant-aware with tenant context injection and uses the same 10+ tools and LLMs. The data layer utilizes Neon Projects for isolated databases per tenant and Neo4j with Graphiti for namespacing via group_id. The Tenant Management Layer includes a Catalog DB for tenant metadata, per-tenant database isolation, and Neon API integration for automated management. The deployment steps involve setting up the environment by cloning the repository, creating a Python virtual environment, and installing dependencies using pip. The document also lists the creation of a catalog database schema for managing tenant projects, including tables for tenant ID, name, email, Neon project ID, database URL, region, status, and timestamps. It also specifies the creation of tenant configurations and usage tracking tables, along with performance indexes. For Neo4j setup, it recommends using Neo4j Cloud (AuraDB) and obtaining connection details, or a self-hosted option using Docker. The deployment guide also includes instructions for creating a `.env` file with configurations for Neon, Neo4j, JWT, OpenAI, and application settings, and a `config.py` file to load these configurations. The deployment process includes steps for environment setup, database setup (Neon PostgreSQL and Neo4j), and application deployment, with specific instructions for creating necessary files like `requirements.txt`, `catalog_schema.sql`, `.env`, `config.py`, and `main.py`. The application is deployed using uvicorn, and a health endpoint is provided for verification. The deployment guide also includes instructions for creating a Dockerfile for production deployment, including system dependencies, copying requirements and application files, creating a non-root user, exposing port 8000, and setting the CMD to run `main.py`. It also details the creation of a `docker-compose.yml` file for production deployment, specifying services, ports, environment variables, restart policy, and health checks, and provides commands to deploy using Docker Compose. Finally, a production checklist is provided covering security, performance, monitoring, and backup considerations. The guide also includes steps for testing the deployment, such as creating a test tenant, obtaining an authentication token, creating a document, and querying the system.', 'entity_types': ['Entity'], 'attributes': {'labels': ['Entity']}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{
  "summary": "This document provides a step-by-step guide for deploying a multi-tenant RAG system. It outlines the necessary system requirements, including Python 3.9+, Docker (optional), 4GB+ RAM for development (8GB+ for production), and 20GB+ storage for databases. The guide details the external services required: Neon PostgreSQL with pgvector (one project per tenant) and its corresponding API key for automated management, a Neo4j graph database (single shared instance with namespacing), and an OpenAI API key for embeddings and LLM functionalities. The architecture components include a Multi-Tenant API Layer with FastAPI, Tenant Auth, JWT Auth, and Context Injection, as well as an Enhanced Pydantic AI Agent that is tenant-aware with tenant context injection and uses the same 10+ tools and LLMs. The data layer utilizes Neon Projects for isolated databases per tenant and Neo4j with Graphiti for namespacing via group_id. The Tenant Management Layer includes a Catalog DB for tenant metadata, per-tenant database isolation, and Neon API integration for automated management. The deployment steps involve setting up the environment by cloning the repository, creating a Python virtual environment, and installing dependencies using pip. The document also lists the creation of a catalog database schema for managing tenant projects, including tables for tenant ID, name, email, Neon project ID, database URL, region, status, and timestamps. It also specifies the creation of tenant configurations and usage tracking tables, along with performance indexes. For Neo4j setup, it recommends using Neo4j Cloud (AuraDB) and obtaining connection details, or a self-hosted option using Docker. The deployment guide also includes instructions for creating a `.env` file with configurations for Neon, Neo4j, JWT, OpenAI, and application settings, and a `config.py` file to load these configurations. The deployment process includes steps for environment setup, database setup (Neon PostgreSQL and Neo4j), and application deployment, with specific instructions for creating necessary files like `requirements.txt`, `catalog_schema.sql`, `.env`, `config.py`, and `main.py`. The application is deployed using uvicorn, and a health endpoint is provided for verification. The deployment guide also includes instructions for creating a Dockerfile for production deployment, including system dependencies, copying requirements and application files, creating a non-root user, exposing port 8000, and setting the CMD to run `main.py`. It also details the creation of a `docker-compose.yml` file for production deployment, specifying services, ports, environment variables, restart policy, and health checks, and provides commands to deploy using Docker Compose. Finally, a production checklist is provided covering security, performance, monitoring, and backup considerations. The guide also includes steps for testing the deployment, such as creating a test tenant, obtaining an authentication token, creating a document, and querying the system. Troubleshooting common issues like database connection errors, authentication failures, and performance issues is also covered, along with debug commands."
}
```

2025-10-29 14:20:42,444 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-10-29 14:20:42,444 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-10-29 14:20:42,445 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:20:54,112 - graphiti_core.graphiti - INFO - Completed add_episode in 54438.41314315796 ms
2025-10-29 14:20:54,113 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_5a1cbd18_1761727012
2025-10-29 14:20:54,117 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:20:59,730 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:02,028 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:24,721 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:24,727 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:24,733 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:24,738 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:24,743 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:24,747 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:24,751 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:24,754 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:24,758 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:24,762 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:24,765 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:24,768 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:24,771 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:24,774 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:24,777 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:24,779 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:24,782 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:24,784 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:24,786 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:24,789 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:26,435 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:26,522 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:26,604 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:26,777 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:26,786 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:26,793 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:26,859 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:27,069 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:27,071 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:27,072 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:27,073 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:27,075 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:27,077 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:27,079 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:27,080 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:27,082 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:27,083 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:27,085 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:27,086 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:27,088 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:27,089 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:27,091 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:27,093 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:27,094 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:27,096 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:27,097 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:44,448 - graphiti_core.graphiti - INFO - Completed add_episode in 50335.38198471069 ms
2025-10-29 14:21:44,449 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_d7e2de3b_1761727012
2025-10-29 14:21:44,453 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:51,015 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:21:53,470 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:21,657 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:21,663 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:21,670 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:21,675 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:21,680 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:21,684 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:21,688 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:21,692 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:21,696 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:21,699 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:21,702 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:21,705 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:21,709 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:21,712 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:21,715 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:21,718 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:21,720 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:21,723 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:21,726 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:21,728 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:23,074 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:23,100 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:23,302 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:23,303 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:23,305 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:23,307 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:23,309 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:23,311 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:23,313 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:23,316 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:23,389 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:23,392 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:23,475 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:23,516 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:23,569 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:23,658 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:31,036 - graphiti_core.graphiti - INFO - Completed add_episode in 46586.71998977661 ms
2025-10-29 14:22:31,036 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_89fd6912_1761727012
2025-10-29 14:22:31,039 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:33,337 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:34,225 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:56,151 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:56,161 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:56,167 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:56,172 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:56,176 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:56,181 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:56,184 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:56,188 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:57,100 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:57,102 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:57,103 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:57,105 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:57,107 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:57,108 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:22:57,110 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:23:01,412 - graphiti_core.graphiti - INFO - Completed add_episode in 30376.193046569824 ms
2025-10-29 14:23:01,412 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_2c50b944_1761727012
2025-10-29 14:23:01,412 - graphiti_ingestion_manager - INFO - KG ingestion completed for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6: 25/25 episodes succeeded, 0 failed
2025-10-29 14:23:01,412 - tenant_graphiti_client - INFO - ✅ Perfect KG ingestion for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6: 25/25 episodes succeeded
2025-10-29 14:23:01,412 - tenant_data_ingestion_service - INFO - ✅ Successfully added 25 episodes to tenant e3e43017-ed5e-49bb-a90b-f478782ddde6 graph namespace
2025-10-29 14:23:01,413 - tenant_data_ingestion_service - INFO - Graph ingestion: Created episode 25
2025-10-29 14:23:01,413 - tenant_data_ingestion_service - INFO - Successfully ingested document c0b14090-3b93-48f2-93bc-58408190d0ea for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6 in 1081121.78ms
2025-10-29 14:31:21,395 - __main__ - INFO - Starting Interactive Multi-Tenant RAG API on 127.0.0.1:8000
2025-10-29 14:31:21,414 - interactive_multi_tenant_api - INFO - Starting Multi-Tenant RAG API...
2025-10-29 14:31:21,414 - interactive_multi_tenant_api - INFO - Neo4j URI: neo4j://127.0.0.1:7687
2025-10-29 14:31:21,414 - interactive_multi_tenant_api - INFO - Neo4j User: neo4j
2025-10-29 14:31:21,414 - interactive_multi_tenant_api - INFO - Neo4j Password: ***
2025-10-29 14:31:21,414 - tenant_manager - INFO - TenantManager initialized with Graphiti client
2025-10-29 14:31:21,414 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-10-29 14:31:21,414 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-10-29 14:31:21,414 - multi_tenant_ingestion - INFO - Multi-tenant ingestion pipeline initialized
2025-10-29 14:31:21,414 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-10-29 14:31:21,414 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-10-29 14:31:21,414 - interactive_multi_tenant_api - INFO - Tenant manager initialized
2025-10-29 14:31:21,421 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-10-29 14:31:21,421 - interactive_multi_tenant_api - INFO - Tenant ingestion service initialized
2025-10-29 14:31:21,421 - auth_middleware - INFO - JWT Authenticator initialized
2025-10-29 14:31:21,421 - interactive_multi_tenant_api - INFO - JWT authenticator initialized
2025-10-29 14:31:21,421 - interactive_multi_tenant_api - INFO - 🎯 Multi-Tenant RAG API ready - all backend logs will appear in this terminal
2025-10-29 14:31:21,421 - interactive_multi_tenant_api - INFO - 📊 Backend activity from CLI and API operations will be shown below:
2025-10-29 14:31:21,421 - interactive_multi_tenant_api - INFO - Shutting down Multi-Tenant RAG API...
2025-10-29 14:31:42,132 - interactive_multi_tenant_api - INFO - Shutting down Multi-Tenant RAG API...
2025-10-29 14:31:45,373 - __main__ - INFO - Starting Interactive Multi-Tenant RAG API on 127.0.0.1:8000
2025-10-29 14:31:45,392 - interactive_multi_tenant_api - INFO - Starting Multi-Tenant RAG API...
2025-10-29 14:31:45,392 - interactive_multi_tenant_api - INFO - Neo4j URI: neo4j://127.0.0.1:7687
2025-10-29 14:31:45,392 - interactive_multi_tenant_api - INFO - Neo4j User: neo4j
2025-10-29 14:31:45,392 - interactive_multi_tenant_api - INFO - Neo4j Password: ***
2025-10-29 14:31:45,392 - tenant_manager - INFO - TenantManager initialized with Graphiti client
2025-10-29 14:31:45,392 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-10-29 14:31:45,392 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-10-29 14:31:45,392 - multi_tenant_ingestion - INFO - Multi-tenant ingestion pipeline initialized
2025-10-29 14:31:45,392 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-10-29 14:31:45,392 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-10-29 14:31:45,392 - interactive_multi_tenant_api - INFO - Tenant manager initialized
2025-10-29 14:31:45,398 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-10-29 14:31:45,398 - interactive_multi_tenant_api - INFO - Tenant ingestion service initialized
2025-10-29 14:31:45,398 - auth_middleware - INFO - JWT Authenticator initialized
2025-10-29 14:31:45,399 - interactive_multi_tenant_api - INFO - JWT authenticator initialized
2025-10-29 14:31:45,399 - interactive_multi_tenant_api - INFO - 🎯 Multi-Tenant RAG API ready - all backend logs will appear in this terminal
2025-10-29 14:31:45,399 - interactive_multi_tenant_api - INFO - 📊 Backend activity from CLI and API operations will be shown below:
2025-10-29 14:32:19,799 - interactive_multi_tenant_api - INFO - Shutting down Multi-Tenant RAG API...
2025-10-29 14:32:26,673 - __main__ - INFO - Starting Interactive Multi-Tenant RAG API on 127.0.0.1:8000
2025-10-29 14:32:26,693 - interactive_multi_tenant_api - INFO - Starting Multi-Tenant RAG API...
2025-10-29 14:32:26,693 - interactive_multi_tenant_api - INFO - Neo4j URI: neo4j://127.0.0.1:7687
2025-10-29 14:32:26,693 - interactive_multi_tenant_api - INFO - Neo4j User: neo4j
2025-10-29 14:32:26,693 - interactive_multi_tenant_api - INFO - Neo4j Password: ***
2025-10-29 14:32:26,693 - tenant_manager - INFO - TenantManager initialized with Graphiti client
2025-10-29 14:32:26,693 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-10-29 14:32:26,693 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-10-29 14:32:26,693 - multi_tenant_ingestion - INFO - Multi-tenant ingestion pipeline initialized
2025-10-29 14:32:26,693 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-10-29 14:32:26,693 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-10-29 14:32:26,693 - interactive_multi_tenant_api - INFO - Tenant manager initialized
2025-10-29 14:32:26,699 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-10-29 14:32:26,699 - interactive_multi_tenant_api - INFO - Tenant ingestion service initialized
2025-10-29 14:32:26,699 - auth_middleware - INFO - JWT Authenticator initialized
2025-10-29 14:32:26,699 - interactive_multi_tenant_api - INFO - JWT authenticator initialized
2025-10-29 14:32:26,699 - interactive_multi_tenant_api - INFO - 🎯 Multi-Tenant RAG API ready - all backend logs will appear in this terminal
2025-10-29 14:32:26,699 - interactive_multi_tenant_api - INFO - 📊 Backend activity from CLI and API operations will be shown below:
2025-10-29 14:33:00,530 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-10-29 14:33:00,700 - catalog_database - INFO - Catalog database connection test successful
2025-10-29 14:33:00,701 - tenant_graphiti_client - INFO - Applied Graphiti performance optimizations for production reliability
2025-10-29 14:33:00,701 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 14:33:00,724 - robust_gemini_client - INFO - RobustGeminiClient initialized with temperature=0.0 for deterministic JSON output
2025-10-29 14:33:00,724 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 14:33:00,741 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 14:33:00,805 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_uuid IF NOT EXISTS FOR (e:Entity) ON (e.uuid)` has no effect.} {description: `RANGE INDEX entity_uuid FOR (e:Entity) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX entity_uuid IF NOT EXISTS FOR (n:Entity) ON (n.uuid)'
2025-10-29 14:33:00,806 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_uuid IF NOT EXISTS FOR (e:Episodic) ON (e.uuid)` has no effect.} {description: `RANGE INDEX episode_uuid FOR (e:Episodic) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX episode_uuid IF NOT EXISTS FOR (n:Episodic) ON (n.uuid)'
2025-10-29 14:33:00,807 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX community_uuid IF NOT EXISTS FOR (e:Community) ON (e.uuid)` has no effect.} {description: `RANGE INDEX community_uuid FOR (e:Community) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX community_uuid IF NOT EXISTS FOR (n:Community) ON (n.uuid)'
2025-10-29 14:33:00,807 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX mention_uuid FOR ()-[e:MENTIONS]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)'
2025-10-29 14:33:00,808 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX relation_uuid FOR ()-[e:RELATES_TO]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)'
2025-10-29 14:33:00,808 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX has_member_uuid FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)'
2025-10-29 14:33:00,810 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_group_id IF NOT EXISTS FOR (e:Episodic) ON (e.group_id)` has no effect.} {description: `RANGE INDEX episode_group_id FOR (e:Episodic) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX episode_group_id IF NOT EXISTS FOR (n:Episodic) ON (n.group_id)'
2025-10-29 14:33:00,811 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX relation_group_id FOR ()-[e:RELATES_TO]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)'
2025-10-29 14:33:00,812 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_group_id IF NOT EXISTS FOR (e:Entity) ON (e.group_id)` has no effect.} {description: `RANGE INDEX entity_group_id FOR (e:Entity) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX entity_group_id IF NOT EXISTS FOR (n:Entity) ON (n.group_id)'
2025-10-29 14:33:00,813 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX mention_group_id FOR ()-[e:MENTIONS]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)'
2025-10-29 14:33:00,814 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.name)` has no effect.} {description: `RANGE INDEX name_entity_index FOR (e:Entity) ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.name)'
2025-10-29 14:33:00,814 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` has no effect.} {description: `FULLTEXT INDEX node_name_and_summary FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS \n            FOR (n:Entity) ON EACH [n.name, n.summary, n.group_id]'
2025-10-29 14:33:00,814 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX community_name IF NOT EXISTS FOR (e:Community) ON EACH [e.name, e.group_id]` has no effect.} {description: `FULLTEXT INDEX community_name FOR (e:Community) ON EACH [e.name, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX community_name IF NOT EXISTS \n            FOR (n:Community) ON EACH [n.name, n.group_id]'
2025-10-29 14:33:00,814 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` has no effect.} {description: `FULLTEXT INDEX edge_name_and_fact FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS \n            FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]'
2025-10-29 14:33:00,815 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_entity_index FOR (e:Entity) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.created_at)'
2025-10-29 14:33:00,816 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_episodic_index FOR (e:Episodic) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.created_at)'
2025-10-29 14:33:00,817 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_episodic_index FOR (e:Episodic) ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.valid_at)'
2025-10-29 14:33:00,817 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)` has no effect.} {description: `RANGE INDEX name_edge_index FOR ()-[e:RELATES_TO]-() ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)'
2025-10-29 14:33:00,818 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)'
2025-10-29 14:33:00,819 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` has no effect.} {description: `RANGE INDEX expired_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` already exists.} {position: None} for query: 'CREATE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)'
2025-10-29 14:33:00,819 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)'
2025-10-29 14:33:00,819 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` has no effect.} {description: `RANGE INDEX invalid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` already exists.} {position: None} for query: 'CREATE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)'
2025-10-29 14:33:00,820 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX episode_content IF NOT EXISTS FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` has no effect.} {description: `FULLTEXT INDEX episode_content FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX episode_content IF NOT EXISTS \n            FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]'
2025-10-29 14:33:00,820 - graphiti_ingestion_manager - INFO - GraphitiIngestionManager initialized for reliable episode ingestion (max_content_length=1200)
2025-10-29 14:33:00,820 - tenant_graphiti_client - INFO - 📏 Knowledge graph episodes will be truncated at 1200 characters
2025-10-29 14:33:00,820 - tenant_graphiti_client - INFO - TenantGraphitiClient initialized successfully with robust LLM: gemini-2.0-flash-thinking-exp-01-21
2025-10-29 14:33:00,820 - tenant_graphiti_client - INFO - ✅ Knowledge graph ingestion is now deterministic and reliable
2025-10-29 14:33:01,020 - interactive_multi_tenant_api - INFO - Document upload for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6: deployment_guide.md -> vector database + knowledge graph
2025-10-29 14:33:01,020 - tenant_data_ingestion_service - INFO - Starting document ingestion for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6: deployment_guide.md
2025-10-29 14:33:01,020 - tenant_data_ingestion_service - INFO - Ingestion options: vector database + knowledge graph
2025-10-29 14:33:04,403 - tenant_data_ingestion_service - INFO - Creating chunks for document: deployment_guide.md
2025-10-29 14:33:04,415 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 14:33:04,453 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:33:30,196 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 14:33:30,235 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:34:05,341 - tenant_data_ingestion_service - INFO - Generating embeddings for 24 chunks
2025-10-29 14:34:05,342 - ingestion.embedder - INFO - Generating embeddings for 24 chunks
2025-10-29 14:34:07,031 - ingestion.embedder - INFO - Processed batch 1/1
2025-10-29 14:34:07,031 - ingestion.embedder - INFO - Generated embeddings for 24 chunks (model: embedding-001, dimensions: 768)
2025-10-29 14:34:16,650 - tenant_data_ingestion_service - INFO - Created 24 chunks for document 13e59491-fb5f-4be8-a0b5-16226067270d (24 with valid embeddings, 0 without)
2025-10-29 14:34:16,876 - tenant_data_ingestion_service - INFO - Vector ingestion: Created 24 chunks with embeddings
2025-10-29 14:34:16,877 - tenant_data_ingestion_service - INFO - Adding 24 existing chunks to tenant e3e43017-ed5e-49bb-a90b-f478782ddde6 graph namespace: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6
2025-10-29 14:34:16,878 - tenant_graphiti_client - INFO - 🚀 Starting production KG ingestion for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6: 24 chunks from 'deployment_guide.md'
2025-10-29 14:34:16,878 - graphiti_ingestion_manager - INFO - Starting KG ingestion for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6: 24 chunks from document 'deployment_guide.md'
2025-10-29 14:34:16,905 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:34:20,803 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:34:22,538 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:34:48,849 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:34:48,855 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:34:48,862 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:34:48,869 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:34:48,874 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:34:48,878 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:34:48,882 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:34:48,888 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:34:48,892 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:34:48,895 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:34:48,898 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:34:50,033 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:34:50,035 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:34:50,037 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:34:50,038 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:34:50,040 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:34:50,041 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:34:50,043 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:34:50,045 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:34:50,046 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:34:50,048 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:34:50,049 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:34:50,051 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:34:51,384 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-10-29 14:34:51,385 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Document: deployment_guide.md\\nSection 16:\\nStep 4: Application Deployment\\n4.1 Create Main Application File\\nCreate main.py:\\n```python\\nimport logging\\nimport uvicorn\\nfrom multitenantapi import createapp\\nfrom config import config\\nConfigure logging\\nlogging.basicConfig(\\nlevel=getattr(logging, config.LOGLEVEL.upper()),\\nformat='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\\n)\\nValidate configuration\\nconfig.validate()\\nCreate FastAPI app with project-per-tenant architecture\",\n  \"Document: deployment_guide.md\\nSection 17:\\napp = createapp(\\nneonapikey=config.NEONAPIKEY,\\ncatalogdatabaseurl=config.CATALOGDATABASEURL,\\nneo4juri=config.NEO4JURI,\\nneo4juser=config.NEO4JUSER,\\nneo4jpassword=config.NEO4JPASSWORD,\\njwtsecretkey=config.JWTSECRETKEY,\\nopenaiapikey=config.OPENAIAPIKEY,\\ntitle=\\\"Multi-Tenant RAG API (Project-per-Tenant)\\\",\\nversion=\\\"2.0.0\\\"\\n)\\nif name == \\\"main\\\":\\nuvicorn.run(\\n\\\"main:app\\\",\\nhost=config.APPHOST,\\nport=config.APPPORT,\\nreload=(config.APPENV == \\\"development\\\"),\\nloglevel=config.LOGLEVEL\\n)\\n``\\n4.2 Test the Deployment\\nStart the application:\\n`bash\\npython main.py\\n`\\nVerify health endpoint:\\n`bash\\ncurl http://localhost:8000/health\\n``\",\n  \"Document: deployment_guide.md\\nSection 18:\\nAccess API documentation:\\nOpen browser to http://localhost:8000/docs\\nStep 5: Production Deployment\\n5.1 Using Docker\\nCreate Dockerfile:\\n``dockerfile\\nFROM python:3.11-slim\\nWORKDIR /app\\nInstall system dependencies\\nRUN apt-get update && apt-get install -y \\\\\\ngcc \\\\\\n&& rm -rf /var/lib/apt/lists/*\\nCopy requirements\\nCOPY requirements.txt .\\nRUN pip install --no-cache-dir -r requirements.txt\\nCopy application\\nCOPY . .\\nCreate non-root user\\nRUN useradd --create-home --shell /bin/bash appuser\\nUSER appuser\\nEXPOSE 8000\\nCMD [\\\"python\\\", \\\"main.py\\\"]\\n``\",\n  \"Document: deployment_guide.md\\nSection 19:\\nCreate docker-compose.yml:\\n``yaml\\nversion: '3.8'\\nservices:\\napp:\\nbuild: .\\nports:\\n\\\"8000:8000\\\"\\nenvironment:\\nNEONCONNECTIONSTRING=${NEONCONNECTIONSTRING}\\nNEO4JURI=${NEO4JURI}\\nNEO4JUSER=${NEO4JUSER}\\nNEO4JPASSWORD=${NEO4JPASSWORD}\\nJWTSECRETKEY=${JWTSECRETKEY}\\nOPENAIAPIKEY=${OPENAIAPIKEY}\\nAPP_ENV=production\\nrestart: unless-stopped\\nhealthcheck:\\ntest: [\\\"CMD\\\", \\\"curl\\\", \\\"-f\\\", \\\"http://localhost:8000/health\\\"]\\ninterval: 30s\\ntimeout: 10s\\nretries: 3\\n`\\nDeploy with Docker Compose:\\n`bash\\ndocker-compose up -d\\n``\\n5.2 Production Checklist\\n-\",\n  \"Document: deployment_guide.md\\nSection 20:\\n[ ] Security:\\n[ ] Strong JWT secret key\\n[ ] HTTPS/TLS certificates\\n[ ] Environment variables secured\\n[ ] Database connections encrypted\\n[ ] Performance:\\n[ ] Connection pooling configured\\n[ ] Database indexes optimized\\n[ ] Rate limiting enabled\\n[ ] Caching implemented (Redis)\\n[ ] Monitoring:\\n[ ] Application logs centralized\\n[ ] Health checks configured\\n[ ] Performance metrics collected\\n[ ] Error tracking enabled\\n[ ] Backup:\\n[ ] Database backup strategy\\n[ ] Disaster recovery plan\\n[ ] Data retention policies\\nTesting Your Deployment\\nCreate a Test Tenant\",\n  \"Document: deployment_guide.md\\nSection 21:\\n``bash\\ncurl -X POST \\\"http://localhost:8000/tenants\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"id\\\": \\\"testcorp\\\",\\n\\\"name\\\": \\\"Test Corporation\\\",\\n\\\"email\\\": \\\"test@corp.com\\\",\\n\\\"maxdocuments\\\": 100,\\n\\\"maxstoragemb\\\": 50\\n}'\\n`\\nGet Authentication Token\\n`bash\\ncurl -X POST \\\"http://localhost:8000/auth/token?tenantid=testcorp&userid=testuser\\\"\\n`\\nCreate a Document\\n`bash\\ncurl -X POST \\\"http://localhost:8000/documents\\\" \\\\\\n-H \\\"Authorization: Bearer YOUR_TOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"title\\\": \\\"Test Document\\\",\\n\\\"source\\\": \\\"test.md\\\",\\n\\\"content\\\": \\\"This is a test document for the multi-tenant RAG system.\\\"\\n}'\\n``\\nQuery the System\",\n  \"Document: deployment_guide.md\\nSection 22:\\n``bash\\ncurl -X POST \\\"http://localhost:8000/query\\\" \\\\\\n-H \\\"Authorization: Bearer YOURTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"query\\\": \\\"What is this document about?\\\",\\n\\\"usevector\\\": true,\\n\\\"usegraph\\\": true,\\n\\\"maxresults\\\": 5\\n}'\\n`\\nTroubleshooting\\nCommon Issues\\nDatabase Connection Errors\\nVerify connection strings\\nCheck firewall/security groups\\nEnsure SSL certificates are valid\\nAuthentication Failures\\nVerify JWT secret key\\nCheck token expiration\\nValidate tenant permissions\\nPerformance Issues\\nMonitor database connections\\nCheck query performance\\nReview memory usage\\nDebug Commands\\n``bash\\nCheck application logs\\ndocker logs container_name\",\n  \"Document: deployment_guide.md\\nSection 23:\\nTest database connectivity\\npython -c \\\"\\nimport asyncpg\\nimport asyncio\\nasync def test():\\nconn = await asyncpg.connect('YOURCONNECTIONSTRING')\\nprint('Connected successfully')\\nawait conn.close()\\nasyncio.run(test())\\n\\\"\\nValidate JWT tokens\\npython -c \\\"\\nfrom jose import jwt\\ntoken = 'YOURTOKEN'\\ndecoded = jwt.decode(token, 'YOURSECRET', algorithms=['HS256'])\\nprint(decoded)\\n\\\"\\n```\\nScaling Considerations\\nHorizontal Scaling\\nDeploy multiple API instances behind load balancer\\nUse Redis for session management\\nImplement database read replicas\\nPerformance Optimization\\nEnable connection pooling (configured in tenant_manager.py)\\nImplement caching layers (Redis/Memcached)\\nUse database query optimization\\n-\",\n  \"Document: deployment_guide.md\\nSection 24:\\nEnable async operations\\nSecurity Hardening\\nImplement rate limiting per tenant\\nAdd request/response logging\\nEnable CORS for specific domains\\nUse secrets management (AWS Secrets Manager, etc.)\\nMonitoring and Maintenance\\nKey Metrics to Monitor\\nResponse times per tenant\\nDatabase connection pools\\nMemory and CPU usage\\nError rates and authentication failures\\nTenant usage statistics\\nMaintenance Tasks\\nRegular database maintenance (VACUUM, ANALYZE)\\nLog rotation and cleanup\\nSecurity updates\\nPerformance tuning\\nBackup verification\\n---\\nNext Steps\\nOnce deployed successfully:\\nAdd More Tenants: Scale to multiple clients\\n2.\",\n  \"Document: deployment_guide.md\\nSection 25:\\nImplement Caching: Add Redis for performance\\nSet Up Monitoring: Use Prometheus/Grafana\\nAdd Features: Implement advanced RAG features\\nScale Infrastructure: Use Kubernetes for orchestration\\nYour multi-tenant RAG system is now ready for production use with complete data isolation and industry-standard security!\"\n]\n        \"Document: deployment_guide.md\\nSection 1:\\nMulti-Tenant RAG System Deployment Guide\\nOverview\\nThis guide provides step-by-step instructions for deploying the multi-tenant RAG system using Neon PostgreSQL (Project-per-Tenant) and Neo4j + Graphiti (group_id namespacing) following official best practices for production-ready multi-tenancy.\\nPrerequisites\\nSystem Requirements\\nPython 3.9+\\nDocker (optional for containerized deployment)\\n4GB+ RAM for development, 8GB+ for production\\n20GB+ storage for databases\\nExternal Services\\nNeon PostgreSQL: Serverless PostgreSQL with pgvector (one project per tenant)\\nNeon API Key: For automated project creation and management\\nNeo4j: Graph database (single shared instance with namespacing)\\n-\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'Python', 'summary': 'The RAG Chatbot for Financial Data aims to democratize access to historical financial data, specifically NIFTY index data, through an intuitive, conversational interface. It targets financial beginners and privacy-conscious users by offering local-only deployment, ensuring data privacy. The chatbot will process financial documents (CSV, PDF, TXT), allow natural language queries, and utilize a local RAG implementation with Chroma DB. Key goals include 100% accuracy in price matching, a seamless user experience for beginners, and successful local deployment on standard Python environments. The scope includes historical NIFTY index data processing, support for specified document formats, local deployment using Python, Flask/FastAPI, and Chroma DB, and a basic testing framework. It excludes real-time data, advanced analysis, multi-user features, and external API integrations. The deployment guide also mentions Python 3.9+ as a system requirement for the multi-tenant RAG system. The deployment involves setting up a Python virtual environment, installing dependencies from `requirements.txt`, configuring Neon PostgreSQL for multi-tenancy, setting up Neo4j, and configuring application settings via a `.env` file and `config.py`. The deployment guide details self-hosted Neo4j using Docker, installing `graphiti-core`, and configuring environment variables for Neon, Neo4j, JWT, and OpenAI. It also covers creating a `config.py` for these settings and a `main.py` to create and run the FastAPI application using `uvicorn`. Production deployment options include Docker and Docker Compose, with a checklist for security, performance, monitoring, and backup. Testing involves creating tenants, obtaining tokens, creating documents, and querying the system. Troubleshooting common issues like database connection errors and authentication failures is also discussed, along with scaling considerations and performance optimization techniques.', 'entity_types': ['Entity'], 'attributes': {'labels': ['Entity']}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{"properties": {"summary": "The RAG Chatbot for Financial Data aims to democratize access to historical financial data, specifically NIFTY index data, through an intuitive, conversational interface. It targets financial beginners and privacy-conscious users by offering local-only deployment, ensuring data privacy. The chatbot will process financial documents (CSV, PDF, TXT), allow natural language queries, and utilize a local RAG implementation with Chroma DB. Key goals include 100% accuracy in price matching, a seamless user experience for beginners, and successful local deployment on standard Python environments. The scope includes historical NIFTY index data processing, support for specified document formats, local deployment using Python, Flask/FastAPI, and Chroma DB, and a basic testing framework. It excludes real-time data, advanced analysis, multi-user features, and external API integrations. The deployment guide also mentions Python 3.9+ as a system requirement for the multi-tenant RAG system. The deployment involves setting up a Python virtual environment, installing dependencies from `requirements.txt`, configuring Neon PostgreSQL for multi-tenancy, setting up Neo4j, and configuring application settings via a `.env` file and `config.py`. The deployment guide details self-hosted Neo4j using Docker, installing `graphiti-core`, and configuring environment variables for Neon, Neo4j, JWT, and OpenAI. It also covers creating a `config.py` for these settings and a `main.py` to create and run the FastAPI application using `uvicorn`. Production deployment options include Docker and Docker Compose, with a checklist for security, performance, monitoring, and backup. Testing involves creating tenants, obtaining tokens, creating documents, and querying the system. Troubleshooting common issues like database connection errors and authentication failures is also discussed, along with scaling considerations and performance optimization techniques."}}
```

2025-10-29 14:34:51,386 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-10-29 14:34:51,386 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-10-29 14:34:51,389 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:34:51,813 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-10-29 14:34:51,813 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Document: deployment_guide.md\\nSection 16:\\nStep 4: Application Deployment\\n4.1 Create Main Application File\\nCreate main.py:\\n```python\\nimport logging\\nimport uvicorn\\nfrom multitenantapi import createapp\\nfrom config import config\\nConfigure logging\\nlogging.basicConfig(\\nlevel=getattr(logging, config.LOGLEVEL.upper()),\\nformat='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\\n)\\nValidate configuration\\nconfig.validate()\\nCreate FastAPI app with project-per-tenant architecture\",\n  \"Document: deployment_guide.md\\nSection 17:\\napp = createapp(\\nneonapikey=config.NEONAPIKEY,\\ncatalogdatabaseurl=config.CATALOGDATABASEURL,\\nneo4juri=config.NEO4JURI,\\nneo4juser=config.NEO4JUSER,\\nneo4jpassword=config.NEO4JPASSWORD,\\njwtsecretkey=config.JWTSECRETKEY,\\nopenaiapikey=config.OPENAIAPIKEY,\\ntitle=\\\"Multi-Tenant RAG API (Project-per-Tenant)\\\",\\nversion=\\\"2.0.0\\\"\\n)\\nif name == \\\"main\\\":\\nuvicorn.run(\\n\\\"main:app\\\",\\nhost=config.APPHOST,\\nport=config.APPPORT,\\nreload=(config.APPENV == \\\"development\\\"),\\nloglevel=config.LOGLEVEL\\n)\\n``\\n4.2 Test the Deployment\\nStart the application:\\n`bash\\npython main.py\\n`\\nVerify health endpoint:\\n`bash\\ncurl http://localhost:8000/health\\n``\",\n  \"Document: deployment_guide.md\\nSection 18:\\nAccess API documentation:\\nOpen browser to http://localhost:8000/docs\\nStep 5: Production Deployment\\n5.1 Using Docker\\nCreate Dockerfile:\\n``dockerfile\\nFROM python:3.11-slim\\nWORKDIR /app\\nInstall system dependencies\\nRUN apt-get update && apt-get install -y \\\\\\ngcc \\\\\\n&& rm -rf /var/lib/apt/lists/*\\nCopy requirements\\nCOPY requirements.txt .\\nRUN pip install --no-cache-dir -r requirements.txt\\nCopy application\\nCOPY . .\\nCreate non-root user\\nRUN useradd --create-home --shell /bin/bash appuser\\nUSER appuser\\nEXPOSE 8000\\nCMD [\\\"python\\\", \\\"main.py\\\"]\\n``\",\n  \"Document: deployment_guide.md\\nSection 19:\\nCreate docker-compose.yml:\\n``yaml\\nversion: '3.8'\\nservices:\\napp:\\nbuild: .\\nports:\\n\\\"8000:8000\\\"\\nenvironment:\\nNEONCONNECTIONSTRING=${NEONCONNECTIONSTRING}\\nNEO4JURI=${NEO4JURI}\\nNEO4JUSER=${NEO4JUSER}\\nNEO4JPASSWORD=${NEO4JPASSWORD}\\nJWTSECRETKEY=${JWTSECRETKEY}\\nOPENAIAPIKEY=${OPENAIAPIKEY}\\nAPP_ENV=production\\nrestart: unless-stopped\\nhealthcheck:\\ntest: [\\\"CMD\\\", \\\"curl\\\", \\\"-f\\\", \\\"http://localhost:8000/health\\\"]\\ninterval: 30s\\ntimeout: 10s\\nretries: 3\\n`\\nDeploy with Docker Compose:\\n`bash\\ndocker-compose up -d\\n``\\n5.2 Production Checklist\\n-\",\n  \"Document: deployment_guide.md\\nSection 20:\\n[ ] Security:\\n[ ] Strong JWT secret key\\n[ ] HTTPS/TLS certificates\\n[ ] Environment variables secured\\n[ ] Database connections encrypted\\n[ ] Performance:\\n[ ] Connection pooling configured\\n[ ] Database indexes optimized\\n[ ] Rate limiting enabled\\n[ ] Caching implemented (Redis)\\n[ ] Monitoring:\\n[ ] Application logs centralized\\n[ ] Health checks configured\\n[ ] Performance metrics collected\\n[ ] Error tracking enabled\\n[ ] Backup:\\n[ ] Database backup strategy\\n[ ] Disaster recovery plan\\n[ ] Data retention policies\\nTesting Your Deployment\\nCreate a Test Tenant\",\n  \"Document: deployment_guide.md\\nSection 21:\\n``bash\\ncurl -X POST \\\"http://localhost:8000/tenants\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"id\\\": \\\"testcorp\\\",\\n\\\"name\\\": \\\"Test Corporation\\\",\\n\\\"email\\\": \\\"test@corp.com\\\",\\n\\\"maxdocuments\\\": 100,\\n\\\"maxstoragemb\\\": 50\\n}'\\n`\\nGet Authentication Token\\n`bash\\ncurl -X POST \\\"http://localhost:8000/auth/token?tenantid=testcorp&userid=testuser\\\"\\n`\\nCreate a Document\\n`bash\\ncurl -X POST \\\"http://localhost:8000/documents\\\" \\\\\\n-H \\\"Authorization: Bearer YOUR_TOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"title\\\": \\\"Test Document\\\",\\n\\\"source\\\": \\\"test.md\\\",\\n\\\"content\\\": \\\"This is a test document for the multi-tenant RAG system.\\\"\\n}'\\n``\\nQuery the System\",\n  \"Document: deployment_guide.md\\nSection 22:\\n``bash\\ncurl -X POST \\\"http://localhost:8000/query\\\" \\\\\\n-H \\\"Authorization: Bearer YOURTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"query\\\": \\\"What is this document about?\\\",\\n\\\"usevector\\\": true,\\n\\\"usegraph\\\": true,\\n\\\"maxresults\\\": 5\\n}'\\n`\\nTroubleshooting\\nCommon Issues\\nDatabase Connection Errors\\nVerify connection strings\\nCheck firewall/security groups\\nEnsure SSL certificates are valid\\nAuthentication Failures\\nVerify JWT secret key\\nCheck token expiration\\nValidate tenant permissions\\nPerformance Issues\\nMonitor database connections\\nCheck query performance\\nReview memory usage\\nDebug Commands\\n``bash\\nCheck application logs\\ndocker logs container_name\",\n  \"Document: deployment_guide.md\\nSection 23:\\nTest database connectivity\\npython -c \\\"\\nimport asyncpg\\nimport asyncio\\nasync def test():\\nconn = await asyncpg.connect('YOURCONNECTIONSTRING')\\nprint('Connected successfully')\\nawait conn.close()\\nasyncio.run(test())\\n\\\"\\nValidate JWT tokens\\npython -c \\\"\\nfrom jose import jwt\\ntoken = 'YOURTOKEN'\\ndecoded = jwt.decode(token, 'YOURSECRET', algorithms=['HS256'])\\nprint(decoded)\\n\\\"\\n```\\nScaling Considerations\\nHorizontal Scaling\\nDeploy multiple API instances behind load balancer\\nUse Redis for session management\\nImplement database read replicas\\nPerformance Optimization\\nEnable connection pooling (configured in tenant_manager.py)\\nImplement caching layers (Redis/Memcached)\\nUse database query optimization\\n-\",\n  \"Document: deployment_guide.md\\nSection 24:\\nEnable async operations\\nSecurity Hardening\\nImplement rate limiting per tenant\\nAdd request/response logging\\nEnable CORS for specific domains\\nUse secrets management (AWS Secrets Manager, etc.)\\nMonitoring and Maintenance\\nKey Metrics to Monitor\\nResponse times per tenant\\nDatabase connection pools\\nMemory and CPU usage\\nError rates and authentication failures\\nTenant usage statistics\\nMaintenance Tasks\\nRegular database maintenance (VACUUM, ANALYZE)\\nLog rotation and cleanup\\nSecurity updates\\nPerformance tuning\\nBackup verification\\n---\\nNext Steps\\nOnce deployed successfully:\\nAdd More Tenants: Scale to multiple clients\\n2.\",\n  \"Document: deployment_guide.md\\nSection 25:\\nImplement Caching: Add Redis for performance\\nSet Up Monitoring: Use Prometheus/Grafana\\nAdd Features: Implement advanced RAG features\\nScale Infrastructure: Use Kubernetes for orchestration\\nYour multi-tenant RAG system is now ready for production use with complete data isolation and industry-standard security!\"\n]\n        \"Document: deployment_guide.md\\nSection 1:\\nMulti-Tenant RAG System Deployment Guide\\nOverview\\nThis guide provides step-by-step instructions for deploying the multi-tenant RAG system using Neon PostgreSQL (Project-per-Tenant) and Neo4j + Graphiti (group_id namespacing) following official best practices for production-ready multi-tenancy.\\nPrerequisites\\nSystem Requirements\\nPython 3.9+\\nDocker (optional for containerized deployment)\\n4GB+ RAM for development, 8GB+ for production\\n20GB+ storage for databases\\nExternal Services\\nNeon PostgreSQL: Serverless PostgreSQL with pgvector (one project per tenant)\\nNeon API Key: For automated project creation and management\\nNeo4j: Graph database (single shared instance with namespacing)\\n-\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'Project-per-Tenant', 'summary': \"The 'Project-per-Tenant' strategy is a multi-tenant RAG system deployment method using Neon PostgreSQL, where each tenant gets a dedicated project. This is detailed in a deployment guide that also uses Neo4j with Graphiti for group ID-based namespacing. The system requires Python 3.9+, Docker (optional), 4GB+ RAM (8GB for production), and 20GB+ storage. It integrates with Neon PostgreSQL (with pgvector) for isolated tenant databases and Neo4j for graph data. The architecture includes a Multi-Tenant API Layer with FastAPI and JWT Auth, an Enhanced Pydantic AI Agent with tenant context injection, and a Multi-Tenant Data Layer using Neon Projects and Neo4j + Graphiti. The Tenant Management Layer uses a Catalog DB for metadata and integrates with the Neon API for automated tenant provisioning. Deployment involves setting up the Python environment, installing dependencies from a `requirements.txt` file, and configuring Neon PostgreSQL projects for each tenant. The deployment guide outlines steps for environment setup, database setup (Neon PostgreSQL and Neo4j), and configuration, including creating a `.env` file with API keys and connection URIs for Neon, Neo4j, and OpenAI. The `requirements.txt` file specifies dependencies like `asyncpg`, `fastapi`, `uvicorn`, `pydantic`, `openai`, `pgvector`, `neon-api-client`, and `graphiti-core`.\", 'entity_types': ['Entity'], 'attributes': {'labels': ['Entity']}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{
  "summary": "The 'Project-per-Tenant' strategy is a multi-tenant RAG system deployment method using Neon PostgreSQL, where each tenant gets a dedicated project. This is detailed in a deployment guide that also uses Neo4j with Graphiti for group ID-based namespacing. The system requires Python 3.9+, Docker (optional), 4GB+ RAM (8GB for production), and 20GB+ storage. It integrates with Neon PostgreSQL (with pgvector) for isolated tenant databases and Neo4j for graph data. The architecture includes a Multi-Tenant API Layer with FastAPI and JWT Auth, an Enhanced Pydantic AI Agent with tenant context injection, and a Multi-Tenant Data Layer using Neon Projects and Neo4j + Graphiti. The Tenant Management Layer uses a Catalog DB for metadata and integrates with the Neon API for automated tenant provisioning. Deployment involves setting up the Python environment, installing dependencies from a `requirements.txt` file, and configuring Neon PostgreSQL projects for each tenant. The deployment guide outlines steps for environment setup, database setup (Neon PostgreSQL and Neo4j), and configuration, including creating a `.env` file with API keys and connection URIs for Neon, Neo4j, and OpenAI. The `requirements.txt` file specifies dependencies like `asyncpg`, `fastapi`, `uvicorn`, `pydantic`, `openai`, `pgvector`, `neon-api-client`, and `graphiti-core`. The deployment process includes creating a main application file (`main.py`) using FastAPI and Uvicorn, configuring logging, and validating settings. For production, Docker and Docker Compose can be used, with a provided Dockerfile and `docker-compose.yml` example. A production checklist covers security, performance, monitoring, and backup considerations. The guide also includes steps for testing the deployment, such as creating tenants, obtaining authentication tokens, creating documents, and querying the system. Troubleshooting common issues like database connection errors and authentication failures is also covered, along with debugging commands and scaling considerations for horizontal scaling, performance optimization, and security hardening. Key metrics to monitor and maintenance tasks are also outlined."
}
```

2025-10-29 14:34:51,814 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-10-29 14:34:51,814 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-10-29 14:34:51,817 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:34:55,221 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-10-29 14:34:55,222 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Document: deployment_guide.md\\nSection 16:\\nStep 4: Application Deployment\\n4.1 Create Main Application File\\nCreate main.py:\\n```python\\nimport logging\\nimport uvicorn\\nfrom multitenantapi import createapp\\nfrom config import config\\nConfigure logging\\nlogging.basicConfig(\\nlevel=getattr(logging, config.LOGLEVEL.upper()),\\nformat='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\\n)\\nValidate configuration\\nconfig.validate()\\nCreate FastAPI app with project-per-tenant architecture\",\n  \"Document: deployment_guide.md\\nSection 17:\\napp = createapp(\\nneonapikey=config.NEONAPIKEY,\\ncatalogdatabaseurl=config.CATALOGDATABASEURL,\\nneo4juri=config.NEO4JURI,\\nneo4juser=config.NEO4JUSER,\\nneo4jpassword=config.NEO4JPASSWORD,\\njwtsecretkey=config.JWTSECRETKEY,\\nopenaiapikey=config.OPENAIAPIKEY,\\ntitle=\\\"Multi-Tenant RAG API (Project-per-Tenant)\\\",\\nversion=\\\"2.0.0\\\"\\n)\\nif name == \\\"main\\\":\\nuvicorn.run(\\n\\\"main:app\\\",\\nhost=config.APPHOST,\\nport=config.APPPORT,\\nreload=(config.APPENV == \\\"development\\\"),\\nloglevel=config.LOGLEVEL\\n)\\n``\\n4.2 Test the Deployment\\nStart the application:\\n`bash\\npython main.py\\n`\\nVerify health endpoint:\\n`bash\\ncurl http://localhost:8000/health\\n``\",\n  \"Document: deployment_guide.md\\nSection 18:\\nAccess API documentation:\\nOpen browser to http://localhost:8000/docs\\nStep 5: Production Deployment\\n5.1 Using Docker\\nCreate Dockerfile:\\n``dockerfile\\nFROM python:3.11-slim\\nWORKDIR /app\\nInstall system dependencies\\nRUN apt-get update && apt-get install -y \\\\\\ngcc \\\\\\n&& rm -rf /var/lib/apt/lists/*\\nCopy requirements\\nCOPY requirements.txt .\\nRUN pip install --no-cache-dir -r requirements.txt\\nCopy application\\nCOPY . .\\nCreate non-root user\\nRUN useradd --create-home --shell /bin/bash appuser\\nUSER appuser\\nEXPOSE 8000\\nCMD [\\\"python\\\", \\\"main.py\\\"]\\n``\",\n  \"Document: deployment_guide.md\\nSection 19:\\nCreate docker-compose.yml:\\n``yaml\\nversion: '3.8'\\nservices:\\napp:\\nbuild: .\\nports:\\n\\\"8000:8000\\\"\\nenvironment:\\nNEONCONNECTIONSTRING=${NEONCONNECTIONSTRING}\\nNEO4JURI=${NEO4JURI}\\nNEO4JUSER=${NEO4JUSER}\\nNEO4JPASSWORD=${NEO4JPASSWORD}\\nJWTSECRETKEY=${JWTSECRETKEY}\\nOPENAIAPIKEY=${OPENAIAPIKEY}\\nAPP_ENV=production\\nrestart: unless-stopped\\nhealthcheck:\\ntest: [\\\"CMD\\\", \\\"curl\\\", \\\"-f\\\", \\\"http://localhost:8000/health\\\"]\\ninterval: 30s\\ntimeout: 10s\\nretries: 3\\n`\\nDeploy with Docker Compose:\\n`bash\\ndocker-compose up -d\\n``\\n5.2 Production Checklist\\n-\",\n  \"Document: deployment_guide.md\\nSection 20:\\n[ ] Security:\\n[ ] Strong JWT secret key\\n[ ] HTTPS/TLS certificates\\n[ ] Environment variables secured\\n[ ] Database connections encrypted\\n[ ] Performance:\\n[ ] Connection pooling configured\\n[ ] Database indexes optimized\\n[ ] Rate limiting enabled\\n[ ] Caching implemented (Redis)\\n[ ] Monitoring:\\n[ ] Application logs centralized\\n[ ] Health checks configured\\n[ ] Performance metrics collected\\n[ ] Error tracking enabled\\n[ ] Backup:\\n[ ] Database backup strategy\\n[ ] Disaster recovery plan\\n[ ] Data retention policies\\nTesting Your Deployment\\nCreate a Test Tenant\",\n  \"Document: deployment_guide.md\\nSection 21:\\n``bash\\ncurl -X POST \\\"http://localhost:8000/tenants\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"id\\\": \\\"testcorp\\\",\\n\\\"name\\\": \\\"Test Corporation\\\",\\n\\\"email\\\": \\\"test@corp.com\\\",\\n\\\"maxdocuments\\\": 100,\\n\\\"maxstoragemb\\\": 50\\n}'\\n`\\nGet Authentication Token\\n`bash\\ncurl -X POST \\\"http://localhost:8000/auth/token?tenantid=testcorp&userid=testuser\\\"\\n`\\nCreate a Document\\n`bash\\ncurl -X POST \\\"http://localhost:8000/documents\\\" \\\\\\n-H \\\"Authorization: Bearer YOUR_TOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"title\\\": \\\"Test Document\\\",\\n\\\"source\\\": \\\"test.md\\\",\\n\\\"content\\\": \\\"This is a test document for the multi-tenant RAG system.\\\"\\n}'\\n``\\nQuery the System\",\n  \"Document: deployment_guide.md\\nSection 22:\\n``bash\\ncurl -X POST \\\"http://localhost:8000/query\\\" \\\\\\n-H \\\"Authorization: Bearer YOURTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"query\\\": \\\"What is this document about?\\\",\\n\\\"usevector\\\": true,\\n\\\"usegraph\\\": true,\\n\\\"maxresults\\\": 5\\n}'\\n`\\nTroubleshooting\\nCommon Issues\\nDatabase Connection Errors\\nVerify connection strings\\nCheck firewall/security groups\\nEnsure SSL certificates are valid\\nAuthentication Failures\\nVerify JWT secret key\\nCheck token expiration\\nValidate tenant permissions\\nPerformance Issues\\nMonitor database connections\\nCheck query performance\\nReview memory usage\\nDebug Commands\\n``bash\\nCheck application logs\\ndocker logs container_name\",\n  \"Document: deployment_guide.md\\nSection 23:\\nTest database connectivity\\npython -c \\\"\\nimport asyncpg\\nimport asyncio\\nasync def test():\\nconn = await asyncpg.connect('YOURCONNECTIONSTRING')\\nprint('Connected successfully')\\nawait conn.close()\\nasyncio.run(test())\\n\\\"\\nValidate JWT tokens\\npython -c \\\"\\nfrom jose import jwt\\ntoken = 'YOURTOKEN'\\ndecoded = jwt.decode(token, 'YOURSECRET', algorithms=['HS256'])\\nprint(decoded)\\n\\\"\\n```\\nScaling Considerations\\nHorizontal Scaling\\nDeploy multiple API instances behind load balancer\\nUse Redis for session management\\nImplement database read replicas\\nPerformance Optimization\\nEnable connection pooling (configured in tenant_manager.py)\\nImplement caching layers (Redis/Memcached)\\nUse database query optimization\\n-\",\n  \"Document: deployment_guide.md\\nSection 24:\\nEnable async operations\\nSecurity Hardening\\nImplement rate limiting per tenant\\nAdd request/response logging\\nEnable CORS for specific domains\\nUse secrets management (AWS Secrets Manager, etc.)\\nMonitoring and Maintenance\\nKey Metrics to Monitor\\nResponse times per tenant\\nDatabase connection pools\\nMemory and CPU usage\\nError rates and authentication failures\\nTenant usage statistics\\nMaintenance Tasks\\nRegular database maintenance (VACUUM, ANALYZE)\\nLog rotation and cleanup\\nSecurity updates\\nPerformance tuning\\nBackup verification\\n---\\nNext Steps\\nOnce deployed successfully:\\nAdd More Tenants: Scale to multiple clients\\n2.\",\n  \"Document: deployment_guide.md\\nSection 25:\\nImplement Caching: Add Redis for performance\\nSet Up Monitoring: Use Prometheus/Grafana\\nAdd Features: Implement advanced RAG features\\nScale Infrastructure: Use Kubernetes for orchestration\\nYour multi-tenant RAG system is now ready for production use with complete data isolation and industry-standard security!\"\n]\n        \"Document: deployment_guide.md\\nSection 1:\\nMulti-Tenant RAG System Deployment Guide\\nOverview\\nThis guide provides step-by-step instructions for deploying the multi-tenant RAG system using Neon PostgreSQL (Project-per-Tenant) and Neo4j + Graphiti (group_id namespacing) following official best practices for production-ready multi-tenancy.\\nPrerequisites\\nSystem Requirements\\nPython 3.9+\\nDocker (optional for containerized deployment)\\n4GB+ RAM for development, 8GB+ for production\\n20GB+ storage for databases\\nExternal Services\\nNeon PostgreSQL: Serverless PostgreSQL with pgvector (one project per tenant)\\nNeon API Key: For automated project creation and management\\nNeo4j: Graph database (single shared instance with namespacing)\\n-\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'Project-per-Tenant', 'summary': \"The 'Project-per-Tenant' strategy is a multi-tenant RAG system deployment method using Neon PostgreSQL, where each tenant gets a dedicated project. This is detailed in a deployment guide that also uses Neo4j with Graphiti for group ID-based namespacing. The system requires Python 3.9+, Docker (optional), 4GB+ RAM (8GB for production), and 20GB+ storage. It integrates with Neon PostgreSQL (with pgvector) for isolated tenant databases and Neo4j for graph data. The architecture includes a Multi-Tenant API Layer with FastAPI and JWT Auth, an Enhanced Pydantic AI Agent with tenant context injection, and a Multi-Tenant Data Layer using Neon Projects and Neo4j + Graphiti. The Tenant Management Layer uses a Catalog DB for metadata and integrates with the Neon API for automated tenant provisioning. Deployment involves setting up the Python environment, installing dependencies from a `requirements.txt` file, and configuring Neon PostgreSQL projects for each tenant. The deployment guide outlines steps for environment setup, database setup (Neon PostgreSQL and Neo4j), and configuration, including creating a `.env` file with API keys and connection URIs for Neon, Neo4j, and OpenAI. The `requirements.txt` file specifies dependencies like `asyncpg`, `fastapi`, `uvicorn`, `pydantic`, `openai`, `pgvector`, `neon-api-client`, and `graphiti-core`.\", 'entity_types': ['Entity'], 'attributes': {'labels': ['Entity']}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  },
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "The previous response attempt was invalid. Error type: Exception. Error details: . Please try again with a valid response, ensuring the output matches the expected format and constraints."
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{
  "summary": "The 'Project-per-Tenant' strategy is a multi-tenant RAG system deployment method using Neon PostgreSQL, where each tenant gets a dedicated project. This is detailed in a deployment guide that also uses Neo4j with Graphiti for group ID-based namespacing. The system requires Python 3.9+, Docker (optional), 4GB+ RAM (8GB for production), and 20GB+ storage. It integrates with Neon PostgreSQL (with pgvector) for isolated tenant databases and Neo4j for graph data. The architecture includes a Multi-Tenant API Layer with FastAPI and JWT Auth, an Enhanced Pydantic AI Agent with tenant context injection, and a Multi-Tenant Data Layer using Neon Projects and Neo4j + Graphiti. The Tenant Management Layer uses a Catalog DB for metadata and integrates with the Neon API for automated tenant provisioning. Deployment involves setting up the Python environment, installing dependencies from a `requirements.txt` file, and configuring Neon PostgreSQL projects for each tenant. The deployment guide outlines steps for environment setup, database setup (Neon PostgreSQL and Neo4j), and configuration, including creating a `.env` file with API keys and connection URIs for Neon, Neo4j, and OpenAI. The `requirements.txt` file specifies dependencies like `asyncpg`, `fastapi`, `uvicorn`, `pydantic`, `openai`, `pgvector`, `neon-api-client`, and `graphiti-core`. The deployment process includes creating a main application file (`main.py`) using FastAPI and Uvicorn, configuring logging, and validating settings. Production deployment can be done using Docker, with a provided `Dockerfile` and `docker-compose.yml` for containerization and orchestration. The guide also covers a production checklist focusing on security, performance, monitoring, and backup strategies, along with testing procedures, troubleshooting common issues, and scaling considerations like horizontal scaling and performance optimization."
}
```

2025-10-29 14:34:55,223 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-10-29 14:34:55,223 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 2/2): 
2025-10-29 14:34:55,223 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed and retries are exhausted.
2025-10-29 14:34:55,223 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "role": "system",
    "content": "You are a helpful assistant that extracts entity properties from the provided text.\nDo not escape unicode characters.\n\n\nAny extracted information should be returned in the same language as it was written in."
  },
  {
    "role": "user",
    "content": "\n\n        <MESSAGES>\n        [\n  \"Document: deployment_guide.md\\nSection 16:\\nStep 4: Application Deployment\\n4.1 Create Main Application File\\nCreate main.py:\\n```python\\nimport logging\\nimport uvicorn\\nfrom multitenantapi import createapp\\nfrom config import config\\nConfigure logging\\nlogging.basicConfig(\\nlevel=getattr(logging, config.LOGLEVEL.upper()),\\nformat='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\\n)\\nValidate configuration\\nconfig.validate()\\nCreate FastAPI app with project-per-tenant architecture\",\n  \"Document: deployment_guide.md\\nSection 17:\\napp = createapp(\\nneonapikey=config.NEONAPIKEY,\\ncatalogdatabaseurl=config.CATALOGDATABASEURL,\\nneo4juri=config.NEO4JURI,\\nneo4juser=config.NEO4JUSER,\\nneo4jpassword=config.NEO4JPASSWORD,\\njwtsecretkey=config.JWTSECRETKEY,\\nopenaiapikey=config.OPENAIAPIKEY,\\ntitle=\\\"Multi-Tenant RAG API (Project-per-Tenant)\\\",\\nversion=\\\"2.0.0\\\"\\n)\\nif name == \\\"main\\\":\\nuvicorn.run(\\n\\\"main:app\\\",\\nhost=config.APPHOST,\\nport=config.APPPORT,\\nreload=(config.APPENV == \\\"development\\\"),\\nloglevel=config.LOGLEVEL\\n)\\n``\\n4.2 Test the Deployment\\nStart the application:\\n`bash\\npython main.py\\n`\\nVerify health endpoint:\\n`bash\\ncurl http://localhost:8000/health\\n``\",\n  \"Document: deployment_guide.md\\nSection 18:\\nAccess API documentation:\\nOpen browser to http://localhost:8000/docs\\nStep 5: Production Deployment\\n5.1 Using Docker\\nCreate Dockerfile:\\n``dockerfile\\nFROM python:3.11-slim\\nWORKDIR /app\\nInstall system dependencies\\nRUN apt-get update && apt-get install -y \\\\\\ngcc \\\\\\n&& rm -rf /var/lib/apt/lists/*\\nCopy requirements\\nCOPY requirements.txt .\\nRUN pip install --no-cache-dir -r requirements.txt\\nCopy application\\nCOPY . .\\nCreate non-root user\\nRUN useradd --create-home --shell /bin/bash appuser\\nUSER appuser\\nEXPOSE 8000\\nCMD [\\\"python\\\", \\\"main.py\\\"]\\n``\",\n  \"Document: deployment_guide.md\\nSection 19:\\nCreate docker-compose.yml:\\n``yaml\\nversion: '3.8'\\nservices:\\napp:\\nbuild: .\\nports:\\n\\\"8000:8000\\\"\\nenvironment:\\nNEONCONNECTIONSTRING=${NEONCONNECTIONSTRING}\\nNEO4JURI=${NEO4JURI}\\nNEO4JUSER=${NEO4JUSER}\\nNEO4JPASSWORD=${NEO4JPASSWORD}\\nJWTSECRETKEY=${JWTSECRETKEY}\\nOPENAIAPIKEY=${OPENAIAPIKEY}\\nAPP_ENV=production\\nrestart: unless-stopped\\nhealthcheck:\\ntest: [\\\"CMD\\\", \\\"curl\\\", \\\"-f\\\", \\\"http://localhost:8000/health\\\"]\\ninterval: 30s\\ntimeout: 10s\\nretries: 3\\n`\\nDeploy with Docker Compose:\\n`bash\\ndocker-compose up -d\\n``\\n5.2 Production Checklist\\n-\",\n  \"Document: deployment_guide.md\\nSection 20:\\n[ ] Security:\\n[ ] Strong JWT secret key\\n[ ] HTTPS/TLS certificates\\n[ ] Environment variables secured\\n[ ] Database connections encrypted\\n[ ] Performance:\\n[ ] Connection pooling configured\\n[ ] Database indexes optimized\\n[ ] Rate limiting enabled\\n[ ] Caching implemented (Redis)\\n[ ] Monitoring:\\n[ ] Application logs centralized\\n[ ] Health checks configured\\n[ ] Performance metrics collected\\n[ ] Error tracking enabled\\n[ ] Backup:\\n[ ] Database backup strategy\\n[ ] Disaster recovery plan\\n[ ] Data retention policies\\nTesting Your Deployment\\nCreate a Test Tenant\",\n  \"Document: deployment_guide.md\\nSection 21:\\n``bash\\ncurl -X POST \\\"http://localhost:8000/tenants\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"id\\\": \\\"testcorp\\\",\\n\\\"name\\\": \\\"Test Corporation\\\",\\n\\\"email\\\": \\\"test@corp.com\\\",\\n\\\"maxdocuments\\\": 100,\\n\\\"maxstoragemb\\\": 50\\n}'\\n`\\nGet Authentication Token\\n`bash\\ncurl -X POST \\\"http://localhost:8000/auth/token?tenantid=testcorp&userid=testuser\\\"\\n`\\nCreate a Document\\n`bash\\ncurl -X POST \\\"http://localhost:8000/documents\\\" \\\\\\n-H \\\"Authorization: Bearer YOUR_TOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"title\\\": \\\"Test Document\\\",\\n\\\"source\\\": \\\"test.md\\\",\\n\\\"content\\\": \\\"This is a test document for the multi-tenant RAG system.\\\"\\n}'\\n``\\nQuery the System\",\n  \"Document: deployment_guide.md\\nSection 22:\\n``bash\\ncurl -X POST \\\"http://localhost:8000/query\\\" \\\\\\n-H \\\"Authorization: Bearer YOURTOKEN\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n\\\"query\\\": \\\"What is this document about?\\\",\\n\\\"usevector\\\": true,\\n\\\"usegraph\\\": true,\\n\\\"maxresults\\\": 5\\n}'\\n`\\nTroubleshooting\\nCommon Issues\\nDatabase Connection Errors\\nVerify connection strings\\nCheck firewall/security groups\\nEnsure SSL certificates are valid\\nAuthentication Failures\\nVerify JWT secret key\\nCheck token expiration\\nValidate tenant permissions\\nPerformance Issues\\nMonitor database connections\\nCheck query performance\\nReview memory usage\\nDebug Commands\\n``bash\\nCheck application logs\\ndocker logs container_name\",\n  \"Document: deployment_guide.md\\nSection 23:\\nTest database connectivity\\npython -c \\\"\\nimport asyncpg\\nimport asyncio\\nasync def test():\\nconn = await asyncpg.connect('YOURCONNECTIONSTRING')\\nprint('Connected successfully')\\nawait conn.close()\\nasyncio.run(test())\\n\\\"\\nValidate JWT tokens\\npython -c \\\"\\nfrom jose import jwt\\ntoken = 'YOURTOKEN'\\ndecoded = jwt.decode(token, 'YOURSECRET', algorithms=['HS256'])\\nprint(decoded)\\n\\\"\\n```\\nScaling Considerations\\nHorizontal Scaling\\nDeploy multiple API instances behind load balancer\\nUse Redis for session management\\nImplement database read replicas\\nPerformance Optimization\\nEnable connection pooling (configured in tenant_manager.py)\\nImplement caching layers (Redis/Memcached)\\nUse database query optimization\\n-\",\n  \"Document: deployment_guide.md\\nSection 24:\\nEnable async operations\\nSecurity Hardening\\nImplement rate limiting per tenant\\nAdd request/response logging\\nEnable CORS for specific domains\\nUse secrets management (AWS Secrets Manager, etc.)\\nMonitoring and Maintenance\\nKey Metrics to Monitor\\nResponse times per tenant\\nDatabase connection pools\\nMemory and CPU usage\\nError rates and authentication failures\\nTenant usage statistics\\nMaintenance Tasks\\nRegular database maintenance (VACUUM, ANALYZE)\\nLog rotation and cleanup\\nSecurity updates\\nPerformance tuning\\nBackup verification\\n---\\nNext Steps\\nOnce deployed successfully:\\nAdd More Tenants: Scale to multiple clients\\n2.\",\n  \"Document: deployment_guide.md\\nSection 25:\\nImplement Caching: Add Redis for performance\\nSet Up Monitoring: Use Prometheus/Grafana\\nAdd Features: Implement advanced RAG features\\nScale Infrastructure: Use Kubernetes for orchestration\\nYour multi-tenant RAG system is now ready for production use with complete data isolation and industry-standard security!\"\n]\n        \"Document: deployment_guide.md\\nSection 1:\\nMulti-Tenant RAG System Deployment Guide\\nOverview\\nThis guide provides step-by-step instructions for deploying the multi-tenant RAG system using Neon PostgreSQL (Project-per-Tenant) and Neo4j + Graphiti (group_id namespacing) following official best practices for production-ready multi-tenancy.\\nPrerequisites\\nSystem Requirements\\nPython 3.9+\\nDocker (optional for containerized deployment)\\n4GB+ RAM for development, 8GB+ for production\\n20GB+ storage for databases\\nExternal Services\\nNeon PostgreSQL: Serverless PostgreSQL with pgvector (one project per tenant)\\nNeon API Key: For automated project creation and management\\nNeo4j: Graph database (single shared instance with namespacing)\\n-\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'Project-per-Tenant', 'summary': \"The 'Project-per-Tenant' strategy is a multi-tenant RAG system deployment method using Neon PostgreSQL, where each tenant gets a dedicated project. This is detailed in a deployment guide that also uses Neo4j with Graphiti for group ID-based namespacing. The system requires Python 3.9+, Docker (optional), 4GB+ RAM (8GB for production), and 20GB+ storage. It integrates with Neon PostgreSQL (with pgvector) for isolated tenant databases and Neo4j for graph data. The architecture includes a Multi-Tenant API Layer with FastAPI and JWT Auth, an Enhanced Pydantic AI Agent with tenant context injection, and a Multi-Tenant Data Layer using Neon Projects and Neo4j + Graphiti. The Tenant Management Layer uses a Catalog DB for metadata and integrates with the Neon API for automated tenant provisioning. Deployment involves setting up the Python environment, installing dependencies from a `requirements.txt` file, and configuring Neon PostgreSQL projects for each tenant. The deployment guide outlines steps for environment setup, database setup (Neon PostgreSQL and Neo4j), and configuration, including creating a `.env` file with API keys and connection URIs for Neon, Neo4j, and OpenAI. The `requirements.txt` file specifies dependencies like `asyncpg`, `fastapi`, `uvicorn`, `pydantic`, `openai`, `pgvector`, `neon-api-client`, and `graphiti-core`.\", 'entity_types': ['Entity'], 'attributes': {'labels': ['Entity']}}\n        </ENTITY>\n        "
  },
  {
    "role": "user",
    "content": "The previous response attempt was invalid. Error type: Exception. Error details: . Please try again with a valid response, ensuring the output matches the expected format and constraints."
  },
  {
    "role": "user",
    "content": "The previous response attempt was invalid. Error type: Exception. Error details: . Please try again with a valid response, ensuring the output matches the expected format and constraints."
  }
]
No raw output available
2025-10-29 14:34:55,224 - graphiti_core.llm_client.gemini_client - ERROR - Max retries (2) exceeded. Last error: 
2025-10-29 14:34:55,224 - graphiti_ingestion_manager - ERROR - Failed to ingest episode tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_8ef9ae81_1761728656:  (body preview: Document: deployment_guide.md
Section 1:
Multi-Tenant RAG System Deployment Guide
Overview
This guid...)
2025-10-29 14:34:55,224 - graphiti_ingestion_manager - ERROR - ❌ Episode ingest failed for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6 chunk_id=8ef9ae81-a018-4e45-af0d-028cfe99120e: 
2025-10-29 14:34:55,234 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:34:58,786 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:35:00,173 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:35:13,411 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:35:13,414 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:35:13,416 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:35:13,419 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:35:13,421 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:35:13,423 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:35:13,425 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:35:14,329 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:35:14,330 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:35:14,332 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:35:14,334 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:35:14,336 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:35:26,975 - graphiti_core.graphiti - INFO - Completed add_episode in 31750.05078315735 ms
2025-10-29 14:35:26,975 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_5168b901_1761728656
2025-10-29 14:35:26,979 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:35:29,918 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:35:31,413 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:35:44,978 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:35:44,985 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:35:45,012 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:35:45,015 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:35:45,023 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:35:45,026 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:35:45,029 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:35:45,032 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:35:45,035 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:35:45,038 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:35:46,590 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:35:46,592 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:35:46,594 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:35:46,596 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:35:46,598 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:35:46,599 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:35:46,601 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:35:46,603 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:35:57,841 - graphiti_core.graphiti - INFO - Completed add_episode in 30865.53978919983 ms
2025-10-29 14:35:57,841 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_9caadca5_1761728656
2025-10-29 14:35:57,846 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:36:02,493 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:36:04,024 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:36:39,560 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:36:39,566 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:36:39,575 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:36:39,580 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:36:39,590 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:36:39,597 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:36:39,601 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:36:39,604 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:36:39,608 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:36:39,611 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:36:39,615 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:36:39,617 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:36:39,662 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:36:41,331 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:36:41,334 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:36:41,337 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:36:41,341 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:36:41,343 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:36:41,345 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:36:41,347 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:36:41,349 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:36:41,351 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:36:41,353 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:36:41,354 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:36:41,357 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:36:41,359 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:36:41,360 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:36:41,362 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:36:56,629 - graphiti_core.graphiti - INFO - Completed add_episode in 58787.31298446655 ms
2025-10-29 14:36:56,629 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_23088f26_1761728656
2025-10-29 14:36:56,633 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:37:02,080 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:37:03,499 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:37:13,747 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:37:13,754 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:37:13,758 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:37:13,763 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:37:13,767 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:37:13,772 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:37:13,775 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:37:13,779 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:37:13,782 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:37:13,785 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:37:13,789 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:37:13,791 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:37:13,794 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:37:15,475 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:37:15,477 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:37:15,479 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:37:15,480 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:37:15,482 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:37:15,484 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:37:15,485 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:37:15,487 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:37:29,138 - graphiti_core.graphiti - INFO - Completed add_episode in 32508.906841278076 ms
2025-10-29 14:37:29,139 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_9ac03fec_1761728656
2025-10-29 14:37:29,144 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:37:34,590 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:37:36,978 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:38:04,869 - interactive_multi_tenant_api - INFO - Shutting down Multi-Tenant RAG API...
2025-10-29 14:41:01,625 - __main__ - INFO - Starting Interactive Multi-Tenant RAG API on 127.0.0.1:8000
2025-10-29 14:41:01,645 - interactive_multi_tenant_api - INFO - Starting Multi-Tenant RAG API...
2025-10-29 14:41:01,645 - interactive_multi_tenant_api - INFO - Neo4j URI: neo4j://127.0.0.1:7687
2025-10-29 14:41:01,645 - interactive_multi_tenant_api - INFO - Neo4j User: neo4j
2025-10-29 14:41:01,645 - interactive_multi_tenant_api - INFO - Neo4j Password: ***
2025-10-29 14:41:01,645 - tenant_manager - INFO - TenantManager initialized with Graphiti client
2025-10-29 14:41:01,645 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-10-29 14:41:01,645 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-10-29 14:41:01,645 - multi_tenant_ingestion - INFO - Multi-tenant ingestion pipeline initialized
2025-10-29 14:41:01,645 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-10-29 14:41:01,645 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-10-29 14:41:01,645 - interactive_multi_tenant_api - INFO - Tenant manager initialized
2025-10-29 14:41:01,652 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-10-29 14:41:01,652 - interactive_multi_tenant_api - INFO - Tenant ingestion service initialized
2025-10-29 14:41:01,652 - auth_middleware - INFO - JWT Authenticator initialized
2025-10-29 14:41:01,652 - interactive_multi_tenant_api - INFO - JWT authenticator initialized
2025-10-29 14:41:01,652 - interactive_multi_tenant_api - INFO - 🎯 Multi-Tenant RAG API ready - all backend logs will appear in this terminal
2025-10-29 14:41:01,652 - interactive_multi_tenant_api - INFO - 📊 Backend activity from CLI and API operations will be shown below:
2025-10-29 14:41:21,705 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-10-29 14:41:21,922 - catalog_database - INFO - Catalog database connection test successful
2025-10-29 14:41:21,923 - graphiti_performance_config - INFO - 🎯 Using BALANCED performance configuration for Graphiti
2025-10-29 14:41:21,923 - tenant_graphiti_client - INFO - 🚀 Graphiti Performance Configuration Applied:
2025-10-29 14:41:21,923 - tenant_graphiti_client - INFO -   📋 LLM Model: gemini-2.0-flash-thinking-exp-01-21
2025-10-29 14:41:21,924 - tenant_graphiti_client - INFO -   🌡️  Temperature: 0.1
2025-10-29 14:41:21,924 - tenant_graphiti_client - INFO -   📏 Max Content Length: 1200 chars
2025-10-29 14:41:21,924 - tenant_graphiti_client - INFO -   📦 Batch Size: 2
2025-10-29 14:41:21,924 - tenant_graphiti_client - INFO -   ⚡ Batch Optimization: True
2025-10-29 14:41:21,924 - tenant_graphiti_client - INFO -   ⏱️  Timeout: 60s
2025-10-29 14:41:21,924 - tenant_graphiti_client - INFO - Applied Graphiti performance optimizations for production reliability
2025-10-29 14:41:21,925 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 14:41:21,968 - robust_gemini_client - INFO - RobustGeminiClient initialized with temperature=0.0 for deterministic JSON output
2025-10-29 14:41:21,968 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 14:41:21,994 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 14:41:22,060 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_uuid IF NOT EXISTS FOR (e:Entity) ON (e.uuid)` has no effect.} {description: `RANGE INDEX entity_uuid FOR (e:Entity) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX entity_uuid IF NOT EXISTS FOR (n:Entity) ON (n.uuid)'
2025-10-29 14:41:22,065 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_uuid IF NOT EXISTS FOR (e:Episodic) ON (e.uuid)` has no effect.} {description: `RANGE INDEX episode_uuid FOR (e:Episodic) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX episode_uuid IF NOT EXISTS FOR (n:Episodic) ON (n.uuid)'
2025-10-29 14:41:22,066 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX community_uuid IF NOT EXISTS FOR (e:Community) ON (e.uuid)` has no effect.} {description: `RANGE INDEX community_uuid FOR (e:Community) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX community_uuid IF NOT EXISTS FOR (n:Community) ON (n.uuid)'
2025-10-29 14:41:22,066 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX relation_uuid FOR ()-[e:RELATES_TO]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)'
2025-10-29 14:41:22,067 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX mention_uuid FOR ()-[e:MENTIONS]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)'
2025-10-29 14:41:22,067 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX has_member_uuid FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)'
2025-10-29 14:41:22,068 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)'
2025-10-29 14:41:22,069 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_group_id IF NOT EXISTS FOR (e:Entity) ON (e.group_id)` has no effect.} {description: `RANGE INDEX entity_group_id FOR (e:Entity) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX entity_group_id IF NOT EXISTS FOR (n:Entity) ON (n.group_id)'
2025-10-29 14:41:22,070 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_group_id IF NOT EXISTS FOR (e:Episodic) ON (e.group_id)` has no effect.} {description: `RANGE INDEX episode_group_id FOR (e:Episodic) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX episode_group_id IF NOT EXISTS FOR (n:Episodic) ON (n.group_id)'
2025-10-29 14:41:22,072 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX relation_group_id FOR ()-[e:RELATES_TO]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)'
2025-10-29 14:41:22,073 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX mention_group_id FOR ()-[e:MENTIONS]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)'
2025-10-29 14:41:22,073 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` has no effect.} {description: `FULLTEXT INDEX node_name_and_summary FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS \n            FOR (n:Entity) ON EACH [n.name, n.summary, n.group_id]'
2025-10-29 14:41:22,073 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX community_name IF NOT EXISTS FOR (e:Community) ON EACH [e.name, e.group_id]` has no effect.} {description: `FULLTEXT INDEX community_name FOR (e:Community) ON EACH [e.name, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX community_name IF NOT EXISTS \n            FOR (n:Community) ON EACH [n.name, n.group_id]'
2025-10-29 14:41:22,074 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` has no effect.} {description: `FULLTEXT INDEX edge_name_and_fact FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS \n            FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]'
2025-10-29 14:41:22,075 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.name)` has no effect.} {description: `RANGE INDEX name_entity_index FOR (e:Entity) ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.name)'
2025-10-29 14:41:22,075 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_entity_index FOR (e:Entity) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.created_at)'
2025-10-29 14:41:22,076 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_episodic_index FOR (e:Episodic) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.created_at)'
2025-10-29 14:41:22,077 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_episodic_index FOR (e:Episodic) ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.valid_at)'
2025-10-29 14:41:22,078 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)` has no effect.} {description: `RANGE INDEX name_edge_index FOR ()-[e:RELATES_TO]-() ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)'
2025-10-29 14:41:22,079 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)'
2025-10-29 14:41:22,080 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` has no effect.} {description: `RANGE INDEX expired_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` already exists.} {position: None} for query: 'CREATE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)'
2025-10-29 14:41:22,081 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` has no effect.} {description: `RANGE INDEX invalid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` already exists.} {position: None} for query: 'CREATE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)'
2025-10-29 14:41:22,081 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX episode_content IF NOT EXISTS FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` has no effect.} {description: `FULLTEXT INDEX episode_content FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX episode_content IF NOT EXISTS \n            FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]'
2025-10-29 14:41:22,081 - graphiti_ingestion_manager - INFO - GraphitiIngestionManager initialized for reliable episode ingestion (max_content_length=1200)
2025-10-29 14:41:22,081 - tenant_graphiti_client - INFO - 📏 Knowledge graph episodes will be truncated at 1200 characters
2025-10-29 14:41:22,081 - tenant_graphiti_client - INFO - TenantGraphitiClient initialized successfully with robust LLM: gemini-2.0-flash-thinking-exp-01-21
2025-10-29 14:41:22,081 - tenant_graphiti_client - INFO - ✅ Knowledge graph ingestion is now deterministic and reliable
2025-10-29 14:41:22,326 - interactive_multi_tenant_api - INFO - Document upload for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6: temporal_rag_test_story.md -> vector database + knowledge graph
2025-10-29 14:41:22,326 - tenant_data_ingestion_service - INFO - Starting document ingestion for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6: temporal_rag_test_story.md
2025-10-29 14:41:22,326 - tenant_data_ingestion_service - INFO - Ingestion options: vector database + knowledge graph
2025-10-29 14:41:25,343 - tenant_data_ingestion_service - INFO - Creating chunks for document: temporal_rag_test_story.md
2025-10-29 14:41:25,344 - tenant_data_ingestion_service - INFO - Generating embeddings for 4 chunks
2025-10-29 14:41:25,344 - ingestion.embedder - INFO - Generating embeddings for 4 chunks
2025-10-29 14:41:26,306 - ingestion.embedder - INFO - Processed batch 1/1
2025-10-29 14:41:26,306 - ingestion.embedder - INFO - Generated embeddings for 4 chunks (model: embedding-001, dimensions: 768)
2025-10-29 14:41:30,798 - tenant_data_ingestion_service - INFO - Created 4 chunks for document 42334436-ec97-4f61-9aec-fdde826c0e82 (4 with valid embeddings, 0 without)
2025-10-29 14:41:31,028 - tenant_data_ingestion_service - INFO - Vector ingestion: Created 4 chunks with embeddings
2025-10-29 14:41:31,028 - tenant_data_ingestion_service - INFO - Adding 4 existing chunks to tenant e3e43017-ed5e-49bb-a90b-f478782ddde6 graph namespace: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6
2025-10-29 14:41:31,029 - tenant_graphiti_client - INFO - 🚀 Starting production KG ingestion for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6: 4 chunks from 'temporal_rag_test_story.md'
2025-10-29 14:41:31,029 - graphiti_ingestion_manager - INFO - Starting KG ingestion for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6: 4 chunks from document 'temporal_rag_test_story.md'
2025-10-29 14:41:31,047 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:41:34,936 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:41:36,525 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:42:22,091 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:42:22,097 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:42:22,109 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:42:22,123 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:42:22,126 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:42:22,138 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:42:22,147 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:42:22,150 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:42:22,153 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:42:22,155 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:42:22,158 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:42:22,160 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:42:26,488 - graphiti_core.graphiti - INFO - Completed add_episode in 55457.30185508728 ms
2025-10-29 14:42:26,488 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_3c4af893_1761729091
2025-10-29 14:42:26,493 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:42:30,615 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:42:32,809 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:43:10,417 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:43:10,424 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:43:10,429 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:43:10,434 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:43:10,437 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:43:10,441 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:43:10,446 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:43:10,449 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:43:10,452 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:43:10,456 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:43:10,459 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:43:10,463 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:43:10,466 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:43:10,469 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:43:10,472 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:43:12,511 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:43:12,512 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:43:12,515 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:43:12,517 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:43:12,518 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:43:12,520 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:43:12,521 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:43:12,523 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:43:12,524 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:43:12,526 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:43:12,528 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:43:12,530 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:43:12,531 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:43:19,256 - graphiti_core.graphiti - INFO - Completed add_episode in 52767.3237323761 ms
2025-10-29 14:43:19,256 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_6122cb5c_1761729091
2025-10-29 14:43:19,262 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:43:24,597 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:43:26,985 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:44,370 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:44,374 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:44,380 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:44,385 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:44,388 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:44,392 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:44,397 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:44,400 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:44,404 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:44,407 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:44,411 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:44,414 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:44,418 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:44,421 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:44,423 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:44,426 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:44,429 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:44,432 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:44,434 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:44,436 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:45,916 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:46,141 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:46,229 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:46,311 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:47,367 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:47,369 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:47,371 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:47,372 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:47,374 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:47,376 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:47,378 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:47,379 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:47,381 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:47,382 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:47,384 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:47,385 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:47,387 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:47,388 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:47,390 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:47,391 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:47,393 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:47,395 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:47,396 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:47,398 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:44:59,302 - graphiti_core.graphiti - INFO - Completed add_episode in 100045.13597488403 ms
2025-10-29 14:44:59,302 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_1ab0fefd_1761729091
2025-10-29 14:44:59,307 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:45:02,186 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:45:03,531 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:45:08,957 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:45:08,965 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:45:08,971 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:45:10,197 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:45:13,795 - graphiti_core.graphiti - INFO - Completed add_episode in 14492.542266845703 ms
2025-10-29 14:45:13,795 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_87baa577_1761729091
2025-10-29 14:45:13,795 - graphiti_ingestion_manager - INFO - KG ingestion completed for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6: 4/4 episodes succeeded, 0 failed
2025-10-29 14:45:13,795 - tenant_graphiti_client - INFO - ✅ Perfect KG ingestion for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6: 4/4 episodes succeeded
2025-10-29 14:45:13,796 - tenant_data_ingestion_service - INFO - ✅ Successfully added 4 episodes to tenant e3e43017-ed5e-49bb-a90b-f478782ddde6 graph namespace
2025-10-29 14:45:13,796 - tenant_data_ingestion_service - INFO - Graph ingestion: Created episode 4
2025-10-29 14:45:13,796 - tenant_data_ingestion_service - INFO - Successfully ingested document 42334436-ec97-4f61-9aec-fdde826c0e82 for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6 in 231469.36ms
2025-10-29 14:49:38,243 - interactive_multi_tenant_api - INFO - Shutting down Multi-Tenant RAG API...
2025-10-29 14:49:42,179 - __main__ - INFO - Starting Interactive Multi-Tenant RAG API on 127.0.0.1:8000
2025-10-29 14:49:42,198 - interactive_multi_tenant_api - INFO - Starting Multi-Tenant RAG API...
2025-10-29 14:49:42,198 - interactive_multi_tenant_api - INFO - Neo4j URI: neo4j://127.0.0.1:7687
2025-10-29 14:49:42,199 - interactive_multi_tenant_api - INFO - Neo4j User: neo4j
2025-10-29 14:49:42,199 - interactive_multi_tenant_api - INFO - Neo4j Password: ***
2025-10-29 14:49:42,199 - tenant_manager - INFO - TenantManager initialized with Graphiti client
2025-10-29 14:49:42,199 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-10-29 14:49:42,199 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-10-29 14:49:42,199 - multi_tenant_ingestion - INFO - Multi-tenant ingestion pipeline initialized
2025-10-29 14:49:42,199 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-10-29 14:49:42,199 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-10-29 14:49:42,199 - interactive_multi_tenant_api - INFO - Tenant manager initialized
2025-10-29 14:49:42,205 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-10-29 14:49:42,205 - interactive_multi_tenant_api - INFO - Tenant ingestion service initialized
2025-10-29 14:49:42,205 - auth_middleware - INFO - JWT Authenticator initialized
2025-10-29 14:49:42,205 - interactive_multi_tenant_api - INFO - JWT authenticator initialized
2025-10-29 14:49:42,205 - interactive_multi_tenant_api - INFO - 🎯 Multi-Tenant RAG API ready - all backend logs will appear in this terminal
2025-10-29 14:49:42,205 - interactive_multi_tenant_api - INFO - 📊 Backend activity from CLI and API operations will be shown below:
2025-10-29 14:50:02,770 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-10-29 14:50:02,971 - catalog_database - INFO - Catalog database connection test successful
2025-10-29 14:50:02,972 - graphiti_performance_config - INFO - 🎯 Using BALANCED performance configuration for Graphiti
2025-10-29 14:50:02,972 - tenant_graphiti_client - INFO - 🚀 Graphiti Performance Configuration Applied:
2025-10-29 14:50:02,973 - tenant_graphiti_client - INFO -   📋 LLM Model: gemini-2.0-flash-thinking-exp-01-21
2025-10-29 14:50:02,973 - tenant_graphiti_client - INFO -   🌡️  Temperature: 0.0
2025-10-29 14:50:02,973 - tenant_graphiti_client - INFO -   📏 Max Content Length: 1200 chars
2025-10-29 14:50:02,973 - tenant_graphiti_client - INFO -   📦 Batch Size: 2
2025-10-29 14:50:02,973 - tenant_graphiti_client - INFO -   ⚡ Batch Optimization: True
2025-10-29 14:50:02,973 - tenant_graphiti_client - INFO -   ⏱️  Timeout: 60s
2025-10-29 14:50:02,974 - tenant_graphiti_client - INFO - Applied Graphiti performance optimizations for production reliability
2025-10-29 14:50:02,974 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 14:50:03,016 - robust_gemini_client - INFO - RobustGeminiClient initialized with temperature=0.0 for deterministic JSON output
2025-10-29 14:50:03,016 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 14:50:03,042 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 14:50:03,108 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_uuid IF NOT EXISTS FOR (e:Entity) ON (e.uuid)` has no effect.} {description: `RANGE INDEX entity_uuid FOR (e:Entity) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX entity_uuid IF NOT EXISTS FOR (n:Entity) ON (n.uuid)'
2025-10-29 14:50:03,112 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX community_uuid IF NOT EXISTS FOR (e:Community) ON (e.uuid)` has no effect.} {description: `RANGE INDEX community_uuid FOR (e:Community) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX community_uuid IF NOT EXISTS FOR (n:Community) ON (n.uuid)'
2025-10-29 14:50:03,113 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_uuid IF NOT EXISTS FOR (e:Episodic) ON (e.uuid)` has no effect.} {description: `RANGE INDEX episode_uuid FOR (e:Episodic) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX episode_uuid IF NOT EXISTS FOR (n:Episodic) ON (n.uuid)'
2025-10-29 14:50:03,114 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX relation_uuid FOR ()-[e:RELATES_TO]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)'
2025-10-29 14:50:03,114 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX has_member_uuid FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)'
2025-10-29 14:50:03,115 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX mention_uuid FOR ()-[e:MENTIONS]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)'
2025-10-29 14:50:03,116 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_group_id IF NOT EXISTS FOR (e:Entity) ON (e.group_id)` has no effect.} {description: `RANGE INDEX entity_group_id FOR (e:Entity) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX entity_group_id IF NOT EXISTS FOR (n:Entity) ON (n.group_id)'
2025-10-29 14:50:03,117 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_group_id IF NOT EXISTS FOR (e:Episodic) ON (e.group_id)` has no effect.} {description: `RANGE INDEX episode_group_id FOR (e:Episodic) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX episode_group_id IF NOT EXISTS FOR (n:Episodic) ON (n.group_id)'
2025-10-29 14:50:03,117 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` has no effect.} {description: `RANGE INDEX invalid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` already exists.} {position: None} for query: 'CREATE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)'
2025-10-29 14:50:03,118 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX relation_group_id FOR ()-[e:RELATES_TO]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)'
2025-10-29 14:50:03,119 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX mention_group_id FOR ()-[e:MENTIONS]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)'
2025-10-29 14:50:03,119 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` has no effect.} {description: `FULLTEXT INDEX node_name_and_summary FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS \n            FOR (n:Entity) ON EACH [n.name, n.summary, n.group_id]'
2025-10-29 14:50:03,120 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX community_name IF NOT EXISTS FOR (e:Community) ON EACH [e.name, e.group_id]` has no effect.} {description: `FULLTEXT INDEX community_name FOR (e:Community) ON EACH [e.name, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX community_name IF NOT EXISTS \n            FOR (n:Community) ON EACH [n.name, n.group_id]'
2025-10-29 14:50:03,121 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.name)` has no effect.} {description: `RANGE INDEX name_entity_index FOR (e:Entity) ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.name)'
2025-10-29 14:50:03,121 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_entity_index FOR (e:Entity) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.created_at)'
2025-10-29 14:50:03,122 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_episodic_index FOR (e:Episodic) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.created_at)'
2025-10-29 14:50:03,123 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_episodic_index FOR (e:Episodic) ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.valid_at)'
2025-10-29 14:50:03,123 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)` has no effect.} {description: `RANGE INDEX name_edge_index FOR ()-[e:RELATES_TO]-() ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)'
2025-10-29 14:50:03,124 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)'
2025-10-29 14:50:03,124 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` has no effect.} {description: `RANGE INDEX expired_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` already exists.} {position: None} for query: 'CREATE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)'
2025-10-29 14:50:03,125 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)'
2025-10-29 14:50:03,126 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX episode_content IF NOT EXISTS FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` has no effect.} {description: `FULLTEXT INDEX episode_content FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX episode_content IF NOT EXISTS \n            FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]'
2025-10-29 14:50:03,126 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` has no effect.} {description: `FULLTEXT INDEX edge_name_and_fact FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS \n            FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]'
2025-10-29 14:50:03,127 - graphiti_ingestion_manager - INFO - GraphitiIngestionManager initialized for reliable episode ingestion (max_content_length=1200)
2025-10-29 14:50:03,127 - tenant_graphiti_client - INFO - 📏 Knowledge graph episodes will be truncated at 1200 characters
2025-10-29 14:50:03,127 - tenant_graphiti_client - INFO - TenantGraphitiClient initialized successfully with robust LLM: gemini-2.0-flash-thinking-exp-01-21
2025-10-29 14:50:03,127 - tenant_graphiti_client - INFO - ✅ Knowledge graph ingestion is now deterministic and reliable
2025-10-29 14:50:03,355 - interactive_multi_tenant_api - INFO - Document upload for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6: temporal_rag_test_story.md -> vector database + knowledge graph
2025-10-29 14:50:03,355 - tenant_data_ingestion_service - INFO - Starting document ingestion for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6: temporal_rag_test_story.md
2025-10-29 14:50:03,355 - tenant_data_ingestion_service - INFO - Ingestion options: vector database + knowledge graph
2025-10-29 14:50:06,197 - tenant_data_ingestion_service - INFO - Creating chunks for document: temporal_rag_test_story.md
2025-10-29 14:50:06,199 - tenant_data_ingestion_service - INFO - Generating embeddings for 4 chunks
2025-10-29 14:50:06,199 - ingestion.embedder - INFO - Generating embeddings for 4 chunks
2025-10-29 14:50:07,549 - ingestion.embedder - INFO - Processed batch 1/1
2025-10-29 14:50:07,550 - ingestion.embedder - INFO - Generated embeddings for 4 chunks (model: embedding-001, dimensions: 768)
2025-10-29 14:50:12,055 - tenant_data_ingestion_service - INFO - Created 4 chunks for document 6052e193-9602-4063-a5e7-2aa9a3e0521e (4 with valid embeddings, 0 without)
2025-10-29 14:50:12,273 - tenant_data_ingestion_service - INFO - Vector ingestion: Created 4 chunks with embeddings
2025-10-29 14:50:12,274 - tenant_data_ingestion_service - INFO - Adding 4 existing chunks to tenant e3e43017-ed5e-49bb-a90b-f478782ddde6 graph namespace: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6
2025-10-29 14:50:12,274 - tenant_graphiti_client - INFO - 🚀 Starting production KG ingestion for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6: 4 chunks from 'temporal_rag_test_story.md'
2025-10-29 14:50:12,274 - graphiti_ingestion_manager - INFO - Starting KG ingestion for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6: 4 chunks from document 'temporal_rag_test_story.md'
2025-10-29 14:50:12,299 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:50:17,306 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:50:18,881 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:50:45,689 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:50:45,696 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:50:45,725 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:50:45,728 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:50:45,733 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:50:45,738 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:50:45,742 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:50:45,747 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:50:45,750 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:50:45,752 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:50:45,754 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:50:45,757 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:50:45,759 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:50:47,371 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:50:47,372 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:50:47,374 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:50:47,375 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:50:47,377 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:50:47,379 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:50:47,381 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:50:47,382 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:50:47,384 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:50:47,385 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:50:47,387 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:50:47,388 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:50:47,390 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:51:03,470 - graphiti_core.graphiti - INFO - Completed add_episode in 51193.49193572998 ms
2025-10-29 14:51:03,471 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_62bfba90_1761729612
2025-10-29 14:51:03,477 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:51:06,963 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:51:08,557 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:51:53,850 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:51:53,856 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:51:53,860 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:51:53,864 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:51:53,868 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:51:53,872 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:51:53,875 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:51:53,879 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:51:53,882 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:51:53,885 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:51:53,888 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:51:53,891 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:51:53,894 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:51:53,896 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:51:53,899 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:51:56,137 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:51:56,139 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:51:56,140 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:51:56,142 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:51:56,144 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:51:56,146 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:51:56,148 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:51:56,149 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:51:56,151 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:51:56,152 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:51:56,154 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:51:56,155 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:51:56,157 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:51:56,158 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:51:56,161 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:52:14,495 - graphiti_core.graphiti - INFO - Completed add_episode in 71023.76699447632 ms
2025-10-29 14:52:14,495 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_2b9c8a4a_1761729612
2025-10-29 14:52:14,499 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:52:19,759 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:52:22,007 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:31,494 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:31,500 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:31,505 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:31,509 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:31,514 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:31,518 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:31,522 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:31,525 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:31,529 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:31,532 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:31,535 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:31,538 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:31,540 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:31,543 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:31,546 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:31,548 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:31,551 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:31,553 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:31,555 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:31,558 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:33,083 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:33,087 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:33,167 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:33,169 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:33,911 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:33,913 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:33,914 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:33,916 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:33,918 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:33,920 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:33,921 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:33,923 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:33,925 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:33,930 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:33,932 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:33,933 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:33,934 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:33,936 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:33,938 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:33,939 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:33,941 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:33,943 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:33,945 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:33,946 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:34,881 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:34,966 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:35,037 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:35,039 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:35,202 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:35,206 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:53:35,210 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:54:01,805 - graphiti_core.graphiti - INFO - Completed add_episode in 107309.18025970459 ms
2025-10-29 14:54:01,805 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_26b65768_1761729612
2025-10-29 14:54:01,809 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:54:04,405 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:54:05,737 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:54:14,545 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:54:14,550 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:54:14,555 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:54:15,237 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:54:15,240 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:54:15,243 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 14:54:20,160 - graphiti_core.graphiti - INFO - Completed add_episode in 18354.695081710815 ms
2025-10-29 14:54:20,160 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_03846f0c_1761729612
2025-10-29 14:54:20,161 - graphiti_ingestion_manager - INFO - KG ingestion completed for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6: 4/4 episodes succeeded, 0 failed
2025-10-29 14:54:20,161 - tenant_graphiti_client - INFO - ✅ Perfect KG ingestion for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6: 4/4 episodes succeeded
2025-10-29 14:54:20,161 - tenant_data_ingestion_service - INFO - ✅ Successfully added 4 episodes to tenant e3e43017-ed5e-49bb-a90b-f478782ddde6 graph namespace
2025-10-29 14:54:20,161 - tenant_data_ingestion_service - INFO - Graph ingestion: Created episode 4
2025-10-29 14:54:20,161 - tenant_data_ingestion_service - INFO - Successfully ingested document 6052e193-9602-4063-a5e7-2aa9a3e0521e for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6 in 256805.94ms
2025-10-29 15:04:36,110 - interactive_multi_tenant_api - INFO - Shutting down Multi-Tenant RAG API...
2025-10-29 15:04:40,243 - __main__ - INFO - Starting Interactive Multi-Tenant RAG API on 127.0.0.1:8000
2025-10-29 15:04:40,262 - interactive_multi_tenant_api - INFO - Starting Multi-Tenant RAG API...
2025-10-29 15:04:40,262 - interactive_multi_tenant_api - INFO - Neo4j URI: neo4j://127.0.0.1:7687
2025-10-29 15:04:40,262 - interactive_multi_tenant_api - INFO - Neo4j User: neo4j
2025-10-29 15:04:40,262 - interactive_multi_tenant_api - INFO - Neo4j Password: ***
2025-10-29 15:04:40,262 - tenant_manager - INFO - TenantManager initialized with Graphiti client
2025-10-29 15:04:40,262 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-10-29 15:04:40,262 - ingestion.chunker - INFO - Creating SemanticChunker with Gemini LLM support
2025-10-29 15:04:40,262 - multi_tenant_ingestion - INFO - Multi-tenant ingestion pipeline initialized
2025-10-29 15:04:40,263 - tenant_manager - INFO - TenantManager initialized with multi-tenant ingestion pipeline
2025-10-29 15:04:40,263 - tenant_manager - INFO - TenantManager initialized with catalog database and Neon API
2025-10-29 15:04:40,263 - interactive_multi_tenant_api - INFO - Tenant manager initialized
2025-10-29 15:04:40,270 - ingestion.chunker - INFO - ChunkingConfig initialized for Gemini: chunk_size=800, overlap=150
2025-10-29 15:04:40,270 - interactive_multi_tenant_api - INFO - Tenant ingestion service initialized
2025-10-29 15:04:40,270 - auth_middleware - INFO - JWT Authenticator initialized
2025-10-29 15:04:40,270 - interactive_multi_tenant_api - INFO - JWT authenticator initialized
2025-10-29 15:04:40,270 - interactive_multi_tenant_api - INFO - 🎯 Multi-Tenant RAG API ready - all backend logs will appear in this terminal
2025-10-29 15:04:40,270 - interactive_multi_tenant_api - INFO - 📊 Backend activity from CLI and API operations will be shown below:
2025-10-29 15:05:01,883 - catalog_database - INFO - Catalog database pool initialized with 5-20 connections
2025-10-29 15:05:02,076 - catalog_database - INFO - Catalog database connection test successful
2025-10-29 15:05:02,076 - graphiti_performance_config - INFO - 🎯 Using BALANCED performance configuration for Graphiti
2025-10-29 15:05:02,077 - tenant_graphiti_client - INFO - 🚀 Graphiti Performance Configuration Applied:
2025-10-29 15:05:02,077 - tenant_graphiti_client - INFO -   📋 LLM Model: gemini-2.0-flash-thinking-exp-01-21
2025-10-29 15:05:02,077 - tenant_graphiti_client - INFO -   🌡️  Temperature: 0.0
2025-10-29 15:05:02,077 - tenant_graphiti_client - INFO -   📏 Max Content Length: 1200 chars
2025-10-29 15:05:02,077 - tenant_graphiti_client - INFO -   📦 Batch Size: 2
2025-10-29 15:05:02,078 - tenant_graphiti_client - INFO -   ⚡ Batch Optimization: True
2025-10-29 15:05:02,078 - tenant_graphiti_client - INFO -   ⏱️  Timeout: 60s
2025-10-29 15:05:02,078 - tenant_graphiti_client - INFO - Applied Graphiti performance optimizations for production reliability
2025-10-29 15:05:02,078 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 15:05:02,125 - robust_gemini_client - INFO - RobustGeminiClient initialized with temperature=0.0 for deterministic JSON output
2025-10-29 15:05:02,126 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 15:05:02,152 - google_genai._api_client - WARNING - Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.
2025-10-29 15:05:02,219 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_uuid IF NOT EXISTS FOR (e:Episodic) ON (e.uuid)` has no effect.} {description: `RANGE INDEX episode_uuid FOR (e:Episodic) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX episode_uuid IF NOT EXISTS FOR (n:Episodic) ON (n.uuid)'
2025-10-29 15:05:02,220 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_uuid IF NOT EXISTS FOR (e:Entity) ON (e.uuid)` has no effect.} {description: `RANGE INDEX entity_uuid FOR (e:Entity) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX entity_uuid IF NOT EXISTS FOR (n:Entity) ON (n.uuid)'
2025-10-29 15:05:02,220 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX community_uuid IF NOT EXISTS FOR (e:Community) ON (e.uuid)` has no effect.} {description: `RANGE INDEX community_uuid FOR (e:Community) ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX community_uuid IF NOT EXISTS FOR (n:Community) ON (n.uuid)'
2025-10-29 15:05:02,220 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX relation_uuid FOR ()-[e:RELATES_TO]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX relation_uuid IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.uuid)'
2025-10-29 15:05:02,221 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX mention_uuid FOR ()-[e:MENTIONS]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX mention_uuid IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.uuid)'
2025-10-29 15:05:02,222 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` has no effect.} {description: `RANGE INDEX has_member_uuid FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)` already exists.} {position: None} for query: 'CREATE INDEX has_member_uuid IF NOT EXISTS FOR ()-[e:HAS_MEMBER]-() ON (e.uuid)'
2025-10-29 15:05:02,224 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX episode_group_id IF NOT EXISTS FOR (e:Episodic) ON (e.group_id)` has no effect.} {description: `RANGE INDEX episode_group_id FOR (e:Episodic) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX episode_group_id IF NOT EXISTS FOR (n:Episodic) ON (n.group_id)'
2025-10-29 15:05:02,224 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_group_id IF NOT EXISTS FOR (e:Entity) ON (e.group_id)` has no effect.} {description: `RANGE INDEX entity_group_id FOR (e:Entity) ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX entity_group_id IF NOT EXISTS FOR (n:Entity) ON (n.group_id)'
2025-10-29 15:05:02,226 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX relation_group_id FOR ()-[e:RELATES_TO]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX relation_group_id IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.group_id)'
2025-10-29 15:05:02,226 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX episode_content IF NOT EXISTS FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` has no effect.} {description: `FULLTEXT INDEX episode_content FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX episode_content IF NOT EXISTS \n            FOR (e:Episodic) ON EACH [e.content, e.source, e.source_description, e.group_id]'
2025-10-29 15:05:02,227 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)` has no effect.} {description: `RANGE INDEX mention_group_id FOR ()-[e:MENTIONS]-() ON (e.group_id)` already exists.} {position: None} for query: 'CREATE INDEX mention_group_id IF NOT EXISTS FOR ()-[e:MENTIONS]-() ON (e.group_id)'
2025-10-29 15:05:02,227 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX community_name IF NOT EXISTS FOR (e:Community) ON EACH [e.name, e.group_id]` has no effect.} {description: `FULLTEXT INDEX community_name FOR (e:Community) ON EACH [e.name, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX community_name IF NOT EXISTS \n            FOR (n:Community) ON EACH [n.name, n.group_id]'
2025-10-29 15:05:02,227 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` has no effect.} {description: `FULLTEXT INDEX edge_name_and_fact FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX edge_name_and_fact IF NOT EXISTS \n            FOR ()-[e:RELATES_TO]-() ON EACH [e.name, e.fact, e.group_id]'
2025-10-29 15:05:02,228 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.name)` has no effect.} {description: `RANGE INDEX name_entity_index FOR (e:Entity) ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.name)'
2025-10-29 15:05:02,229 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_entity_index IF NOT EXISTS FOR (e:Entity) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_entity_index FOR (e:Entity) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_entity_index IF NOT EXISTS FOR (n:Entity) ON (n.created_at)'
2025-10-29 15:05:02,230 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_episodic_index FOR (e:Episodic) ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.created_at)'
2025-10-29 15:05:02,231 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_episodic_index IF NOT EXISTS FOR (e:Episodic) ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_episodic_index FOR (e:Episodic) ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_episodic_index IF NOT EXISTS FOR (n:Episodic) ON (n.valid_at)'
2025-10-29 15:05:02,231 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)` has no effect.} {description: `RANGE INDEX name_edge_index FOR ()-[e:RELATES_TO]-() ON (e.name)` already exists.} {position: None} for query: 'CREATE INDEX name_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.name)'
2025-10-29 15:05:02,232 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)` has no effect.} {description: `RANGE INDEX created_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.created_at)` already exists.} {position: None} for query: 'CREATE INDEX created_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.created_at)'
2025-10-29 15:05:02,233 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` has no effect.} {description: `RANGE INDEX expired_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.expired_at)` already exists.} {position: None} for query: 'CREATE INDEX expired_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.expired_at)'
2025-10-29 15:05:02,233 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` has no effect.} {description: `RANGE INDEX valid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.valid_at)` already exists.} {position: None} for query: 'CREATE INDEX valid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.valid_at)'
2025-10-29 15:05:02,233 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` has no effect.} {description: `RANGE INDEX invalid_at_edge_index FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)` already exists.} {position: None} for query: 'CREATE INDEX invalid_at_edge_index IF NOT EXISTS FOR ()-[e:RELATES_TO]-() ON (e.invalid_at)'
2025-10-29 15:05:02,233 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` has no effect.} {description: `FULLTEXT INDEX node_name_and_summary FOR (e:Entity) ON EACH [e.name, e.summary, e.group_id]` already exists.} {position: None} for query: 'CREATE FULLTEXT INDEX node_name_and_summary IF NOT EXISTS \n            FOR (n:Entity) ON EACH [n.name, n.summary, n.group_id]'
2025-10-29 15:05:02,234 - graphiti_ingestion_manager - INFO - GraphitiIngestionManager initialized for reliable episode ingestion (max_content_length=1200)
2025-10-29 15:05:02,234 - tenant_graphiti_client - INFO - 📏 Knowledge graph episodes will be truncated at 1200 characters
2025-10-29 15:05:02,234 - tenant_graphiti_client - INFO - TenantGraphitiClient initialized successfully with robust LLM: gemini-2.0-flash
2025-10-29 15:05:02,234 - tenant_graphiti_client - INFO - ✅ Knowledge graph ingestion is now deterministic and reliable
2025-10-29 15:05:11,638 - auth_middleware - INFO - Created access token for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6
2025-10-29 15:05:22,256 - interactive_multi_tenant_api - INFO - Document upload for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6: temporal_rag_test_story.md -> vector database + knowledge graph
2025-10-29 15:05:22,256 - tenant_data_ingestion_service - INFO - Starting document ingestion for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6: temporal_rag_test_story.md
2025-10-29 15:05:22,256 - tenant_data_ingestion_service - INFO - Ingestion options: vector database + knowledge graph
2025-10-29 15:05:25,431 - tenant_data_ingestion_service - INFO - Creating chunks for document: temporal_rag_test_story.md
2025-10-29 15:05:25,433 - tenant_data_ingestion_service - INFO - Generating embeddings for 4 chunks
2025-10-29 15:05:25,433 - ingestion.embedder - INFO - Generating embeddings for 4 chunks
2025-10-29 15:05:26,789 - ingestion.embedder - INFO - Processed batch 1/1
2025-10-29 15:05:26,789 - ingestion.embedder - INFO - Generated embeddings for 4 chunks (model: embedding-001, dimensions: 768)
2025-10-29 15:05:31,256 - tenant_data_ingestion_service - INFO - Created 4 chunks for document c16d7187-b512-4874-abe0-b602d4722220 (4 with valid embeddings, 0 without)
2025-10-29 15:05:31,537 - tenant_data_ingestion_service - INFO - Vector ingestion: Created 4 chunks with embeddings
2025-10-29 15:05:31,538 - tenant_data_ingestion_service - INFO - Adding 4 existing chunks to tenant e3e43017-ed5e-49bb-a90b-f478782ddde6 graph namespace: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6
2025-10-29 15:05:31,538 - tenant_graphiti_client - INFO - 🚀 Starting production KG ingestion for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6: 4 chunks from 'temporal_rag_test_story.md'
2025-10-29 15:05:31,538 - graphiti_ingestion_manager - INFO - Starting KG ingestion for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6: 4 chunks from document 'temporal_rag_test_story.md'
2025-10-29 15:05:31,560 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:05:36,784 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:05:38,452 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:06:03,803 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:06:03,806 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:06:03,808 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:06:03,810 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:06:03,813 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:06:03,815 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:06:03,817 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:06:03,819 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:06:03,821 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:06:03,823 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:06:03,826 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:06:03,828 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:06:03,830 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:06:05,958 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:06:05,960 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:06:05,962 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:06:05,963 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:06:05,965 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:06:05,967 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:06:05,968 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:06:05,970 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:06:05,971 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:06:05,973 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:06:05,974 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:06:05,976 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:06:05,977 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:06:05,979 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:06:22,343 - graphiti_core.graphiti - INFO - Completed add_episode in 50803.46703529358 ms
2025-10-29 15:06:22,344 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_fc44e5d2_1761730531
2025-10-29 15:06:22,349 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:06:26,979 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:06:28,481 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:07:15,518 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:07:15,525 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:07:15,531 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:07:15,536 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:07:15,540 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:07:15,544 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:07:15,546 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:07:15,550 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:07:15,552 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:07:15,554 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:07:15,557 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:07:15,559 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:07:15,561 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:07:15,563 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:07:15,566 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:07:17,438 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:07:17,439 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:07:17,441 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:07:17,442 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:07:17,444 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:07:17,446 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:07:17,448 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:07:17,449 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:07:17,451 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:07:17,452 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:07:17,454 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:07:17,456 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:07:17,457 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:07:17,459 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:07:36,685 - graphiti_core.graphiti - INFO - Completed add_episode in 74341.1238193512 ms
2025-10-29 15:07:36,685 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_c245dad0_1761730531
2025-10-29 15:07:36,690 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:07:43,030 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:07:45,280 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:41,442 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:41,449 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:41,454 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:41,460 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:41,464 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:41,468 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:41,472 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:41,475 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:41,478 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:41,481 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:41,484 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:41,487 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:41,489 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:41,492 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:41,495 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:41,497 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:41,499 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:41,502 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:41,504 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:41,507 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:42,930 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:42,939 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:42,945 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:42,993 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:43,339 - graphiti_core.llm_client.gemini_client - ERROR - 🦀 LLM generation failed parsing as JSON, will try to salvage.
2025-10-29 15:08:43,339 - graphiti_core.llm_client.gemini_client - ERROR - Input messages: [
  {
    "parts": [
      {
        "video_metadata": null,
        "thought": null,
        "inline_data": null,
        "file_data": null,
        "thought_signature": null,
        "function_call": null,
        "code_execution_result": null,
        "executable_code": null,
        "function_response": null,
        "text": "\n\n        <MESSAGES>\n        [\n  \"Document: temporal_rag_test_story.md\\nSection 1:\\nTemporal Knowledge Story for RAG Testing\\nStory: The Life and Choices of Aanya Sharma (2023-2025)\\nDecember 2023\\nAanya Sharma is a product manager at Zyphos Tech, living in Bangalore.\\nShe prefers Android phones. Her favorite phone is the OnePlus 11R.\\nShe is using Notion as her preferred note-taking app.\\nShe uses Slack for team collaboration.\\nHer favorite coffee shop is Third Wave Coffee, Indiranagar.\\nFebruary 2024\\nAanya moves to Hyderabad for a project.\\nShe discovers and starts preferring Samsung Galaxy Z Fold 5 over OnePlus.\\nShe starts using Obsidian instead of Notion due to better knowledge graphing.\\nHer favorite caf becomes Roastery Coffee House in Hyderabad.\\n-\",\n  \"Document: temporal_rag_test_story.md\\nSection 2:\\nSlack is replaced by Microsoft Teams in her organization.\\nJune 2024\\nAanya buys an iPhone 15 Pro Max after being influenced by her designer friends.\\nShe now prefers Apple devices.\\nShe starts using Apple Notes.\\nShe still uses Microsoft Teams.\\nHer favorite coffee shop is now Starbucks, Banjara Hills.\\nSeptember 2024\\nAanya is promoted to Director of Product.\\nShe starts managing two teams:\\nProduct Team A: Working on internal tools.\\nProduct Team B: Working on mobile consumer app.\\nProduct Team A uses Jira, while Team B uses Linear.\\nShe uses Miro heavily for brainstorming and workshops.\\nShe starts splitting her time between Hyderabad and Mumbai.\\n-\",\n  \"Document: temporal_rag_test_story.md\\nSection 3:\\nHer Mumbai go-to place is Blue Tokai, Bandra.\\nJanuary 2025\\nAanya switches to Pixel 9 Pro as she becomes interested in AI-first devices.\\nApple is no longer her preferred brand-she now leans toward Googles ecosystem.\\nShe moves fully to Hyderabad.\\nShe now prefers Trello for personal projects, while her teams still use Jira and Linear.\\nShe mentors a group of interns, one of whom, Rahul Mehta, prefers One UI over Pixel UI.\\nJuly 2025\\nAanya joins Cerebro AI as Chief Product Officer.\\nShe now oversees:\\nInfra Team (uses Jira)\\nML Research Team (uses GitHub Projects)\\nAI Product Team (uses Notion again)\\nShe reverts to iPhone 16 due to better integration with her Mac.\\n-\",\n  \"Document: temporal_rag_test_story.md\\nSection 4:\\nHer preferred coffee shop is now Sonder Coffee, HSR Layout when shes in Bangalore for board meetings.\\n---\",\n  \"Document: temporal_rag_test_story.md\\nSection 1:\\nTemporal Knowledge Story for RAG Testing\\nStory: The Life and Choices of Aanya Sharma (2023-2025)\\nDecember 2023\\nAanya Sharma is a product manager at Zyphos Tech, living in Bangalore.\\nShe prefers Android phones. Her favorite phone is the OnePlus 11R.\\nShe is using Notion as her preferred note-taking app.\\nShe uses Slack for team collaboration.\\nHer favorite coffee shop is Third Wave Coffee, Indiranagar.\\nFebruary 2024\\nAanya moves to Hyderabad for a project.\\nShe discovers and starts preferring Samsung Galaxy Z Fold 5 over OnePlus.\\nShe starts using Obsidian instead of Notion due to better knowledge graphing.\\nHer favorite caf becomes Roastery Coffee House in Hyderabad.\\n-\",\n  \"Document: temporal_rag_test_story.md\\nSection 2:\\nSlack is replaced by Microsoft Teams in her organization.\\nJune 2024\\nAanya buys an iPhone 15 Pro Max after being influenced by her designer friends.\\nShe now prefers Apple devices.\\nShe starts using Apple Notes.\\nShe still uses Microsoft Teams.\\nHer favorite coffee shop is now Starbucks, Banjara Hills.\\nSeptember 2024\\nAanya is promoted to Director of Product.\\nShe starts managing two teams:\\nProduct Team A: Working on internal tools.\\nProduct Team B: Working on mobile consumer app.\\nProduct Team A uses Jira, while Team B uses Linear.\\nShe uses Miro heavily for brainstorming and workshops.\\nShe starts splitting her time between Hyderabad and Mumbai.\\n-\",\n  \"Document: temporal_rag_test_story.md\\nSection 3:\\nHer Mumbai go-to place is Blue Tokai, Bandra.\\nJanuary 2025\\nAanya switches to Pixel 9 Pro as she becomes interested in AI-first devices.\\nApple is no longer her preferred brand-she now leans toward Googles ecosystem.\\nShe moves fully to Hyderabad.\\nShe now prefers Trello for personal projects, while her teams still use Jira and Linear.\\nShe mentors a group of interns, one of whom, Rahul Mehta, prefers One UI over Pixel UI.\\nJuly 2025\\nAanya joins Cerebro AI as Chief Product Officer.\\nShe now oversees:\\nInfra Team (uses Jira)\\nML Research Team (uses GitHub Projects)\\nAI Product Team (uses Notion again)\\nShe reverts to iPhone 16 due to better integration with her Mac.\\n-\",\n  \"Document: temporal_rag_test_story.md\\nSection 4:\\nHer preferred coffee shop is now Sonder Coffee, HSR Layout when shes in Bangalore for board meetings.\\n---\",\n  \"Document: temporal_rag_test_story.md\\nSection 1:\\nTemporal Knowledge Story for RAG Testing\\nStory: The Life and Choices of Aanya Sharma (2023-2025)\\nDecember 2023\\nAanya Sharma is a product manager at Zyphos Tech, living in Bangalore.\\nShe prefers Android phones. Her favorite phone is the OnePlus 11R.\\nShe is using Notion as her preferred note-taking app.\\nShe uses Slack for team collaboration.\\nHer favorite coffee shop is Third Wave Coffee, Indiranagar.\\nFebruary 2024\\nAanya moves to Hyderabad for a project.\\nShe discovers and starts preferring Samsung Galaxy Z Fold 5 over OnePlus.\\nShe starts using Obsidian instead of Notion due to better knowledge graphing.\\nHer favorite caf becomes Roastery Coffee House in Hyderabad.\\n-\",\n  \"Document: temporal_rag_test_story.md\\nSection 2:\\nSlack is replaced by Microsoft Teams in her organization.\\nJune 2024\\nAanya buys an iPhone 15 Pro Max after being influenced by her designer friends.\\nShe now prefers Apple devices.\\nShe starts using Apple Notes.\\nShe still uses Microsoft Teams.\\nHer favorite coffee shop is now Starbucks, Banjara Hills.\\nSeptember 2024\\nAanya is promoted to Director of Product.\\nShe starts managing two teams:\\nProduct Team A: Working on internal tools.\\nProduct Team B: Working on mobile consumer app.\\nProduct Team A uses Jira, while Team B uses Linear.\\nShe uses Miro heavily for brainstorming and workshops.\\nShe starts splitting her time between Hyderabad and Mumbai.\\n-\"\n]\n        \"Document: temporal_rag_test_story.md\\nSection 3:\\nHer Mumbai go-to place is Blue Tokai, Bandra.\\nJanuary 2025\\nAanya switches to Pixel 9 Pro as she becomes interested in AI-first devices.\\nApple is no longer her preferred brand-she now leans toward Googles ecosystem.\\nShe moves fully to Hyderabad.\\nShe now prefers Trello for personal projects, while her teams still use Jira and Linear.\\nShe mentors a group of interns, one of whom, Rahul Mehta, prefers One UI over Pixel UI.\\nJuly 2025\\nAanya joins Cerebro AI as Chief Product Officer.\\nShe now oversees:\\nInfra Team (uses Jira)\\nML Research Team (uses GitHub Projects)\\nAI Product Team (uses Notion again)\\nShe reverts to iPhone 16 due to better integration with her Mac.\\n-\"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {'name': 'Mumbai', 'summary': 'Mumbai is a city where Aanya Sharma starts splitting her time in September 2024, in addition to Hyderabad. This is mentioned in the context of her promotion to Director of Product and managing two teams, Product Team A and Product Team B, who use different project management tools (Jira and Linear, respectively). Aanya also uses Miro heavily for brainstorming and workshops during this period. By January 2025, she moves fully to Hyderabad. Her Mumbai go-to place is Blue Tokai, Bandra. In July 2025, Aanya joins Cerebro AI as Chief Product Officer.', 'entity_types': ['Entity'], 'attributes': {'labels': ['Entity']}}\n        </ENTITY>\n        "
      }
    ],
    "role": "user"
  }
]
Raw output: ```json
{
  "summary": "Mumbai is a city where Aanya Sharma starts splitting her time in September 2024, in addition to Hyderabad. This is mentioned in the context of her promotion to Director of Product and managing two teams, Product Team A and Product Team B, who use different project management tools (Jira and Linear, respectively). Aanya also uses Miro heavily for brainstorming and workshops during this period. By January 2025, she moves fully to Hyderabad. Her Mumbai go-to place is Blue Tokai, Bandra. In July 2025, Aanya joins Cerebro AI as Chief Product Officer."
}
```

2025-10-29 15:08:43,340 - graphiti_core.llm_client.gemini_client - ERROR - Error in generating LLM response: Failed to parse structured response: Expecting value: line 1 column 1 (char 0)
2025-10-29 15:08:43,340 - graphiti_core.llm_client.gemini_client - WARNING - Retrying after application error (attempt 1/2): 
2025-10-29 15:08:43,342 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:44,053 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:44,054 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:44,056 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:44,057 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:44,058 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:44,061 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:44,062 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:44,064 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:44,065 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:44,067 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:44,069 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:44,073 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:44,075 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:44,076 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:44,153 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:44,154 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:44,156 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:44,157 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:44,159 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:44,161 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:45,284 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:45,376 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:45,551 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:45,554 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:45,555 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:08:45,558 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:09:02,616 - graphiti_core.graphiti - INFO - Completed add_episode in 85930.59086799622 ms
2025-10-29 15:09:02,617 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_eb0cf375_1761730531
2025-10-29 15:09:02,621 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:09:04,944 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:09:06,158 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:09:10,988 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:09:10,991 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:09:10,994 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:09:11,910 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:09:11,913 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:09:11,915 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-10-29 15:09:15,910 - graphiti_core.graphiti - INFO - Completed add_episode in 13293.224096298218 ms
2025-10-29 15:09:15,911 - graphiti_ingestion_manager - INFO - ✅ Episode ingested successfully: tenant_e3e43017-ed5e-49bb-a90b-f478782ddde6_1515d226_1761730531
2025-10-29 15:09:15,911 - graphiti_ingestion_manager - INFO - KG ingestion completed for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6: 4/4 episodes succeeded, 0 failed
2025-10-29 15:09:15,911 - tenant_graphiti_client - INFO - ✅ Perfect KG ingestion for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6: 4/4 episodes succeeded
2025-10-29 15:09:15,911 - tenant_data_ingestion_service - INFO - ✅ Successfully added 4 episodes to tenant e3e43017-ed5e-49bb-a90b-f478782ddde6 graph namespace
2025-10-29 15:09:15,911 - tenant_data_ingestion_service - INFO - Graph ingestion: Created episode 4
2025-10-29 15:09:15,911 - tenant_data_ingestion_service - INFO - Successfully ingested document c16d7187-b512-4874-abe0-b602d4722220 for tenant e3e43017-ed5e-49bb-a90b-f478782ddde6 in 233654.61ms
2025-10-29 15:19:22,907 - interactive_multi_tenant_api - INFO - Shutting down Multi-Tenant RAG API...
